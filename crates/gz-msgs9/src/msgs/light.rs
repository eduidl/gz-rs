// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gz/msgs/light.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_common::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.Light)
pub struct Light {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.Light.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:gz.msgs.Light.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:gz.msgs.Light.type)
    pub type_: ::protobuf::EnumOrUnknown<light::LightType>,
    // @@protoc_insertion_point(field:gz.msgs.Light.pose)
    pub pose: ::protobuf::MessageField<super::pose::Pose>,
    // @@protoc_insertion_point(field:gz.msgs.Light.diffuse)
    pub diffuse: ::protobuf::MessageField<super::color::Color>,
    // @@protoc_insertion_point(field:gz.msgs.Light.specular)
    pub specular: ::protobuf::MessageField<super::color::Color>,
    // @@protoc_insertion_point(field:gz.msgs.Light.attenuation_constant)
    pub attenuation_constant: f32,
    // @@protoc_insertion_point(field:gz.msgs.Light.attenuation_linear)
    pub attenuation_linear: f32,
    // @@protoc_insertion_point(field:gz.msgs.Light.attenuation_quadratic)
    pub attenuation_quadratic: f32,
    // @@protoc_insertion_point(field:gz.msgs.Light.direction)
    pub direction: ::protobuf::MessageField<super::vector3d::Vector3d>,
    // @@protoc_insertion_point(field:gz.msgs.Light.range)
    pub range: f32,
    // @@protoc_insertion_point(field:gz.msgs.Light.cast_shadows)
    pub cast_shadows: bool,
    // @@protoc_insertion_point(field:gz.msgs.Light.spot_inner_angle)
    pub spot_inner_angle: f32,
    // @@protoc_insertion_point(field:gz.msgs.Light.spot_outer_angle)
    pub spot_outer_angle: f32,
    // @@protoc_insertion_point(field:gz.msgs.Light.spot_falloff)
    pub spot_falloff: f32,
    // @@protoc_insertion_point(field:gz.msgs.Light.id)
    pub id: u32,
    // @@protoc_insertion_point(field:gz.msgs.Light.parent_id)
    pub parent_id: u32,
    // @@protoc_insertion_point(field:gz.msgs.Light.intensity)
    pub intensity: f32,
    // @@protoc_insertion_point(field:gz.msgs.Light.is_light_off)
    pub is_light_off: bool,
    // @@protoc_insertion_point(field:gz.msgs.Light.visualize_visual)
    pub visualize_visual: bool,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.Light.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Light {
    fn default() -> &'a Light {
        <Light as ::protobuf::Message>::default_instance()
    }
}

impl Light {
    pub fn new() -> Light {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(20);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &Light| { &m.header },
            |m: &mut Light| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Light| { &m.name },
            |m: &mut Light| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Light| { &m.type_ },
            |m: &mut Light| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pose::Pose>(
            "pose",
            |m: &Light| { &m.pose },
            |m: &mut Light| { &mut m.pose },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::color::Color>(
            "diffuse",
            |m: &Light| { &m.diffuse },
            |m: &mut Light| { &mut m.diffuse },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::color::Color>(
            "specular",
            |m: &Light| { &m.specular },
            |m: &mut Light| { &mut m.specular },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "attenuation_constant",
            |m: &Light| { &m.attenuation_constant },
            |m: &mut Light| { &mut m.attenuation_constant },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "attenuation_linear",
            |m: &Light| { &m.attenuation_linear },
            |m: &mut Light| { &mut m.attenuation_linear },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "attenuation_quadratic",
            |m: &Light| { &m.attenuation_quadratic },
            |m: &mut Light| { &mut m.attenuation_quadratic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::vector3d::Vector3d>(
            "direction",
            |m: &Light| { &m.direction },
            |m: &mut Light| { &mut m.direction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "range",
            |m: &Light| { &m.range },
            |m: &mut Light| { &mut m.range },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cast_shadows",
            |m: &Light| { &m.cast_shadows },
            |m: &mut Light| { &mut m.cast_shadows },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "spot_inner_angle",
            |m: &Light| { &m.spot_inner_angle },
            |m: &mut Light| { &mut m.spot_inner_angle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "spot_outer_angle",
            |m: &Light| { &m.spot_outer_angle },
            |m: &mut Light| { &mut m.spot_outer_angle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "spot_falloff",
            |m: &Light| { &m.spot_falloff },
            |m: &mut Light| { &mut m.spot_falloff },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Light| { &m.id },
            |m: &mut Light| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "parent_id",
            |m: &Light| { &m.parent_id },
            |m: &mut Light| { &mut m.parent_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "intensity",
            |m: &Light| { &m.intensity },
            |m: &mut Light| { &mut m.intensity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_light_off",
            |m: &Light| { &m.is_light_off },
            |m: &mut Light| { &mut m.is_light_off },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "visualize_visual",
            |m: &Light| { &m.visualize_visual },
            |m: &mut Light| { &mut m.visualize_visual },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Light>(
            "Light",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Light {
    const NAME: &'static str = "Light";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                24 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pose)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.diffuse)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.specular)?;
                },
                61 => {
                    self.attenuation_constant = is.read_float()?;
                },
                69 => {
                    self.attenuation_linear = is.read_float()?;
                },
                77 => {
                    self.attenuation_quadratic = is.read_float()?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.direction)?;
                },
                93 => {
                    self.range = is.read_float()?;
                },
                96 => {
                    self.cast_shadows = is.read_bool()?;
                },
                109 => {
                    self.spot_inner_angle = is.read_float()?;
                },
                117 => {
                    self.spot_outer_angle = is.read_float()?;
                },
                125 => {
                    self.spot_falloff = is.read_float()?;
                },
                128 => {
                    self.id = is.read_uint32()?;
                },
                136 => {
                    self.parent_id = is.read_uint32()?;
                },
                149 => {
                    self.intensity = is.read_float()?;
                },
                152 => {
                    self.is_light_off = is.read_bool()?;
                },
                160 => {
                    self.visualize_visual = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(light::LightType::POINT) {
            my_size += ::protobuf::rt::int32_size(3, self.type_.value());
        }
        if let Some(v) = self.pose.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.diffuse.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.specular.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.attenuation_constant != 0. {
            my_size += 1 + 4;
        }
        if self.attenuation_linear != 0. {
            my_size += 1 + 4;
        }
        if self.attenuation_quadratic != 0. {
            my_size += 1 + 4;
        }
        if let Some(v) = self.direction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.range != 0. {
            my_size += 1 + 4;
        }
        if self.cast_shadows != false {
            my_size += 1 + 1;
        }
        if self.spot_inner_angle != 0. {
            my_size += 1 + 4;
        }
        if self.spot_outer_angle != 0. {
            my_size += 1 + 4;
        }
        if self.spot_falloff != 0. {
            my_size += 1 + 4;
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(16, self.id);
        }
        if self.parent_id != 0 {
            my_size += ::protobuf::rt::uint32_size(17, self.parent_id);
        }
        if self.intensity != 0. {
            my_size += 2 + 4;
        }
        if self.is_light_off != false {
            my_size += 2 + 1;
        }
        if self.visualize_visual != false {
            my_size += 2 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(light::LightType::POINT) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if let Some(v) = self.pose.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.diffuse.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.specular.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if self.attenuation_constant != 0. {
            os.write_float(7, self.attenuation_constant)?;
        }
        if self.attenuation_linear != 0. {
            os.write_float(8, self.attenuation_linear)?;
        }
        if self.attenuation_quadratic != 0. {
            os.write_float(9, self.attenuation_quadratic)?;
        }
        if let Some(v) = self.direction.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if self.range != 0. {
            os.write_float(11, self.range)?;
        }
        if self.cast_shadows != false {
            os.write_bool(12, self.cast_shadows)?;
        }
        if self.spot_inner_angle != 0. {
            os.write_float(13, self.spot_inner_angle)?;
        }
        if self.spot_outer_angle != 0. {
            os.write_float(14, self.spot_outer_angle)?;
        }
        if self.spot_falloff != 0. {
            os.write_float(15, self.spot_falloff)?;
        }
        if self.id != 0 {
            os.write_uint32(16, self.id)?;
        }
        if self.parent_id != 0 {
            os.write_uint32(17, self.parent_id)?;
        }
        if self.intensity != 0. {
            os.write_float(18, self.intensity)?;
        }
        if self.is_light_off != false {
            os.write_bool(19, self.is_light_off)?;
        }
        if self.visualize_visual != false {
            os.write_bool(20, self.visualize_visual)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Light {
        Light::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.name.clear();
        self.type_ = ::protobuf::EnumOrUnknown::new(light::LightType::POINT);
        self.pose.clear();
        self.diffuse.clear();
        self.specular.clear();
        self.attenuation_constant = 0.;
        self.attenuation_linear = 0.;
        self.attenuation_quadratic = 0.;
        self.direction.clear();
        self.range = 0.;
        self.cast_shadows = false;
        self.spot_inner_angle = 0.;
        self.spot_outer_angle = 0.;
        self.spot_falloff = 0.;
        self.id = 0;
        self.parent_id = 0;
        self.intensity = 0.;
        self.is_light_off = false;
        self.visualize_visual = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Light {
        static instance: Light = Light {
            header: ::protobuf::MessageField::none(),
            name: ::std::string::String::new(),
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            pose: ::protobuf::MessageField::none(),
            diffuse: ::protobuf::MessageField::none(),
            specular: ::protobuf::MessageField::none(),
            attenuation_constant: 0.,
            attenuation_linear: 0.,
            attenuation_quadratic: 0.,
            direction: ::protobuf::MessageField::none(),
            range: 0.,
            cast_shadows: false,
            spot_inner_angle: 0.,
            spot_outer_angle: 0.,
            spot_falloff: 0.,
            id: 0,
            parent_id: 0,
            intensity: 0.,
            is_light_off: false,
            visualize_visual: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Light {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Light").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Light {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Light {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Light`
pub mod light {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:gz.msgs.Light.LightType)
    pub enum LightType {
        // @@protoc_insertion_point(enum_value:gz.msgs.Light.LightType.POINT)
        POINT = 0,
        // @@protoc_insertion_point(enum_value:gz.msgs.Light.LightType.SPOT)
        SPOT = 1,
        // @@protoc_insertion_point(enum_value:gz.msgs.Light.LightType.DIRECTIONAL)
        DIRECTIONAL = 2,
    }

    impl ::protobuf::Enum for LightType {
        const NAME: &'static str = "LightType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<LightType> {
            match value {
                0 => ::std::option::Option::Some(LightType::POINT),
                1 => ::std::option::Option::Some(LightType::SPOT),
                2 => ::std::option::Option::Some(LightType::DIRECTIONAL),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [LightType] = &[
            LightType::POINT,
            LightType::SPOT,
            LightType::DIRECTIONAL,
        ];
    }

    impl ::protobuf::EnumFull for LightType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Light.LightType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for LightType {
        fn default() -> Self {
            LightType::POINT
        }
    }

    impl LightType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<LightType>("Light.LightType")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13gz/msgs/light.proto\x12\x07gz.msgs\x1a\x14gz/msgs/header.proto\x1a\
    \x12gz/msgs/pose.proto\x1a\x16gz/msgs/vector3d.proto\x1a\x13gz/msgs/colo\
    r.proto\"\xae\x06\n\x05Light\x12'\n\x06header\x18\x01\x20\x01(\x0b2\x0f.\
    gz.msgs.HeaderR\x06header\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\
    \x12,\n\x04type\x18\x03\x20\x01(\x0e2\x18.gz.msgs.Light.LightTypeR\x04ty\
    pe\x12!\n\x04pose\x18\x04\x20\x01(\x0b2\r.gz.msgs.PoseR\x04pose\x12(\n\
    \x07diffuse\x18\x05\x20\x01(\x0b2\x0e.gz.msgs.ColorR\x07diffuse\x12*\n\
    \x08specular\x18\x06\x20\x01(\x0b2\x0e.gz.msgs.ColorR\x08specular\x121\n\
    \x14attenuation_constant\x18\x07\x20\x01(\x02R\x13attenuationConstant\
    \x12-\n\x12attenuation_linear\x18\x08\x20\x01(\x02R\x11attenuationLinear\
    \x123\n\x15attenuation_quadratic\x18\t\x20\x01(\x02R\x14attenuationQuadr\
    atic\x12/\n\tdirection\x18\n\x20\x01(\x0b2\x11.gz.msgs.Vector3dR\tdirect\
    ion\x12\x14\n\x05range\x18\x0b\x20\x01(\x02R\x05range\x12!\n\x0ccast_sha\
    dows\x18\x0c\x20\x01(\x08R\x0bcastShadows\x12(\n\x10spot_inner_angle\x18\
    \r\x20\x01(\x02R\x0espotInnerAngle\x12(\n\x10spot_outer_angle\x18\x0e\
    \x20\x01(\x02R\x0espotOuterAngle\x12!\n\x0cspot_falloff\x18\x0f\x20\x01(\
    \x02R\x0bspotFalloff\x12\x0e\n\x02id\x18\x10\x20\x01(\rR\x02id\x12\x1b\n\
    \tparent_id\x18\x11\x20\x01(\rR\x08parentId\x12\x1c\n\tintensity\x18\x12\
    \x20\x01(\x02R\tintensity\x12\x20\n\x0cis_light_off\x18\x13\x20\x01(\x08\
    R\nisLightOff\x12)\n\x10visualize_visual\x18\x14\x20\x01(\x08R\x0fvisual\
    izeVisual\"1\n\tLightType\x12\t\n\x05POINT\x10\0\x12\x08\n\x04SPOT\x10\
    \x01\x12\x0f\n\x0bDIRECTIONAL\x10\x02B\x1a\n\x0bcom.gz.msgsB\x0bLightPro\
    tosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::header::file_descriptor().clone());
            deps.push(super::pose::file_descriptor().clone());
            deps.push(super::vector3d::file_descriptor().clone());
            deps.push(super::color::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Light::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(light::LightType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

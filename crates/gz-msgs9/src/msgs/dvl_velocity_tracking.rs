// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gz/msgs/dvl_velocity_tracking.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_derive::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.DVLVelocityTracking)
pub struct DVLVelocityTracking {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.DVLVelocityTracking.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:gz.msgs.DVLVelocityTracking.type)
    pub type_: ::protobuf::EnumOrUnknown<dvlvelocity_tracking::DVLType>,
    // @@protoc_insertion_point(field:gz.msgs.DVLVelocityTracking.target)
    pub target: ::protobuf::MessageField<super::dvl_tracking_target::DVLTrackingTarget>,
    // @@protoc_insertion_point(field:gz.msgs.DVLVelocityTracking.velocity)
    pub velocity: ::protobuf::MessageField<super::dvl_kinematic_estimate::DVLKinematicEstimate>,
    // @@protoc_insertion_point(field:gz.msgs.DVLVelocityTracking.beams)
    pub beams: ::std::vec::Vec<super::dvl_beam_state::DVLBeamState>,
    // @@protoc_insertion_point(field:gz.msgs.DVLVelocityTracking.status)
    pub status: i32,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.DVLVelocityTracking.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DVLVelocityTracking {
    fn default() -> &'a DVLVelocityTracking {
        <DVLVelocityTracking as ::protobuf::Message>::default_instance()
    }
}

impl DVLVelocityTracking {
    pub fn new() -> DVLVelocityTracking {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &DVLVelocityTracking| { &m.header },
            |m: &mut DVLVelocityTracking| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &DVLVelocityTracking| { &m.type_ },
            |m: &mut DVLVelocityTracking| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::dvl_tracking_target::DVLTrackingTarget>(
            "target",
            |m: &DVLVelocityTracking| { &m.target },
            |m: &mut DVLVelocityTracking| { &mut m.target },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::dvl_kinematic_estimate::DVLKinematicEstimate>(
            "velocity",
            |m: &DVLVelocityTracking| { &m.velocity },
            |m: &mut DVLVelocityTracking| { &mut m.velocity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "beams",
            |m: &DVLVelocityTracking| { &m.beams },
            |m: &mut DVLVelocityTracking| { &mut m.beams },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &DVLVelocityTracking| { &m.status },
            |m: &mut DVLVelocityTracking| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DVLVelocityTracking>(
            "DVLVelocityTracking",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DVLVelocityTracking {
    const NAME: &'static str = "DVLVelocityTracking";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                16 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.target)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.velocity)?;
                },
                42 => {
                    self.beams.push(is.read_message()?);
                },
                48 => {
                    self.status = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(dvlvelocity_tracking::DVLType::DVL_TYPE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(2, self.type_.value());
        }
        if let Some(v) = self.target.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.velocity.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.beams {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.status != 0 {
            my_size += ::protobuf::rt::int32_size(6, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(dvlvelocity_tracking::DVLType::DVL_TYPE_UNSPECIFIED) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if let Some(v) = self.target.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.velocity.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        for v in &self.beams {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if self.status != 0 {
            os.write_int32(6, self.status)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DVLVelocityTracking {
        DVLVelocityTracking::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.type_ = ::protobuf::EnumOrUnknown::new(dvlvelocity_tracking::DVLType::DVL_TYPE_UNSPECIFIED);
        self.target.clear();
        self.velocity.clear();
        self.beams.clear();
        self.status = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DVLVelocityTracking {
        static instance: DVLVelocityTracking = DVLVelocityTracking {
            header: ::protobuf::MessageField::none(),
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            target: ::protobuf::MessageField::none(),
            velocity: ::protobuf::MessageField::none(),
            beams: ::std::vec::Vec::new(),
            status: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DVLVelocityTracking {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DVLVelocityTracking").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DVLVelocityTracking {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DVLVelocityTracking {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DVLVelocityTracking`
pub mod dvlvelocity_tracking {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:gz.msgs.DVLVelocityTracking.DVLType)
    pub enum DVLType {
        // @@protoc_insertion_point(enum_value:gz.msgs.DVLVelocityTracking.DVLType.DVL_TYPE_UNSPECIFIED)
        DVL_TYPE_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:gz.msgs.DVLVelocityTracking.DVLType.DVL_TYPE_PISTON)
        DVL_TYPE_PISTON = 1,
        // @@protoc_insertion_point(enum_value:gz.msgs.DVLVelocityTracking.DVLType.DVL_TYPE_PHASED_ARRAY)
        DVL_TYPE_PHASED_ARRAY = 2,
    }

    impl ::protobuf::Enum for DVLType {
        const NAME: &'static str = "DVLType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<DVLType> {
            match value {
                0 => ::std::option::Option::Some(DVLType::DVL_TYPE_UNSPECIFIED),
                1 => ::std::option::Option::Some(DVLType::DVL_TYPE_PISTON),
                2 => ::std::option::Option::Some(DVLType::DVL_TYPE_PHASED_ARRAY),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [DVLType] = &[
            DVLType::DVL_TYPE_UNSPECIFIED,
            DVLType::DVL_TYPE_PISTON,
            DVLType::DVL_TYPE_PHASED_ARRAY,
        ];
    }

    impl ::protobuf::EnumFull for DVLType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("DVLVelocityTracking.DVLType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for DVLType {
        fn default() -> Self {
            DVLType::DVL_TYPE_UNSPECIFIED
        }
    }

    impl DVLType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DVLType>("DVLVelocityTracking.DVLType")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#gz/msgs/dvl_velocity_tracking.proto\x12\x07gz.msgs\x1a\x14gz/msgs/hea\
    der.proto\x1a\x1cgz/msgs/dvl_beam_state.proto\x1a!gz/msgs/dvl_tracking_t\
    arget.proto\x1a$gz/msgs/dvl_kinematic_estimate.proto\"\x81\x03\n\x13DVLV\
    elocityTracking\x12'\n\x06header\x18\x01\x20\x01(\x0b2\x0f.gz.msgs.Heade\
    rR\x06header\x128\n\x04type\x18\x02\x20\x01(\x0e2$.gz.msgs.DVLVelocityTr\
    acking.DVLTypeR\x04type\x122\n\x06target\x18\x03\x20\x01(\x0b2\x1a.gz.ms\
    gs.DVLTrackingTargetR\x06target\x129\n\x08velocity\x18\x04\x20\x01(\x0b2\
    \x1d.gz.msgs.DVLKinematicEstimateR\x08velocity\x12+\n\x05beams\x18\x05\
    \x20\x03(\x0b2\x15.gz.msgs.DVLBeamStateR\x05beams\x12\x16\n\x06status\
    \x18\x06\x20\x01(\x05R\x06status\"S\n\x07DVLType\x12\x18\n\x14DVL_TYPE_U\
    NSPECIFIED\x10\0\x12\x13\n\x0fDVL_TYPE_PISTON\x10\x01\x12\x19\n\x15DVL_T\
    YPE_PHASED_ARRAY\x10\x02B(\n\x0bcom.gz.msgsB\x19DVLVelocityTrackingProto\
    sb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::header::file_descriptor().clone());
            deps.push(super::dvl_beam_state::file_descriptor().clone());
            deps.push(super::dvl_tracking_target::file_descriptor().clone());
            deps.push(super::dvl_kinematic_estimate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(DVLVelocityTracking::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(dvlvelocity_tracking::DVLType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

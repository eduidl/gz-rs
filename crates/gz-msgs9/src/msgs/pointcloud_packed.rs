// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gz/msgs/pointcloud_packed.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_common::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.PointCloudPacked)
pub struct PointCloudPacked {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.PointCloudPacked.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:gz.msgs.PointCloudPacked.field)
    pub field: ::std::vec::Vec<point_cloud_packed::Field>,
    // @@protoc_insertion_point(field:gz.msgs.PointCloudPacked.height)
    pub height: u32,
    // @@protoc_insertion_point(field:gz.msgs.PointCloudPacked.width)
    pub width: u32,
    // @@protoc_insertion_point(field:gz.msgs.PointCloudPacked.is_bigendian)
    pub is_bigendian: bool,
    // @@protoc_insertion_point(field:gz.msgs.PointCloudPacked.point_step)
    pub point_step: u32,
    // @@protoc_insertion_point(field:gz.msgs.PointCloudPacked.row_step)
    pub row_step: u32,
    // @@protoc_insertion_point(field:gz.msgs.PointCloudPacked.data)
    pub data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:gz.msgs.PointCloudPacked.is_dense)
    pub is_dense: bool,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.PointCloudPacked.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PointCloudPacked {
    fn default() -> &'a PointCloudPacked {
        <PointCloudPacked as ::protobuf::Message>::default_instance()
    }
}

impl PointCloudPacked {
    pub fn new() -> PointCloudPacked {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &PointCloudPacked| { &m.header },
            |m: &mut PointCloudPacked| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "field",
            |m: &PointCloudPacked| { &m.field },
            |m: &mut PointCloudPacked| { &mut m.field },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &PointCloudPacked| { &m.height },
            |m: &mut PointCloudPacked| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "width",
            |m: &PointCloudPacked| { &m.width },
            |m: &mut PointCloudPacked| { &mut m.width },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_bigendian",
            |m: &PointCloudPacked| { &m.is_bigendian },
            |m: &mut PointCloudPacked| { &mut m.is_bigendian },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "point_step",
            |m: &PointCloudPacked| { &m.point_step },
            |m: &mut PointCloudPacked| { &mut m.point_step },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "row_step",
            |m: &PointCloudPacked| { &m.row_step },
            |m: &mut PointCloudPacked| { &mut m.row_step },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &PointCloudPacked| { &m.data },
            |m: &mut PointCloudPacked| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_dense",
            |m: &PointCloudPacked| { &m.is_dense },
            |m: &mut PointCloudPacked| { &mut m.is_dense },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PointCloudPacked>(
            "PointCloudPacked",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PointCloudPacked {
    const NAME: &'static str = "PointCloudPacked";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.field.push(is.read_message()?);
                },
                24 => {
                    self.height = is.read_uint32()?;
                },
                32 => {
                    self.width = is.read_uint32()?;
                },
                40 => {
                    self.is_bigendian = is.read_bool()?;
                },
                48 => {
                    self.point_step = is.read_uint32()?;
                },
                56 => {
                    self.row_step = is.read_uint32()?;
                },
                66 => {
                    self.data = is.read_bytes()?;
                },
                72 => {
                    self.is_dense = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.field {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.height != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.height);
        }
        if self.width != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.width);
        }
        if self.is_bigendian != false {
            my_size += 1 + 1;
        }
        if self.point_step != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.point_step);
        }
        if self.row_step != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.row_step);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(8, &self.data);
        }
        if self.is_dense != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.field {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.height != 0 {
            os.write_uint32(3, self.height)?;
        }
        if self.width != 0 {
            os.write_uint32(4, self.width)?;
        }
        if self.is_bigendian != false {
            os.write_bool(5, self.is_bigendian)?;
        }
        if self.point_step != 0 {
            os.write_uint32(6, self.point_step)?;
        }
        if self.row_step != 0 {
            os.write_uint32(7, self.row_step)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(8, &self.data)?;
        }
        if self.is_dense != false {
            os.write_bool(9, self.is_dense)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PointCloudPacked {
        PointCloudPacked::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.field.clear();
        self.height = 0;
        self.width = 0;
        self.is_bigendian = false;
        self.point_step = 0;
        self.row_step = 0;
        self.data.clear();
        self.is_dense = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PointCloudPacked {
        static instance: PointCloudPacked = PointCloudPacked {
            header: ::protobuf::MessageField::none(),
            field: ::std::vec::Vec::new(),
            height: 0,
            width: 0,
            is_bigendian: false,
            point_step: 0,
            row_step: 0,
            data: ::std::vec::Vec::new(),
            is_dense: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PointCloudPacked {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PointCloudPacked").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PointCloudPacked {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PointCloudPacked {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PointCloudPacked`
pub mod point_cloud_packed {
    #[derive(PartialEq,Clone,Default,Debug)]
    #[derive(::gz_msgs_common::GzMessage)]
    // @@protoc_insertion_point(message:gz.msgs.PointCloudPacked.Field)
    pub struct Field {
        // message fields
        // @@protoc_insertion_point(field:gz.msgs.PointCloudPacked.Field.name)
        pub name: ::std::string::String,
        // @@protoc_insertion_point(field:gz.msgs.PointCloudPacked.Field.offset)
        pub offset: u32,
        // @@protoc_insertion_point(field:gz.msgs.PointCloudPacked.Field.datatype)
        pub datatype: ::protobuf::EnumOrUnknown<field::DataType>,
        // @@protoc_insertion_point(field:gz.msgs.PointCloudPacked.Field.count)
        pub count: u32,
        // special fields
        // @@protoc_insertion_point(special_field:gz.msgs.PointCloudPacked.Field.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Field {
        fn default() -> &'a Field {
            <Field as ::protobuf::Message>::default_instance()
        }
    }

    impl Field {
        pub fn new() -> Field {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "name",
                |m: &Field| { &m.name },
                |m: &mut Field| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "offset",
                |m: &Field| { &m.offset },
                |m: &mut Field| { &mut m.offset },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "datatype",
                |m: &Field| { &m.datatype },
                |m: &mut Field| { &mut m.datatype },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "count",
                |m: &Field| { &m.count },
                |m: &mut Field| { &mut m.count },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Field>(
                "PointCloudPacked.Field",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Field {
        const NAME: &'static str = "Field";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = is.read_string()?;
                    },
                    16 => {
                        self.offset = is.read_uint32()?;
                    },
                    24 => {
                        self.datatype = is.read_enum_or_unknown()?;
                    },
                    32 => {
                        self.count = is.read_uint32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.name.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.name);
            }
            if self.offset != 0 {
                my_size += ::protobuf::rt::uint32_size(2, self.offset);
            }
            if self.datatype != ::protobuf::EnumOrUnknown::new(field::DataType::INT8) {
                my_size += ::protobuf::rt::int32_size(3, self.datatype.value());
            }
            if self.count != 0 {
                my_size += ::protobuf::rt::uint32_size(4, self.count);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.name.is_empty() {
                os.write_string(1, &self.name)?;
            }
            if self.offset != 0 {
                os.write_uint32(2, self.offset)?;
            }
            if self.datatype != ::protobuf::EnumOrUnknown::new(field::DataType::INT8) {
                os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.datatype))?;
            }
            if self.count != 0 {
                os.write_uint32(4, self.count)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Field {
            Field::new()
        }

        fn clear(&mut self) {
            self.name.clear();
            self.offset = 0;
            self.datatype = ::protobuf::EnumOrUnknown::new(field::DataType::INT8);
            self.count = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Field {
            static instance: Field = Field {
                name: ::std::string::String::new(),
                offset: 0,
                datatype: ::protobuf::EnumOrUnknown::from_i32(0),
                count: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Field {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("PointCloudPacked.Field").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Field {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Field {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Field`
    pub mod field {
        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:gz.msgs.PointCloudPacked.Field.DataType)
        pub enum DataType {
            // @@protoc_insertion_point(enum_value:gz.msgs.PointCloudPacked.Field.DataType.INT8)
            INT8 = 0,
            // @@protoc_insertion_point(enum_value:gz.msgs.PointCloudPacked.Field.DataType.UINT8)
            UINT8 = 1,
            // @@protoc_insertion_point(enum_value:gz.msgs.PointCloudPacked.Field.DataType.INT16)
            INT16 = 2,
            // @@protoc_insertion_point(enum_value:gz.msgs.PointCloudPacked.Field.DataType.UINT16)
            UINT16 = 3,
            // @@protoc_insertion_point(enum_value:gz.msgs.PointCloudPacked.Field.DataType.INT32)
            INT32 = 4,
            // @@protoc_insertion_point(enum_value:gz.msgs.PointCloudPacked.Field.DataType.UINT32)
            UINT32 = 5,
            // @@protoc_insertion_point(enum_value:gz.msgs.PointCloudPacked.Field.DataType.FLOAT32)
            FLOAT32 = 6,
            // @@protoc_insertion_point(enum_value:gz.msgs.PointCloudPacked.Field.DataType.FLOAT64)
            FLOAT64 = 7,
        }

        impl ::protobuf::Enum for DataType {
            const NAME: &'static str = "DataType";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<DataType> {
                match value {
                    0 => ::std::option::Option::Some(DataType::INT8),
                    1 => ::std::option::Option::Some(DataType::UINT8),
                    2 => ::std::option::Option::Some(DataType::INT16),
                    3 => ::std::option::Option::Some(DataType::UINT16),
                    4 => ::std::option::Option::Some(DataType::INT32),
                    5 => ::std::option::Option::Some(DataType::UINT32),
                    6 => ::std::option::Option::Some(DataType::FLOAT32),
                    7 => ::std::option::Option::Some(DataType::FLOAT64),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [DataType] = &[
                DataType::INT8,
                DataType::UINT8,
                DataType::INT16,
                DataType::UINT16,
                DataType::INT32,
                DataType::UINT32,
                DataType::FLOAT32,
                DataType::FLOAT64,
            ];
        }

        impl ::protobuf::EnumFull for DataType {
            fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().enum_by_package_relative_name("PointCloudPacked.Field.DataType").unwrap()).clone()
            }

            fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                let index = *self as usize;
                Self::enum_descriptor().value_by_index(index)
            }
        }

        impl ::std::default::Default for DataType {
            fn default() -> Self {
                DataType::INT8
            }
        }

        impl DataType {
            pub(in super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DataType>("PointCloudPacked.Field.DataType")
            }
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fgz/msgs/pointcloud_packed.proto\x12\x07gz.msgs\x1a\x14gz/msgs/head\
    er.proto\"\xa7\x04\n\x10PointCloudPacked\x12'\n\x06header\x18\x01\x20\
    \x01(\x0b2\x0f.gz.msgs.HeaderR\x06header\x125\n\x05field\x18\x02\x20\x03\
    (\x0b2\x1f.gz.msgs.PointCloudPacked.FieldR\x05field\x12\x16\n\x06height\
    \x18\x03\x20\x01(\rR\x06height\x12\x14\n\x05width\x18\x04\x20\x01(\rR\
    \x05width\x12!\n\x0cis_bigendian\x18\x05\x20\x01(\x08R\x0bisBigendian\
    \x12\x1d\n\npoint_step\x18\x06\x20\x01(\rR\tpointStep\x12\x19\n\x08row_s\
    tep\x18\x07\x20\x01(\rR\x07rowStep\x12\x12\n\x04data\x18\x08\x20\x01(\
    \x0cR\x04data\x12\x19\n\x08is_dense\x18\t\x20\x01(\x08R\x07isDense\x1a\
    \xf8\x01\n\x05Field\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\
    \x16\n\x06offset\x18\x02\x20\x01(\rR\x06offset\x12D\n\x08datatype\x18\
    \x03\x20\x01(\x0e2(.gz.msgs.PointCloudPacked.Field.DataTypeR\x08datatype\
    \x12\x14\n\x05count\x18\x04\x20\x01(\rR\x05count\"g\n\x08DataType\x12\
    \x08\n\x04INT8\x10\0\x12\t\n\x05UINT8\x10\x01\x12\t\n\x05INT16\x10\x02\
    \x12\n\n\x06UINT16\x10\x03\x12\t\n\x05INT32\x10\x04\x12\n\n\x06UINT32\
    \x10\x05\x12\x0b\n\x07FLOAT32\x10\x06\x12\x0b\n\x07FLOAT64\x10\x07B%\n\
    \x0bcom.gz.msgsB\x16PointCloudPackedProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::header::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(PointCloudPacked::generated_message_descriptor_data());
            messages.push(point_cloud_packed::Field::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(point_cloud_packed::field::DataType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

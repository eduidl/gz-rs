// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gz/msgs/world_stats.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_common::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.WorldStatistics)
pub struct WorldStatistics {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.WorldStatistics.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:gz.msgs.WorldStatistics.sim_time)
    pub sim_time: ::protobuf::MessageField<super::time::Time>,
    // @@protoc_insertion_point(field:gz.msgs.WorldStatistics.pause_time)
    pub pause_time: ::protobuf::MessageField<super::time::Time>,
    // @@protoc_insertion_point(field:gz.msgs.WorldStatistics.real_time)
    pub real_time: ::protobuf::MessageField<super::time::Time>,
    // @@protoc_insertion_point(field:gz.msgs.WorldStatistics.paused)
    pub paused: bool,
    // @@protoc_insertion_point(field:gz.msgs.WorldStatistics.iterations)
    pub iterations: u64,
    // @@protoc_insertion_point(field:gz.msgs.WorldStatistics.model_count)
    pub model_count: i32,
    // @@protoc_insertion_point(field:gz.msgs.WorldStatistics.log_playback_stats)
    pub log_playback_stats: ::protobuf::MessageField<super::log_playback_stats::LogPlaybackStatistics>,
    // @@protoc_insertion_point(field:gz.msgs.WorldStatistics.real_time_factor)
    pub real_time_factor: f64,
    // @@protoc_insertion_point(field:gz.msgs.WorldStatistics.step_size)
    pub step_size: ::protobuf::MessageField<super::time::Time>,
    // @@protoc_insertion_point(field:gz.msgs.WorldStatistics.stepping)
    pub stepping: bool,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.WorldStatistics.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WorldStatistics {
    fn default() -> &'a WorldStatistics {
        <WorldStatistics as ::protobuf::Message>::default_instance()
    }
}

impl WorldStatistics {
    pub fn new() -> WorldStatistics {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &WorldStatistics| { &m.header },
            |m: &mut WorldStatistics| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::time::Time>(
            "sim_time",
            |m: &WorldStatistics| { &m.sim_time },
            |m: &mut WorldStatistics| { &mut m.sim_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::time::Time>(
            "pause_time",
            |m: &WorldStatistics| { &m.pause_time },
            |m: &mut WorldStatistics| { &mut m.pause_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::time::Time>(
            "real_time",
            |m: &WorldStatistics| { &m.real_time },
            |m: &mut WorldStatistics| { &mut m.real_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "paused",
            |m: &WorldStatistics| { &m.paused },
            |m: &mut WorldStatistics| { &mut m.paused },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "iterations",
            |m: &WorldStatistics| { &m.iterations },
            |m: &mut WorldStatistics| { &mut m.iterations },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "model_count",
            |m: &WorldStatistics| { &m.model_count },
            |m: &mut WorldStatistics| { &mut m.model_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::log_playback_stats::LogPlaybackStatistics>(
            "log_playback_stats",
            |m: &WorldStatistics| { &m.log_playback_stats },
            |m: &mut WorldStatistics| { &mut m.log_playback_stats },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "real_time_factor",
            |m: &WorldStatistics| { &m.real_time_factor },
            |m: &mut WorldStatistics| { &mut m.real_time_factor },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::time::Time>(
            "step_size",
            |m: &WorldStatistics| { &m.step_size },
            |m: &mut WorldStatistics| { &mut m.step_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stepping",
            |m: &WorldStatistics| { &m.stepping },
            |m: &mut WorldStatistics| { &mut m.stepping },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WorldStatistics>(
            "WorldStatistics",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WorldStatistics {
    const NAME: &'static str = "WorldStatistics";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sim_time)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pause_time)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.real_time)?;
                },
                40 => {
                    self.paused = is.read_bool()?;
                },
                48 => {
                    self.iterations = is.read_uint64()?;
                },
                56 => {
                    self.model_count = is.read_int32()?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.log_playback_stats)?;
                },
                73 => {
                    self.real_time_factor = is.read_double()?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.step_size)?;
                },
                88 => {
                    self.stepping = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sim_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.pause_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.real_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.paused != false {
            my_size += 1 + 1;
        }
        if self.iterations != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.iterations);
        }
        if self.model_count != 0 {
            my_size += ::protobuf::rt::int32_size(7, self.model_count);
        }
        if let Some(v) = self.log_playback_stats.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.real_time_factor != 0. {
            my_size += 1 + 8;
        }
        if let Some(v) = self.step_size.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.stepping != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.sim_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.pause_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.real_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.paused != false {
            os.write_bool(5, self.paused)?;
        }
        if self.iterations != 0 {
            os.write_uint64(6, self.iterations)?;
        }
        if self.model_count != 0 {
            os.write_int32(7, self.model_count)?;
        }
        if let Some(v) = self.log_playback_stats.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if self.real_time_factor != 0. {
            os.write_double(9, self.real_time_factor)?;
        }
        if let Some(v) = self.step_size.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if self.stepping != false {
            os.write_bool(11, self.stepping)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WorldStatistics {
        WorldStatistics::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.sim_time.clear();
        self.pause_time.clear();
        self.real_time.clear();
        self.paused = false;
        self.iterations = 0;
        self.model_count = 0;
        self.log_playback_stats.clear();
        self.real_time_factor = 0.;
        self.step_size.clear();
        self.stepping = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WorldStatistics {
        static instance: WorldStatistics = WorldStatistics {
            header: ::protobuf::MessageField::none(),
            sim_time: ::protobuf::MessageField::none(),
            pause_time: ::protobuf::MessageField::none(),
            real_time: ::protobuf::MessageField::none(),
            paused: false,
            iterations: 0,
            model_count: 0,
            log_playback_stats: ::protobuf::MessageField::none(),
            real_time_factor: 0.,
            step_size: ::protobuf::MessageField::none(),
            stepping: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WorldStatistics {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WorldStatistics").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WorldStatistics {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WorldStatistics {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19gz/msgs/world_stats.proto\x12\x07gz.msgs\x1a\x20gz/msgs/log_playba\
    ck_stats.proto\x1a\x12gz/msgs/time.proto\x1a\x14gz/msgs/header.proto\"\
    \xd7\x03\n\x0fWorldStatistics\x12'\n\x06header\x18\x01\x20\x01(\x0b2\x0f\
    .gz.msgs.HeaderR\x06header\x12(\n\x08sim_time\x18\x02\x20\x01(\x0b2\r.gz\
    .msgs.TimeR\x07simTime\x12,\n\npause_time\x18\x03\x20\x01(\x0b2\r.gz.msg\
    s.TimeR\tpauseTime\x12*\n\treal_time\x18\x04\x20\x01(\x0b2\r.gz.msgs.Tim\
    eR\x08realTime\x12\x16\n\x06paused\x18\x05\x20\x01(\x08R\x06paused\x12\
    \x1e\n\niterations\x18\x06\x20\x01(\x04R\niterations\x12\x1f\n\x0bmodel_\
    count\x18\x07\x20\x01(\x05R\nmodelCount\x12L\n\x12log_playback_stats\x18\
    \x08\x20\x01(\x0b2\x1e.gz.msgs.LogPlaybackStatisticsR\x10logPlaybackStat\
    s\x12(\n\x10real_time_factor\x18\t\x20\x01(\x01R\x0erealTimeFactor\x12*\
    \n\tstep_size\x18\n\x20\x01(\x0b2\r.gz.msgs.TimeR\x08stepSize\x12\x1a\n\
    \x08stepping\x18\x0b\x20\x01(\x08R\x08steppingB\x1f\n\x0bcom.gz.msgsB\
    \x10WorldStatsProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::log_playback_stats::file_descriptor().clone());
            deps.push(super::time::file_descriptor().clone());
            deps.push(super::header::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(WorldStatistics::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

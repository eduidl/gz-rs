// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gz/msgs/entity_factory.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_common::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.EntityFactory)
pub struct EntityFactory {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.EntityFactory.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:gz.msgs.EntityFactory.pose)
    pub pose: ::protobuf::MessageField<super::pose::Pose>,
    // @@protoc_insertion_point(field:gz.msgs.EntityFactory.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:gz.msgs.EntityFactory.allow_renaming)
    pub allow_renaming: bool,
    // @@protoc_insertion_point(field:gz.msgs.EntityFactory.relative_to)
    pub relative_to: ::std::string::String,
    // @@protoc_insertion_point(field:gz.msgs.EntityFactory.spherical_coordinates)
    pub spherical_coordinates: ::protobuf::MessageField<super::spherical_coordinates::SphericalCoordinates>,
    // message oneof groups
    pub from: ::std::option::Option<entity_factory::From>,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.EntityFactory.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EntityFactory {
    fn default() -> &'a EntityFactory {
        <EntityFactory as ::protobuf::Message>::default_instance()
    }
}

impl EntityFactory {
    pub fn new() -> EntityFactory {
        ::std::default::Default::default()
    }

    // string sdf = 2;

    pub fn sdf(&self) -> &str {
        match self.from {
            ::std::option::Option::Some(entity_factory::From::Sdf(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_sdf(&mut self) {
        self.from = ::std::option::Option::None;
    }

    pub fn has_sdf(&self) -> bool {
        match self.from {
            ::std::option::Option::Some(entity_factory::From::Sdf(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sdf(&mut self, v: ::std::string::String) {
        self.from = ::std::option::Option::Some(entity_factory::From::Sdf(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sdf(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(entity_factory::From::Sdf(_)) = self.from {
        } else {
            self.from = ::std::option::Option::Some(entity_factory::From::Sdf(::std::string::String::new()));
        }
        match self.from {
            ::std::option::Option::Some(entity_factory::From::Sdf(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sdf(&mut self) -> ::std::string::String {
        if self.has_sdf() {
            match self.from.take() {
                ::std::option::Option::Some(entity_factory::From::Sdf(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string sdf_filename = 3;

    pub fn sdf_filename(&self) -> &str {
        match self.from {
            ::std::option::Option::Some(entity_factory::From::SdfFilename(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_sdf_filename(&mut self) {
        self.from = ::std::option::Option::None;
    }

    pub fn has_sdf_filename(&self) -> bool {
        match self.from {
            ::std::option::Option::Some(entity_factory::From::SdfFilename(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sdf_filename(&mut self, v: ::std::string::String) {
        self.from = ::std::option::Option::Some(entity_factory::From::SdfFilename(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sdf_filename(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(entity_factory::From::SdfFilename(_)) = self.from {
        } else {
            self.from = ::std::option::Option::Some(entity_factory::From::SdfFilename(::std::string::String::new()));
        }
        match self.from {
            ::std::option::Option::Some(entity_factory::From::SdfFilename(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sdf_filename(&mut self) -> ::std::string::String {
        if self.has_sdf_filename() {
            match self.from.take() {
                ::std::option::Option::Some(entity_factory::From::SdfFilename(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .gz.msgs.Model model = 4;

    pub fn model(&self) -> &super::model::Model {
        match self.from {
            ::std::option::Option::Some(entity_factory::From::Model(ref v)) => v,
            _ => <super::model::Model as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_model(&mut self) {
        self.from = ::std::option::Option::None;
    }

    pub fn has_model(&self) -> bool {
        match self.from {
            ::std::option::Option::Some(entity_factory::From::Model(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_model(&mut self, v: super::model::Model) {
        self.from = ::std::option::Option::Some(entity_factory::From::Model(v))
    }

    // Mutable pointer to the field.
    pub fn mut_model(&mut self) -> &mut super::model::Model {
        if let ::std::option::Option::Some(entity_factory::From::Model(_)) = self.from {
        } else {
            self.from = ::std::option::Option::Some(entity_factory::From::Model(super::model::Model::new()));
        }
        match self.from {
            ::std::option::Option::Some(entity_factory::From::Model(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_model(&mut self) -> super::model::Model {
        if self.has_model() {
            match self.from.take() {
                ::std::option::Option::Some(entity_factory::From::Model(v)) => v,
                _ => panic!(),
            }
        } else {
            super::model::Model::new()
        }
    }

    // .gz.msgs.Light light = 5;

    pub fn light(&self) -> &super::light::Light {
        match self.from {
            ::std::option::Option::Some(entity_factory::From::Light(ref v)) => v,
            _ => <super::light::Light as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_light(&mut self) {
        self.from = ::std::option::Option::None;
    }

    pub fn has_light(&self) -> bool {
        match self.from {
            ::std::option::Option::Some(entity_factory::From::Light(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_light(&mut self, v: super::light::Light) {
        self.from = ::std::option::Option::Some(entity_factory::From::Light(v))
    }

    // Mutable pointer to the field.
    pub fn mut_light(&mut self) -> &mut super::light::Light {
        if let ::std::option::Option::Some(entity_factory::From::Light(_)) = self.from {
        } else {
            self.from = ::std::option::Option::Some(entity_factory::From::Light(super::light::Light::new()));
        }
        match self.from {
            ::std::option::Option::Some(entity_factory::From::Light(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_light(&mut self) -> super::light::Light {
        if self.has_light() {
            match self.from.take() {
                ::std::option::Option::Some(entity_factory::From::Light(v)) => v,
                _ => panic!(),
            }
        } else {
            super::light::Light::new()
        }
    }

    // string clone_name = 6;

    pub fn clone_name(&self) -> &str {
        match self.from {
            ::std::option::Option::Some(entity_factory::From::CloneName(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_clone_name(&mut self) {
        self.from = ::std::option::Option::None;
    }

    pub fn has_clone_name(&self) -> bool {
        match self.from {
            ::std::option::Option::Some(entity_factory::From::CloneName(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_clone_name(&mut self, v: ::std::string::String) {
        self.from = ::std::option::Option::Some(entity_factory::From::CloneName(v))
    }

    // Mutable pointer to the field.
    pub fn mut_clone_name(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(entity_factory::From::CloneName(_)) = self.from {
        } else {
            self.from = ::std::option::Option::Some(entity_factory::From::CloneName(::std::string::String::new()));
        }
        match self.from {
            ::std::option::Option::Some(entity_factory::From::CloneName(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_clone_name(&mut self) -> ::std::string::String {
        if self.has_clone_name() {
            match self.from.take() {
                ::std::option::Option::Some(entity_factory::From::CloneName(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &EntityFactory| { &m.header },
            |m: &mut EntityFactory| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "sdf",
            EntityFactory::has_sdf,
            EntityFactory::sdf,
            EntityFactory::set_sdf,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "sdf_filename",
            EntityFactory::has_sdf_filename,
            EntityFactory::sdf_filename,
            EntityFactory::set_sdf_filename,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::model::Model>(
            "model",
            EntityFactory::has_model,
            EntityFactory::model,
            EntityFactory::mut_model,
            EntityFactory::set_model,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::light::Light>(
            "light",
            EntityFactory::has_light,
            EntityFactory::light,
            EntityFactory::mut_light,
            EntityFactory::set_light,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "clone_name",
            EntityFactory::has_clone_name,
            EntityFactory::clone_name,
            EntityFactory::set_clone_name,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pose::Pose>(
            "pose",
            |m: &EntityFactory| { &m.pose },
            |m: &mut EntityFactory| { &mut m.pose },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &EntityFactory| { &m.name },
            |m: &mut EntityFactory| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "allow_renaming",
            |m: &EntityFactory| { &m.allow_renaming },
            |m: &mut EntityFactory| { &mut m.allow_renaming },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "relative_to",
            |m: &EntityFactory| { &m.relative_to },
            |m: &mut EntityFactory| { &mut m.relative_to },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::spherical_coordinates::SphericalCoordinates>(
            "spherical_coordinates",
            |m: &EntityFactory| { &m.spherical_coordinates },
            |m: &mut EntityFactory| { &mut m.spherical_coordinates },
        ));
        oneofs.push(entity_factory::From::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EntityFactory>(
            "EntityFactory",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EntityFactory {
    const NAME: &'static str = "EntityFactory";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.from = ::std::option::Option::Some(entity_factory::From::Sdf(is.read_string()?));
                },
                26 => {
                    self.from = ::std::option::Option::Some(entity_factory::From::SdfFilename(is.read_string()?));
                },
                34 => {
                    self.from = ::std::option::Option::Some(entity_factory::From::Model(is.read_message()?));
                },
                42 => {
                    self.from = ::std::option::Option::Some(entity_factory::From::Light(is.read_message()?));
                },
                50 => {
                    self.from = ::std::option::Option::Some(entity_factory::From::CloneName(is.read_string()?));
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pose)?;
                },
                66 => {
                    self.name = is.read_string()?;
                },
                72 => {
                    self.allow_renaming = is.read_bool()?;
                },
                82 => {
                    self.relative_to = is.read_string()?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spherical_coordinates)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.pose.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.name);
        }
        if self.allow_renaming != false {
            my_size += 1 + 1;
        }
        if !self.relative_to.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.relative_to);
        }
        if let Some(v) = self.spherical_coordinates.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.from {
            match v {
                &entity_factory::From::Sdf(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &entity_factory::From::SdfFilename(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
                &entity_factory::From::Model(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &entity_factory::From::Light(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &entity_factory::From::CloneName(ref v) => {
                    my_size += ::protobuf::rt::string_size(6, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.pose.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if !self.name.is_empty() {
            os.write_string(8, &self.name)?;
        }
        if self.allow_renaming != false {
            os.write_bool(9, self.allow_renaming)?;
        }
        if !self.relative_to.is_empty() {
            os.write_string(10, &self.relative_to)?;
        }
        if let Some(v) = self.spherical_coordinates.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.from {
            match v {
                &entity_factory::From::Sdf(ref v) => {
                    os.write_string(2, v)?;
                },
                &entity_factory::From::SdfFilename(ref v) => {
                    os.write_string(3, v)?;
                },
                &entity_factory::From::Model(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &entity_factory::From::Light(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &entity_factory::From::CloneName(ref v) => {
                    os.write_string(6, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EntityFactory {
        EntityFactory::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.from = ::std::option::Option::None;
        self.from = ::std::option::Option::None;
        self.from = ::std::option::Option::None;
        self.from = ::std::option::Option::None;
        self.from = ::std::option::Option::None;
        self.pose.clear();
        self.name.clear();
        self.allow_renaming = false;
        self.relative_to.clear();
        self.spherical_coordinates.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EntityFactory {
        static instance: EntityFactory = EntityFactory {
            header: ::protobuf::MessageField::none(),
            pose: ::protobuf::MessageField::none(),
            name: ::std::string::String::new(),
            allow_renaming: false,
            relative_to: ::std::string::String::new(),
            spherical_coordinates: ::protobuf::MessageField::none(),
            from: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EntityFactory {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EntityFactory").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EntityFactory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityFactory {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EntityFactory`
pub mod entity_factory {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:gz.msgs.EntityFactory.from)
    pub enum From {
        // @@protoc_insertion_point(oneof_field:gz.msgs.EntityFactory.sdf)
        Sdf(::std::string::String),
        // @@protoc_insertion_point(oneof_field:gz.msgs.EntityFactory.sdf_filename)
        SdfFilename(::std::string::String),
        // @@protoc_insertion_point(oneof_field:gz.msgs.EntityFactory.model)
        Model(super::super::model::Model),
        // @@protoc_insertion_point(oneof_field:gz.msgs.EntityFactory.light)
        Light(super::super::light::Light),
        // @@protoc_insertion_point(oneof_field:gz.msgs.EntityFactory.clone_name)
        CloneName(::std::string::String),
    }

    impl ::protobuf::Oneof for From {
    }

    impl ::protobuf::OneofFull for From {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::EntityFactory as ::protobuf::MessageFull>::descriptor().oneof_by_name("from").unwrap()).clone()
        }
    }

    impl From {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<From>("from")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cgz/msgs/entity_factory.proto\x12\x07gz.msgs\x1a\x14gz/msgs/header.\
    proto\x1a\x13gz/msgs/light.proto\x1a\x13gz/msgs/model.proto\x1a\x12gz/ms\
    gs/pose.proto\x1a#gz/msgs/spherical_coordinates.proto\"\xbd\x03\n\rEntit\
    yFactory\x12'\n\x06header\x18\x01\x20\x01(\x0b2\x0f.gz.msgs.HeaderR\x06h\
    eader\x12\x12\n\x03sdf\x18\x02\x20\x01(\tH\0R\x03sdf\x12#\n\x0csdf_filen\
    ame\x18\x03\x20\x01(\tH\0R\x0bsdfFilename\x12&\n\x05model\x18\x04\x20\
    \x01(\x0b2\x0e.gz.msgs.ModelH\0R\x05model\x12&\n\x05light\x18\x05\x20\
    \x01(\x0b2\x0e.gz.msgs.LightH\0R\x05light\x12\x1f\n\nclone_name\x18\x06\
    \x20\x01(\tH\0R\tcloneName\x12!\n\x04pose\x18\x07\x20\x01(\x0b2\r.gz.msg\
    s.PoseR\x04pose\x12\x12\n\x04name\x18\x08\x20\x01(\tR\x04name\x12%\n\x0e\
    allow_renaming\x18\t\x20\x01(\x08R\rallowRenaming\x12\x1f\n\x0brelative_\
    to\x18\n\x20\x01(\tR\nrelativeTo\x12R\n\x15spherical_coordinates\x18\x0b\
    \x20\x01(\x0b2\x1d.gz.msgs.SphericalCoordinatesR\x14sphericalCoordinates\
    B\x06\n\x04fromB\"\n\x0bcom.gz.msgsB\x13EntityFactoryProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::header::file_descriptor().clone());
            deps.push(super::light::file_descriptor().clone());
            deps.push(super::model::file_descriptor().clone());
            deps.push(super::pose::file_descriptor().clone());
            deps.push(super::spherical_coordinates::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(EntityFactory::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

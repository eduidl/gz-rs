// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gz/msgs/user_cmd.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_common::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.UserCmd)
pub struct UserCmd {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.UserCmd.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:gz.msgs.UserCmd.id)
    pub id: u32,
    // @@protoc_insertion_point(field:gz.msgs.UserCmd.description)
    pub description: ::std::string::String,
    // @@protoc_insertion_point(field:gz.msgs.UserCmd.type)
    pub type_: ::protobuf::EnumOrUnknown<user_cmd::Type>,
    // @@protoc_insertion_point(field:gz.msgs.UserCmd.model)
    pub model: ::std::vec::Vec<super::model::Model>,
    // @@protoc_insertion_point(field:gz.msgs.UserCmd.light)
    pub light: ::std::vec::Vec<super::light::Light>,
    // @@protoc_insertion_point(field:gz.msgs.UserCmd.entity_name)
    pub entity_name: ::std::string::String,
    // @@protoc_insertion_point(field:gz.msgs.UserCmd.world_control)
    pub world_control: ::protobuf::MessageField<super::world_control::WorldControl>,
    // @@protoc_insertion_point(field:gz.msgs.UserCmd.wrench)
    pub wrench: ::protobuf::MessageField<super::wrench::Wrench>,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.UserCmd.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UserCmd {
    fn default() -> &'a UserCmd {
        <UserCmd as ::protobuf::Message>::default_instance()
    }
}

impl UserCmd {
    pub fn new() -> UserCmd {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &UserCmd| { &m.header },
            |m: &mut UserCmd| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &UserCmd| { &m.id },
            |m: &mut UserCmd| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &UserCmd| { &m.description },
            |m: &mut UserCmd| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &UserCmd| { &m.type_ },
            |m: &mut UserCmd| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "model",
            |m: &UserCmd| { &m.model },
            |m: &mut UserCmd| { &mut m.model },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "light",
            |m: &UserCmd| { &m.light },
            |m: &mut UserCmd| { &mut m.light },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "entity_name",
            |m: &UserCmd| { &m.entity_name },
            |m: &mut UserCmd| { &mut m.entity_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::world_control::WorldControl>(
            "world_control",
            |m: &UserCmd| { &m.world_control },
            |m: &mut UserCmd| { &mut m.world_control },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::wrench::Wrench>(
            "wrench",
            |m: &UserCmd| { &m.wrench },
            |m: &mut UserCmd| { &mut m.wrench },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UserCmd>(
            "UserCmd",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UserCmd {
    const NAME: &'static str = "UserCmd";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                16 => {
                    self.id = is.read_uint32()?;
                },
                26 => {
                    self.description = is.read_string()?;
                },
                32 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                42 => {
                    self.model.push(is.read_message()?);
                },
                50 => {
                    self.light.push(is.read_message()?);
                },
                58 => {
                    self.entity_name = is.read_string()?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.world_control)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.wrench)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.id);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(user_cmd::Type::MOVING) {
            my_size += ::protobuf::rt::int32_size(4, self.type_.value());
        }
        for value in &self.model {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.light {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.entity_name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.entity_name);
        }
        if let Some(v) = self.world_control.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.wrench.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.id != 0 {
            os.write_uint32(2, self.id)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(user_cmd::Type::MOVING) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        for v in &self.model {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.light {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if !self.entity_name.is_empty() {
            os.write_string(7, &self.entity_name)?;
        }
        if let Some(v) = self.world_control.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.wrench.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UserCmd {
        UserCmd::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.id = 0;
        self.description.clear();
        self.type_ = ::protobuf::EnumOrUnknown::new(user_cmd::Type::MOVING);
        self.model.clear();
        self.light.clear();
        self.entity_name.clear();
        self.world_control.clear();
        self.wrench.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UserCmd {
        static instance: UserCmd = UserCmd {
            header: ::protobuf::MessageField::none(),
            id: 0,
            description: ::std::string::String::new(),
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            model: ::std::vec::Vec::new(),
            light: ::std::vec::Vec::new(),
            entity_name: ::std::string::String::new(),
            world_control: ::protobuf::MessageField::none(),
            wrench: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UserCmd {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UserCmd").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UserCmd {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserCmd {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `UserCmd`
pub mod user_cmd {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:gz.msgs.UserCmd.Type)
    pub enum Type {
        // @@protoc_insertion_point(enum_value:gz.msgs.UserCmd.Type.MOVING)
        MOVING = 0,
        // @@protoc_insertion_point(enum_value:gz.msgs.UserCmd.Type.WORLD_CONTROL)
        WORLD_CONTROL = 1,
        // @@protoc_insertion_point(enum_value:gz.msgs.UserCmd.Type.WRENCH)
        WRENCH = 2,
        // @@protoc_insertion_point(enum_value:gz.msgs.UserCmd.Type.SCALING)
        SCALING = 3,
    }

    impl ::protobuf::Enum for Type {
        const NAME: &'static str = "Type";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Type> {
            match value {
                0 => ::std::option::Option::Some(Type::MOVING),
                1 => ::std::option::Option::Some(Type::WORLD_CONTROL),
                2 => ::std::option::Option::Some(Type::WRENCH),
                3 => ::std::option::Option::Some(Type::SCALING),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Type] = &[
            Type::MOVING,
            Type::WORLD_CONTROL,
            Type::WRENCH,
            Type::SCALING,
        ];
    }

    impl ::protobuf::EnumFull for Type {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("UserCmd.Type").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Type {
        fn default() -> Self {
            Type::MOVING
        }
    }

    impl Type {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("UserCmd.Type")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16gz/msgs/user_cmd.proto\x12\x07gz.msgs\x1a\x13gz/msgs/light.proto\
    \x1a\x13gz/msgs/model.proto\x1a\x1bgz/msgs/world_control.proto\x1a\x14gz\
    /msgs/wrench.proto\x1a\x14gz/msgs/header.proto\"\xa1\x03\n\x07UserCmd\
    \x12'\n\x06header\x18\x01\x20\x01(\x0b2\x0f.gz.msgs.HeaderR\x06header\
    \x12\x0e\n\x02id\x18\x02\x20\x01(\rR\x02id\x12\x20\n\x0bdescription\x18\
    \x03\x20\x01(\tR\x0bdescription\x12)\n\x04type\x18\x04\x20\x01(\x0e2\x15\
    .gz.msgs.UserCmd.TypeR\x04type\x12$\n\x05model\x18\x05\x20\x03(\x0b2\x0e\
    .gz.msgs.ModelR\x05model\x12$\n\x05light\x18\x06\x20\x03(\x0b2\x0e.gz.ms\
    gs.LightR\x05light\x12\x1f\n\x0bentity_name\x18\x07\x20\x01(\tR\nentityN\
    ame\x12:\n\rworld_control\x18\x08\x20\x01(\x0b2\x15.gz.msgs.WorldControl\
    R\x0cworldControl\x12'\n\x06wrench\x18\t\x20\x01(\x0b2\x0f.gz.msgs.Wrenc\
    hR\x06wrench\">\n\x04Type\x12\n\n\x06MOVING\x10\0\x12\x11\n\rWORLD_CONTR\
    OL\x10\x01\x12\n\n\x06WRENCH\x10\x02\x12\x0b\n\x07SCALING\x10\x03B\x1c\n\
    \x0bcom.gz.msgsB\rUserCmdProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::light::file_descriptor().clone());
            deps.push(super::model::file_descriptor().clone());
            deps.push(super::world_control::file_descriptor().clone());
            deps.push(super::wrench::file_descriptor().clone());
            deps.push(super::header::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(UserCmd::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(user_cmd::Type::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

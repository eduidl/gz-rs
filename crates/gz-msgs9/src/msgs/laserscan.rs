// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gz/msgs/laserscan.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_derive::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.LaserScan)
pub struct LaserScan {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.LaserScan.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:gz.msgs.LaserScan.frame)
    pub frame: ::std::string::String,
    // @@protoc_insertion_point(field:gz.msgs.LaserScan.world_pose)
    pub world_pose: ::protobuf::MessageField<super::pose::Pose>,
    // @@protoc_insertion_point(field:gz.msgs.LaserScan.angle_min)
    pub angle_min: f64,
    // @@protoc_insertion_point(field:gz.msgs.LaserScan.angle_max)
    pub angle_max: f64,
    // @@protoc_insertion_point(field:gz.msgs.LaserScan.angle_step)
    pub angle_step: f64,
    // @@protoc_insertion_point(field:gz.msgs.LaserScan.range_min)
    pub range_min: f64,
    // @@protoc_insertion_point(field:gz.msgs.LaserScan.range_max)
    pub range_max: f64,
    // @@protoc_insertion_point(field:gz.msgs.LaserScan.count)
    pub count: u32,
    // @@protoc_insertion_point(field:gz.msgs.LaserScan.vertical_angle_min)
    pub vertical_angle_min: f64,
    // @@protoc_insertion_point(field:gz.msgs.LaserScan.vertical_angle_max)
    pub vertical_angle_max: f64,
    // @@protoc_insertion_point(field:gz.msgs.LaserScan.vertical_angle_step)
    pub vertical_angle_step: f64,
    // @@protoc_insertion_point(field:gz.msgs.LaserScan.vertical_count)
    pub vertical_count: u32,
    // @@protoc_insertion_point(field:gz.msgs.LaserScan.ranges)
    pub ranges: ::std::vec::Vec<f64>,
    // @@protoc_insertion_point(field:gz.msgs.LaserScan.intensities)
    pub intensities: ::std::vec::Vec<f64>,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.LaserScan.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LaserScan {
    fn default() -> &'a LaserScan {
        <LaserScan as ::protobuf::Message>::default_instance()
    }
}

impl LaserScan {
    pub fn new() -> LaserScan {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &LaserScan| { &m.header },
            |m: &mut LaserScan| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "frame",
            |m: &LaserScan| { &m.frame },
            |m: &mut LaserScan| { &mut m.frame },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pose::Pose>(
            "world_pose",
            |m: &LaserScan| { &m.world_pose },
            |m: &mut LaserScan| { &mut m.world_pose },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "angle_min",
            |m: &LaserScan| { &m.angle_min },
            |m: &mut LaserScan| { &mut m.angle_min },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "angle_max",
            |m: &LaserScan| { &m.angle_max },
            |m: &mut LaserScan| { &mut m.angle_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "angle_step",
            |m: &LaserScan| { &m.angle_step },
            |m: &mut LaserScan| { &mut m.angle_step },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "range_min",
            |m: &LaserScan| { &m.range_min },
            |m: &mut LaserScan| { &mut m.range_min },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "range_max",
            |m: &LaserScan| { &m.range_max },
            |m: &mut LaserScan| { &mut m.range_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "count",
            |m: &LaserScan| { &m.count },
            |m: &mut LaserScan| { &mut m.count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "vertical_angle_min",
            |m: &LaserScan| { &m.vertical_angle_min },
            |m: &mut LaserScan| { &mut m.vertical_angle_min },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "vertical_angle_max",
            |m: &LaserScan| { &m.vertical_angle_max },
            |m: &mut LaserScan| { &mut m.vertical_angle_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "vertical_angle_step",
            |m: &LaserScan| { &m.vertical_angle_step },
            |m: &mut LaserScan| { &mut m.vertical_angle_step },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "vertical_count",
            |m: &LaserScan| { &m.vertical_count },
            |m: &mut LaserScan| { &mut m.vertical_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ranges",
            |m: &LaserScan| { &m.ranges },
            |m: &mut LaserScan| { &mut m.ranges },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "intensities",
            |m: &LaserScan| { &m.intensities },
            |m: &mut LaserScan| { &mut m.intensities },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LaserScan>(
            "LaserScan",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LaserScan {
    const NAME: &'static str = "LaserScan";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.frame = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.world_pose)?;
                },
                33 => {
                    self.angle_min = is.read_double()?;
                },
                41 => {
                    self.angle_max = is.read_double()?;
                },
                49 => {
                    self.angle_step = is.read_double()?;
                },
                57 => {
                    self.range_min = is.read_double()?;
                },
                65 => {
                    self.range_max = is.read_double()?;
                },
                72 => {
                    self.count = is.read_uint32()?;
                },
                81 => {
                    self.vertical_angle_min = is.read_double()?;
                },
                89 => {
                    self.vertical_angle_max = is.read_double()?;
                },
                97 => {
                    self.vertical_angle_step = is.read_double()?;
                },
                104 => {
                    self.vertical_count = is.read_uint32()?;
                },
                114 => {
                    is.read_repeated_packed_double_into(&mut self.ranges)?;
                },
                113 => {
                    self.ranges.push(is.read_double()?);
                },
                122 => {
                    is.read_repeated_packed_double_into(&mut self.intensities)?;
                },
                121 => {
                    self.intensities.push(is.read_double()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.frame.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.frame);
        }
        if let Some(v) = self.world_pose.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.angle_min != 0. {
            my_size += 1 + 8;
        }
        if self.angle_max != 0. {
            my_size += 1 + 8;
        }
        if self.angle_step != 0. {
            my_size += 1 + 8;
        }
        if self.range_min != 0. {
            my_size += 1 + 8;
        }
        if self.range_max != 0. {
            my_size += 1 + 8;
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.count);
        }
        if self.vertical_angle_min != 0. {
            my_size += 1 + 8;
        }
        if self.vertical_angle_max != 0. {
            my_size += 1 + 8;
        }
        if self.vertical_angle_step != 0. {
            my_size += 1 + 8;
        }
        if self.vertical_count != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.vertical_count);
        }
        my_size += 9 * self.ranges.len() as u64;
        my_size += 9 * self.intensities.len() as u64;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.frame.is_empty() {
            os.write_string(2, &self.frame)?;
        }
        if let Some(v) = self.world_pose.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.angle_min != 0. {
            os.write_double(4, self.angle_min)?;
        }
        if self.angle_max != 0. {
            os.write_double(5, self.angle_max)?;
        }
        if self.angle_step != 0. {
            os.write_double(6, self.angle_step)?;
        }
        if self.range_min != 0. {
            os.write_double(7, self.range_min)?;
        }
        if self.range_max != 0. {
            os.write_double(8, self.range_max)?;
        }
        if self.count != 0 {
            os.write_uint32(9, self.count)?;
        }
        if self.vertical_angle_min != 0. {
            os.write_double(10, self.vertical_angle_min)?;
        }
        if self.vertical_angle_max != 0. {
            os.write_double(11, self.vertical_angle_max)?;
        }
        if self.vertical_angle_step != 0. {
            os.write_double(12, self.vertical_angle_step)?;
        }
        if self.vertical_count != 0 {
            os.write_uint32(13, self.vertical_count)?;
        }
        for v in &self.ranges {
            os.write_double(14, *v)?;
        };
        for v in &self.intensities {
            os.write_double(15, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LaserScan {
        LaserScan::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.frame.clear();
        self.world_pose.clear();
        self.angle_min = 0.;
        self.angle_max = 0.;
        self.angle_step = 0.;
        self.range_min = 0.;
        self.range_max = 0.;
        self.count = 0;
        self.vertical_angle_min = 0.;
        self.vertical_angle_max = 0.;
        self.vertical_angle_step = 0.;
        self.vertical_count = 0;
        self.ranges.clear();
        self.intensities.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LaserScan {
        static instance: LaserScan = LaserScan {
            header: ::protobuf::MessageField::none(),
            frame: ::std::string::String::new(),
            world_pose: ::protobuf::MessageField::none(),
            angle_min: 0.,
            angle_max: 0.,
            angle_step: 0.,
            range_min: 0.,
            range_max: 0.,
            count: 0,
            vertical_angle_min: 0.,
            vertical_angle_max: 0.,
            vertical_angle_step: 0.,
            vertical_count: 0,
            ranges: ::std::vec::Vec::new(),
            intensities: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LaserScan {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LaserScan").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LaserScan {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LaserScan {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17gz/msgs/laserscan.proto\x12\x07gz.msgs\x1a\x12gz/msgs/pose.proto\
    \x1a\x14gz/msgs/header.proto\"\x8e\x04\n\tLaserScan\x12'\n\x06header\x18\
    \x01\x20\x01(\x0b2\x0f.gz.msgs.HeaderR\x06header\x12\x14\n\x05frame\x18\
    \x02\x20\x01(\tR\x05frame\x12,\n\nworld_pose\x18\x03\x20\x01(\x0b2\r.gz.\
    msgs.PoseR\tworldPose\x12\x1b\n\tangle_min\x18\x04\x20\x01(\x01R\x08angl\
    eMin\x12\x1b\n\tangle_max\x18\x05\x20\x01(\x01R\x08angleMax\x12\x1d\n\na\
    ngle_step\x18\x06\x20\x01(\x01R\tangleStep\x12\x1b\n\trange_min\x18\x07\
    \x20\x01(\x01R\x08rangeMin\x12\x1b\n\trange_max\x18\x08\x20\x01(\x01R\
    \x08rangeMax\x12\x14\n\x05count\x18\t\x20\x01(\rR\x05count\x12,\n\x12ver\
    tical_angle_min\x18\n\x20\x01(\x01R\x10verticalAngleMin\x12,\n\x12vertic\
    al_angle_max\x18\x0b\x20\x01(\x01R\x10verticalAngleMax\x12.\n\x13vertica\
    l_angle_step\x18\x0c\x20\x01(\x01R\x11verticalAngleStep\x12%\n\x0evertic\
    al_count\x18\r\x20\x01(\rR\rverticalCount\x12\x16\n\x06ranges\x18\x0e\
    \x20\x03(\x01R\x06ranges\x12\x20\n\x0bintensities\x18\x0f\x20\x03(\x01R\
    \x0bintensitiesB\x1e\n\x0bcom.gz.msgsB\x0fLaserScanProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::pose::file_descriptor().clone());
            deps.push(super::header::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(LaserScan::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gz/msgs/dvl_tracking_target.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_common::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.DVLTrackingTarget)
pub struct DVLTrackingTarget {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.DVLTrackingTarget.type)
    pub type_: ::protobuf::EnumOrUnknown<dvltracking_target::TargetType>,
    // @@protoc_insertion_point(field:gz.msgs.DVLTrackingTarget.range)
    pub range: ::protobuf::MessageField<super::dvl_range_estimate::DVLRangeEstimate>,
    // @@protoc_insertion_point(field:gz.msgs.DVLTrackingTarget.position)
    pub position: ::protobuf::MessageField<super::dvl_kinematic_estimate::DVLKinematicEstimate>,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.DVLTrackingTarget.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DVLTrackingTarget {
    fn default() -> &'a DVLTrackingTarget {
        <DVLTrackingTarget as ::protobuf::Message>::default_instance()
    }
}

impl DVLTrackingTarget {
    pub fn new() -> DVLTrackingTarget {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &DVLTrackingTarget| { &m.type_ },
            |m: &mut DVLTrackingTarget| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::dvl_range_estimate::DVLRangeEstimate>(
            "range",
            |m: &DVLTrackingTarget| { &m.range },
            |m: &mut DVLTrackingTarget| { &mut m.range },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::dvl_kinematic_estimate::DVLKinematicEstimate>(
            "position",
            |m: &DVLTrackingTarget| { &m.position },
            |m: &mut DVLTrackingTarget| { &mut m.position },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DVLTrackingTarget>(
            "DVLTrackingTarget",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DVLTrackingTarget {
    const NAME: &'static str = "DVLTrackingTarget";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.range)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.position)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(dvltracking_target::TargetType::DVL_TARGET_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if let Some(v) = self.range.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.position.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(dvltracking_target::TargetType::DVL_TARGET_UNSPECIFIED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if let Some(v) = self.range.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.position.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DVLTrackingTarget {
        DVLTrackingTarget::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(dvltracking_target::TargetType::DVL_TARGET_UNSPECIFIED);
        self.range.clear();
        self.position.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DVLTrackingTarget {
        static instance: DVLTrackingTarget = DVLTrackingTarget {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            range: ::protobuf::MessageField::none(),
            position: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DVLTrackingTarget {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DVLTrackingTarget").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DVLTrackingTarget {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DVLTrackingTarget {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DVLTrackingTarget`
pub mod dvltracking_target {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:gz.msgs.DVLTrackingTarget.TargetType)
    pub enum TargetType {
        // @@protoc_insertion_point(enum_value:gz.msgs.DVLTrackingTarget.TargetType.DVL_TARGET_UNSPECIFIED)
        DVL_TARGET_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:gz.msgs.DVLTrackingTarget.TargetType.DVL_TARGET_BOTTOM)
        DVL_TARGET_BOTTOM = 1,
        // @@protoc_insertion_point(enum_value:gz.msgs.DVLTrackingTarget.TargetType.DVL_TARGET_WATER_MASS)
        DVL_TARGET_WATER_MASS = 2,
    }

    impl ::protobuf::Enum for TargetType {
        const NAME: &'static str = "TargetType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<TargetType> {
            match value {
                0 => ::std::option::Option::Some(TargetType::DVL_TARGET_UNSPECIFIED),
                1 => ::std::option::Option::Some(TargetType::DVL_TARGET_BOTTOM),
                2 => ::std::option::Option::Some(TargetType::DVL_TARGET_WATER_MASS),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [TargetType] = &[
            TargetType::DVL_TARGET_UNSPECIFIED,
            TargetType::DVL_TARGET_BOTTOM,
            TargetType::DVL_TARGET_WATER_MASS,
        ];
    }

    impl ::protobuf::EnumFull for TargetType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("DVLTrackingTarget.TargetType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for TargetType {
        fn default() -> Self {
            TargetType::DVL_TARGET_UNSPECIFIED
        }
    }

    impl TargetType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<TargetType>("DVLTrackingTarget.TargetType")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!gz/msgs/dvl_tracking_target.proto\x12\x07gz.msgs\x1a$gz/msgs/dvl_kine\
    matic_estimate.proto\x1a\x20gz/msgs/dvl_range_estimate.proto\"\x96\x02\n\
    \x11DVLTrackingTarget\x129\n\x04type\x18\x01\x20\x01(\x0e2%.gz.msgs.DVLT\
    rackingTarget.TargetTypeR\x04type\x12/\n\x05range\x18\x02\x20\x01(\x0b2\
    \x19.gz.msgs.DVLRangeEstimateR\x05range\x129\n\x08position\x18\x03\x20\
    \x01(\x0b2\x1d.gz.msgs.DVLKinematicEstimateR\x08position\"Z\n\nTargetTyp\
    e\x12\x1a\n\x16DVL_TARGET_UNSPECIFIED\x10\0\x12\x15\n\x11DVL_TARGET_BOTT\
    OM\x10\x01\x12\x19\n\x15DVL_TARGET_WATER_MASS\x10\x02B&\n\x0bcom.gz.msgs\
    B\x17DVLTrackingTargetProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::dvl_kinematic_estimate::file_descriptor().clone());
            deps.push(super::dvl_range_estimate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(DVLTrackingTarget::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(dvltracking_target::TargetType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gz/msgs/particle_emitter.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_derive::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.ParticleEmitter)
pub struct ParticleEmitter {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.ParticleEmitter.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:gz.msgs.ParticleEmitter.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:gz.msgs.ParticleEmitter.id)
    pub id: u32,
    // @@protoc_insertion_point(field:gz.msgs.ParticleEmitter.type)
    pub type_: ::protobuf::EnumOrUnknown<particle_emitter::EmitterType>,
    // @@protoc_insertion_point(field:gz.msgs.ParticleEmitter.pose)
    pub pose: ::protobuf::MessageField<super::pose::Pose>,
    // @@protoc_insertion_point(field:gz.msgs.ParticleEmitter.size)
    pub size: ::protobuf::MessageField<super::vector3d::Vector3d>,
    // @@protoc_insertion_point(field:gz.msgs.ParticleEmitter.rate)
    pub rate: ::protobuf::MessageField<super::float::Float>,
    // @@protoc_insertion_point(field:gz.msgs.ParticleEmitter.duration)
    pub duration: ::protobuf::MessageField<super::float::Float>,
    // @@protoc_insertion_point(field:gz.msgs.ParticleEmitter.emitting)
    pub emitting: ::protobuf::MessageField<super::boolean::Boolean>,
    // @@protoc_insertion_point(field:gz.msgs.ParticleEmitter.particle_size)
    pub particle_size: ::protobuf::MessageField<super::vector3d::Vector3d>,
    // @@protoc_insertion_point(field:gz.msgs.ParticleEmitter.lifetime)
    pub lifetime: ::protobuf::MessageField<super::float::Float>,
    // @@protoc_insertion_point(field:gz.msgs.ParticleEmitter.material)
    pub material: ::protobuf::MessageField<super::material::Material>,
    // @@protoc_insertion_point(field:gz.msgs.ParticleEmitter.min_velocity)
    pub min_velocity: ::protobuf::MessageField<super::float::Float>,
    // @@protoc_insertion_point(field:gz.msgs.ParticleEmitter.max_velocity)
    pub max_velocity: ::protobuf::MessageField<super::float::Float>,
    // @@protoc_insertion_point(field:gz.msgs.ParticleEmitter.color_start)
    pub color_start: ::protobuf::MessageField<super::color::Color>,
    // @@protoc_insertion_point(field:gz.msgs.ParticleEmitter.color_end)
    pub color_end: ::protobuf::MessageField<super::color::Color>,
    // @@protoc_insertion_point(field:gz.msgs.ParticleEmitter.scale_rate)
    pub scale_rate: ::protobuf::MessageField<super::float::Float>,
    // @@protoc_insertion_point(field:gz.msgs.ParticleEmitter.color_range_image)
    pub color_range_image: ::protobuf::MessageField<super::stringmsg::StringMsg>,
    // @@protoc_insertion_point(field:gz.msgs.ParticleEmitter.topic)
    pub topic: ::protobuf::MessageField<super::stringmsg::StringMsg>,
    // @@protoc_insertion_point(field:gz.msgs.ParticleEmitter.particle_scatter_ratio)
    pub particle_scatter_ratio: ::protobuf::MessageField<super::float::Float>,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.ParticleEmitter.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ParticleEmitter {
    fn default() -> &'a ParticleEmitter {
        <ParticleEmitter as ::protobuf::Message>::default_instance()
    }
}

impl ParticleEmitter {
    pub fn new() -> ParticleEmitter {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(20);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &ParticleEmitter| { &m.header },
            |m: &mut ParticleEmitter| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &ParticleEmitter| { &m.name },
            |m: &mut ParticleEmitter| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &ParticleEmitter| { &m.id },
            |m: &mut ParticleEmitter| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &ParticleEmitter| { &m.type_ },
            |m: &mut ParticleEmitter| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pose::Pose>(
            "pose",
            |m: &ParticleEmitter| { &m.pose },
            |m: &mut ParticleEmitter| { &mut m.pose },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::vector3d::Vector3d>(
            "size",
            |m: &ParticleEmitter| { &m.size },
            |m: &mut ParticleEmitter| { &mut m.size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::float::Float>(
            "rate",
            |m: &ParticleEmitter| { &m.rate },
            |m: &mut ParticleEmitter| { &mut m.rate },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::float::Float>(
            "duration",
            |m: &ParticleEmitter| { &m.duration },
            |m: &mut ParticleEmitter| { &mut m.duration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::boolean::Boolean>(
            "emitting",
            |m: &ParticleEmitter| { &m.emitting },
            |m: &mut ParticleEmitter| { &mut m.emitting },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::vector3d::Vector3d>(
            "particle_size",
            |m: &ParticleEmitter| { &m.particle_size },
            |m: &mut ParticleEmitter| { &mut m.particle_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::float::Float>(
            "lifetime",
            |m: &ParticleEmitter| { &m.lifetime },
            |m: &mut ParticleEmitter| { &mut m.lifetime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::material::Material>(
            "material",
            |m: &ParticleEmitter| { &m.material },
            |m: &mut ParticleEmitter| { &mut m.material },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::float::Float>(
            "min_velocity",
            |m: &ParticleEmitter| { &m.min_velocity },
            |m: &mut ParticleEmitter| { &mut m.min_velocity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::float::Float>(
            "max_velocity",
            |m: &ParticleEmitter| { &m.max_velocity },
            |m: &mut ParticleEmitter| { &mut m.max_velocity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::color::Color>(
            "color_start",
            |m: &ParticleEmitter| { &m.color_start },
            |m: &mut ParticleEmitter| { &mut m.color_start },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::color::Color>(
            "color_end",
            |m: &ParticleEmitter| { &m.color_end },
            |m: &mut ParticleEmitter| { &mut m.color_end },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::float::Float>(
            "scale_rate",
            |m: &ParticleEmitter| { &m.scale_rate },
            |m: &mut ParticleEmitter| { &mut m.scale_rate },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::stringmsg::StringMsg>(
            "color_range_image",
            |m: &ParticleEmitter| { &m.color_range_image },
            |m: &mut ParticleEmitter| { &mut m.color_range_image },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::stringmsg::StringMsg>(
            "topic",
            |m: &ParticleEmitter| { &m.topic },
            |m: &mut ParticleEmitter| { &mut m.topic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::float::Float>(
            "particle_scatter_ratio",
            |m: &ParticleEmitter| { &m.particle_scatter_ratio },
            |m: &mut ParticleEmitter| { &mut m.particle_scatter_ratio },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ParticleEmitter>(
            "ParticleEmitter",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ParticleEmitter {
    const NAME: &'static str = "ParticleEmitter";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                24 => {
                    self.id = is.read_uint32()?;
                },
                32 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pose)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.size)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.rate)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.duration)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.emitting)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.particle_size)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lifetime)?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.material)?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.min_velocity)?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.max_velocity)?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.color_start)?;
                },
                130 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.color_end)?;
                },
                138 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.scale_rate)?;
                },
                146 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.color_range_image)?;
                },
                154 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.topic)?;
                },
                162 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.particle_scatter_ratio)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.id);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(particle_emitter::EmitterType::POINT) {
            my_size += ::protobuf::rt::int32_size(4, self.type_.value());
        }
        if let Some(v) = self.pose.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.size.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.rate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.duration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.emitting.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.particle_size.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.lifetime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.material.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.min_velocity.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.max_velocity.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.color_start.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.color_end.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.scale_rate.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.color_range_image.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.topic.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.particle_scatter_ratio.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.id != 0 {
            os.write_uint32(3, self.id)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(particle_emitter::EmitterType::POINT) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if let Some(v) = self.pose.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.size.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.rate.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.duration.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.emitting.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.particle_size.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.lifetime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.material.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self.min_velocity.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self.max_velocity.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if let Some(v) = self.color_start.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if let Some(v) = self.color_end.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
        }
        if let Some(v) = self.scale_rate.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(17, v, os)?;
        }
        if let Some(v) = self.color_range_image.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(18, v, os)?;
        }
        if let Some(v) = self.topic.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(19, v, os)?;
        }
        if let Some(v) = self.particle_scatter_ratio.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(20, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ParticleEmitter {
        ParticleEmitter::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.name.clear();
        self.id = 0;
        self.type_ = ::protobuf::EnumOrUnknown::new(particle_emitter::EmitterType::POINT);
        self.pose.clear();
        self.size.clear();
        self.rate.clear();
        self.duration.clear();
        self.emitting.clear();
        self.particle_size.clear();
        self.lifetime.clear();
        self.material.clear();
        self.min_velocity.clear();
        self.max_velocity.clear();
        self.color_start.clear();
        self.color_end.clear();
        self.scale_rate.clear();
        self.color_range_image.clear();
        self.topic.clear();
        self.particle_scatter_ratio.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ParticleEmitter {
        static instance: ParticleEmitter = ParticleEmitter {
            header: ::protobuf::MessageField::none(),
            name: ::std::string::String::new(),
            id: 0,
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            pose: ::protobuf::MessageField::none(),
            size: ::protobuf::MessageField::none(),
            rate: ::protobuf::MessageField::none(),
            duration: ::protobuf::MessageField::none(),
            emitting: ::protobuf::MessageField::none(),
            particle_size: ::protobuf::MessageField::none(),
            lifetime: ::protobuf::MessageField::none(),
            material: ::protobuf::MessageField::none(),
            min_velocity: ::protobuf::MessageField::none(),
            max_velocity: ::protobuf::MessageField::none(),
            color_start: ::protobuf::MessageField::none(),
            color_end: ::protobuf::MessageField::none(),
            scale_rate: ::protobuf::MessageField::none(),
            color_range_image: ::protobuf::MessageField::none(),
            topic: ::protobuf::MessageField::none(),
            particle_scatter_ratio: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ParticleEmitter {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ParticleEmitter").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ParticleEmitter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ParticleEmitter {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ParticleEmitter`
pub mod particle_emitter {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:gz.msgs.ParticleEmitter.EmitterType)
    pub enum EmitterType {
        // @@protoc_insertion_point(enum_value:gz.msgs.ParticleEmitter.EmitterType.POINT)
        POINT = 0,
        // @@protoc_insertion_point(enum_value:gz.msgs.ParticleEmitter.EmitterType.BOX)
        BOX = 1,
        // @@protoc_insertion_point(enum_value:gz.msgs.ParticleEmitter.EmitterType.CYLINDER)
        CYLINDER = 2,
        // @@protoc_insertion_point(enum_value:gz.msgs.ParticleEmitter.EmitterType.ELLIPSOID)
        ELLIPSOID = 3,
    }

    impl ::protobuf::Enum for EmitterType {
        const NAME: &'static str = "EmitterType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EmitterType> {
            match value {
                0 => ::std::option::Option::Some(EmitterType::POINT),
                1 => ::std::option::Option::Some(EmitterType::BOX),
                2 => ::std::option::Option::Some(EmitterType::CYLINDER),
                3 => ::std::option::Option::Some(EmitterType::ELLIPSOID),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EmitterType] = &[
            EmitterType::POINT,
            EmitterType::BOX,
            EmitterType::CYLINDER,
            EmitterType::ELLIPSOID,
        ];
    }

    impl ::protobuf::EnumFull for EmitterType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("ParticleEmitter.EmitterType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for EmitterType {
        fn default() -> Self {
            EmitterType::POINT
        }
    }

    impl EmitterType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EmitterType>("ParticleEmitter.EmitterType")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1egz/msgs/particle_emitter.proto\x12\x07gz.msgs\x1a\x15gz/msgs/boole\
    an.proto\x1a\x13gz/msgs/color.proto\x1a\x13gz/msgs/float.proto\x1a\x14gz\
    /msgs/header.proto\x1a\x16gz/msgs/material.proto\x1a\x12gz/msgs/pose.pro\
    to\x1a\x17gz/msgs/stringmsg.proto\x1a\x16gz/msgs/vector3d.proto\"\xd6\
    \x07\n\x0fParticleEmitter\x12'\n\x06header\x18\x01\x20\x01(\x0b2\x0f.gz.\
    msgs.HeaderR\x06header\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\
    \x0e\n\x02id\x18\x03\x20\x01(\rR\x02id\x128\n\x04type\x18\x04\x20\x01(\
    \x0e2$.gz.msgs.ParticleEmitter.EmitterTypeR\x04type\x12!\n\x04pose\x18\
    \x05\x20\x01(\x0b2\r.gz.msgs.PoseR\x04pose\x12%\n\x04size\x18\x06\x20\
    \x01(\x0b2\x11.gz.msgs.Vector3dR\x04size\x12\"\n\x04rate\x18\x07\x20\x01\
    (\x0b2\x0e.gz.msgs.FloatR\x04rate\x12*\n\x08duration\x18\x08\x20\x01(\
    \x0b2\x0e.gz.msgs.FloatR\x08duration\x12,\n\x08emitting\x18\t\x20\x01(\
    \x0b2\x10.gz.msgs.BooleanR\x08emitting\x126\n\rparticle_size\x18\n\x20\
    \x01(\x0b2\x11.gz.msgs.Vector3dR\x0cparticleSize\x12*\n\x08lifetime\x18\
    \x0b\x20\x01(\x0b2\x0e.gz.msgs.FloatR\x08lifetime\x12-\n\x08material\x18\
    \x0c\x20\x01(\x0b2\x11.gz.msgs.MaterialR\x08material\x121\n\x0cmin_veloc\
    ity\x18\r\x20\x01(\x0b2\x0e.gz.msgs.FloatR\x0bminVelocity\x121\n\x0cmax_\
    velocity\x18\x0e\x20\x01(\x0b2\x0e.gz.msgs.FloatR\x0bmaxVelocity\x12/\n\
    \x0bcolor_start\x18\x0f\x20\x01(\x0b2\x0e.gz.msgs.ColorR\ncolorStart\x12\
    +\n\tcolor_end\x18\x10\x20\x01(\x0b2\x0e.gz.msgs.ColorR\x08colorEnd\x12-\
    \n\nscale_rate\x18\x11\x20\x01(\x0b2\x0e.gz.msgs.FloatR\tscaleRate\x12>\
    \n\x11color_range_image\x18\x12\x20\x01(\x0b2\x12.gz.msgs.StringMsgR\x0f\
    colorRangeImage\x12(\n\x05topic\x18\x13\x20\x01(\x0b2\x12.gz.msgs.String\
    MsgR\x05topic\x12D\n\x16particle_scatter_ratio\x18\x14\x20\x01(\x0b2\x0e\
    .gz.msgs.FloatR\x14particleScatterRatio\">\n\x0bEmitterType\x12\t\n\x05P\
    OINT\x10\0\x12\x07\n\x03BOX\x10\x01\x12\x0c\n\x08CYLINDER\x10\x02\x12\r\
    \n\tELLIPSOID\x10\x03B$\n\x0bcom.gz.msgsB\x15ParticleEmitterProtosb\x06p\
    roto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::boolean::file_descriptor().clone());
            deps.push(super::color::file_descriptor().clone());
            deps.push(super::float::file_descriptor().clone());
            deps.push(super::header::file_descriptor().clone());
            deps.push(super::material::file_descriptor().clone());
            deps.push(super::pose::file_descriptor().clone());
            deps.push(super::stringmsg::file_descriptor().clone());
            deps.push(super::vector3d::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ParticleEmitter::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(particle_emitter::EmitterType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

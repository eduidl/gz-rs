// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gz/msgs/serialized_map.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_common::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.SerializedEntityMap)
pub struct SerializedEntityMap {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.SerializedEntityMap.id)
    pub id: u64,
    // @@protoc_insertion_point(field:gz.msgs.SerializedEntityMap.components)
    pub components: ::std::collections::HashMap<i64, super::serialized::SerializedComponent>,
    // @@protoc_insertion_point(field:gz.msgs.SerializedEntityMap.remove)
    pub remove: bool,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.SerializedEntityMap.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SerializedEntityMap {
    fn default() -> &'a SerializedEntityMap {
        <SerializedEntityMap as ::protobuf::Message>::default_instance()
    }
}

impl SerializedEntityMap {
    pub fn new() -> SerializedEntityMap {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &SerializedEntityMap| { &m.id },
            |m: &mut SerializedEntityMap| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "components",
            |m: &SerializedEntityMap| { &m.components },
            |m: &mut SerializedEntityMap| { &mut m.components },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "remove",
            |m: &SerializedEntityMap| { &m.remove },
            |m: &mut SerializedEntityMap| { &mut m.remove },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SerializedEntityMap>(
            "SerializedEntityMap",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SerializedEntityMap {
    const NAME: &'static str = "SerializedEntityMap";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint64()?;
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_int64()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.components.insert(key, value);
                },
                24 => {
                    self.remove = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.id);
        }
        for (k, v) in &self.components {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::int64_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.remove != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        for (k, v) in &self.components {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::int64_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_int64(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.remove != false {
            os.write_bool(3, self.remove)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SerializedEntityMap {
        SerializedEntityMap::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.components.clear();
        self.remove = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SerializedEntityMap {
        static instance: ::protobuf::rt::Lazy<SerializedEntityMap> = ::protobuf::rt::Lazy::new();
        instance.get(SerializedEntityMap::new)
    }
}

impl ::protobuf::MessageFull for SerializedEntityMap {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SerializedEntityMap").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SerializedEntityMap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SerializedEntityMap {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_common::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.SerializedStateMap)
pub struct SerializedStateMap {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.SerializedStateMap.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:gz.msgs.SerializedStateMap.entities)
    pub entities: ::std::collections::HashMap<u64, SerializedEntityMap>,
    // @@protoc_insertion_point(field:gz.msgs.SerializedStateMap.has_one_time_component_changes)
    pub has_one_time_component_changes: bool,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.SerializedStateMap.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SerializedStateMap {
    fn default() -> &'a SerializedStateMap {
        <SerializedStateMap as ::protobuf::Message>::default_instance()
    }
}

impl SerializedStateMap {
    pub fn new() -> SerializedStateMap {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &SerializedStateMap| { &m.header },
            |m: &mut SerializedStateMap| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "entities",
            |m: &SerializedStateMap| { &m.entities },
            |m: &mut SerializedStateMap| { &mut m.entities },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "has_one_time_component_changes",
            |m: &SerializedStateMap| { &m.has_one_time_component_changes },
            |m: &mut SerializedStateMap| { &mut m.has_one_time_component_changes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SerializedStateMap>(
            "SerializedStateMap",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SerializedStateMap {
    const NAME: &'static str = "SerializedStateMap";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint64()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.entities.insert(key, value);
                },
                24 => {
                    self.has_one_time_component_changes = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for (k, v) in &self.entities {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint64_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.has_one_time_component_changes != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for (k, v) in &self.entities {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint64_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint64(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.has_one_time_component_changes != false {
            os.write_bool(3, self.has_one_time_component_changes)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SerializedStateMap {
        SerializedStateMap::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.entities.clear();
        self.has_one_time_component_changes = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SerializedStateMap {
        static instance: ::protobuf::rt::Lazy<SerializedStateMap> = ::protobuf::rt::Lazy::new();
        instance.get(SerializedStateMap::new)
    }
}

impl ::protobuf::MessageFull for SerializedStateMap {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SerializedStateMap").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SerializedStateMap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SerializedStateMap {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_common::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.SerializedStepMap)
pub struct SerializedStepMap {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.SerializedStepMap.stats)
    pub stats: ::protobuf::MessageField<super::world_stats::WorldStatistics>,
    // @@protoc_insertion_point(field:gz.msgs.SerializedStepMap.state)
    pub state: ::protobuf::MessageField<SerializedStateMap>,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.SerializedStepMap.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SerializedStepMap {
    fn default() -> &'a SerializedStepMap {
        <SerializedStepMap as ::protobuf::Message>::default_instance()
    }
}

impl SerializedStepMap {
    pub fn new() -> SerializedStepMap {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::world_stats::WorldStatistics>(
            "stats",
            |m: &SerializedStepMap| { &m.stats },
            |m: &mut SerializedStepMap| { &mut m.stats },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SerializedStateMap>(
            "state",
            |m: &SerializedStepMap| { &m.state },
            |m: &mut SerializedStepMap| { &mut m.state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SerializedStepMap>(
            "SerializedStepMap",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SerializedStepMap {
    const NAME: &'static str = "SerializedStepMap";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.stats)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.state)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.stats.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.stats.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SerializedStepMap {
        SerializedStepMap::new()
    }

    fn clear(&mut self) {
        self.stats.clear();
        self.state.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SerializedStepMap {
        static instance: SerializedStepMap = SerializedStepMap {
            stats: ::protobuf::MessageField::none(),
            state: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SerializedStepMap {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SerializedStepMap").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SerializedStepMap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SerializedStepMap {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cgz/msgs/serialized_map.proto\x12\x07gz.msgs\x1a\x14gz/msgs/header.\
    proto\x1a\x19gz/msgs/world_stats.proto\x1a\x18gz/msgs/serialized.proto\"\
    \xe8\x01\n\x13SerializedEntityMap\x12\x0e\n\x02id\x18\x01\x20\x01(\x04R\
    \x02id\x12L\n\ncomponents\x18\x02\x20\x03(\x0b2,.gz.msgs.SerializedEntit\
    yMap.ComponentsEntryR\ncomponents\x12\x16\n\x06remove\x18\x03\x20\x01(\
    \x08R\x06remove\x1a[\n\x0fComponentsEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\x03R\x03key\x122\n\x05value\x18\x02\x20\x01(\x0b2\x1c.gz.msgs.Seri\
    alizedComponentR\x05value:\x028\x01\"\xa3\x02\n\x12SerializedStateMap\
    \x12'\n\x06header\x18\x01\x20\x01(\x0b2\x0f.gz.msgs.HeaderR\x06header\
    \x12E\n\x08entities\x18\x02\x20\x03(\x0b2).gz.msgs.SerializedStateMap.En\
    titiesEntryR\x08entities\x12B\n\x1ehas_one_time_component_changes\x18\
    \x03\x20\x01(\x08R\x1ahasOneTimeComponentChanges\x1aY\n\rEntitiesEntry\
    \x12\x10\n\x03key\x18\x01\x20\x01(\x04R\x03key\x122\n\x05value\x18\x02\
    \x20\x01(\x0b2\x1c.gz.msgs.SerializedEntityMapR\x05value:\x028\x01\"v\n\
    \x11SerializedStepMap\x12.\n\x05stats\x18\x01\x20\x01(\x0b2\x18.gz.msgs.\
    WorldStatisticsR\x05stats\x121\n\x05state\x18\x02\x20\x01(\x0b2\x1b.gz.m\
    sgs.SerializedStateMapR\x05stateB\r\n\x0bcom.gz.msgsb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::header::file_descriptor().clone());
            deps.push(super::world_stats::file_descriptor().clone());
            deps.push(super::serialized::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(SerializedEntityMap::generated_message_descriptor_data());
            messages.push(SerializedStateMap::generated_message_descriptor_data());
            messages.push(SerializedStepMap::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

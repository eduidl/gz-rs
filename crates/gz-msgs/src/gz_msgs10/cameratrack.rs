// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 3.21.12
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gz/msgs/cameratrack.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

#[derive(::gz_msgs_common::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.CameraTrack)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CameraTrack {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.CameraTrack.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:gz.msgs.CameraTrack.track_mode)
    pub track_mode: ::protobuf::EnumOrUnknown<camera_track::TrackMode>,
    // @@protoc_insertion_point(field:gz.msgs.CameraTrack.follow_target)
    pub follow_target: ::protobuf::MessageField<super::entity::Entity>,
    // @@protoc_insertion_point(field:gz.msgs.CameraTrack.track_target)
    pub track_target: ::protobuf::MessageField<super::entity::Entity>,
    // @@protoc_insertion_point(field:gz.msgs.CameraTrack.follow_offset)
    pub follow_offset: ::protobuf::MessageField<super::vector3d::Vector3d>,
    // @@protoc_insertion_point(field:gz.msgs.CameraTrack.track_offset)
    pub track_offset: ::protobuf::MessageField<super::vector3d::Vector3d>,
    // @@protoc_insertion_point(field:gz.msgs.CameraTrack.follow_pgain)
    pub follow_pgain: f64,
    // @@protoc_insertion_point(field:gz.msgs.CameraTrack.track_pgain)
    pub track_pgain: f64,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.CameraTrack.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CameraTrack {
    fn default() -> &'a CameraTrack {
        <CameraTrack as ::protobuf::Message>::default_instance()
    }
}

impl CameraTrack {
    pub fn new() -> CameraTrack {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &CameraTrack| { &m.header },
            |m: &mut CameraTrack| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "track_mode",
            |m: &CameraTrack| { &m.track_mode },
            |m: &mut CameraTrack| { &mut m.track_mode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::entity::Entity>(
            "follow_target",
            |m: &CameraTrack| { &m.follow_target },
            |m: &mut CameraTrack| { &mut m.follow_target },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::entity::Entity>(
            "track_target",
            |m: &CameraTrack| { &m.track_target },
            |m: &mut CameraTrack| { &mut m.track_target },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::vector3d::Vector3d>(
            "follow_offset",
            |m: &CameraTrack| { &m.follow_offset },
            |m: &mut CameraTrack| { &mut m.follow_offset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::vector3d::Vector3d>(
            "track_offset",
            |m: &CameraTrack| { &m.track_offset },
            |m: &mut CameraTrack| { &mut m.track_offset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "follow_pgain",
            |m: &CameraTrack| { &m.follow_pgain },
            |m: &mut CameraTrack| { &mut m.follow_pgain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "track_pgain",
            |m: &CameraTrack| { &m.track_pgain },
            |m: &mut CameraTrack| { &mut m.track_pgain },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CameraTrack>(
            "CameraTrack",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CameraTrack {
    const NAME: &'static str = "CameraTrack";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                16 => {
                    self.track_mode = is.read_enum_or_unknown()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.follow_target)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.track_target)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.follow_offset)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.track_offset)?;
                },
                57 => {
                    self.follow_pgain = is.read_double()?;
                },
                65 => {
                    self.track_pgain = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.track_mode != ::protobuf::EnumOrUnknown::new(camera_track::TrackMode::NONE) {
            my_size += ::protobuf::rt::int32_size(2, self.track_mode.value());
        }
        if let Some(v) = self.follow_target.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.track_target.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.follow_offset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.track_offset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.follow_pgain != 0. {
            my_size += 1 + 8;
        }
        if self.track_pgain != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.track_mode != ::protobuf::EnumOrUnknown::new(camera_track::TrackMode::NONE) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.track_mode))?;
        }
        if let Some(v) = self.follow_target.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.track_target.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.follow_offset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.track_offset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if self.follow_pgain != 0. {
            os.write_double(7, self.follow_pgain)?;
        }
        if self.track_pgain != 0. {
            os.write_double(8, self.track_pgain)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CameraTrack {
        CameraTrack::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.track_mode = ::protobuf::EnumOrUnknown::new(camera_track::TrackMode::NONE);
        self.follow_target.clear();
        self.track_target.clear();
        self.follow_offset.clear();
        self.track_offset.clear();
        self.follow_pgain = 0.;
        self.track_pgain = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CameraTrack {
        static instance: CameraTrack = CameraTrack {
            header: ::protobuf::MessageField::none(),
            track_mode: ::protobuf::EnumOrUnknown::from_i32(0),
            follow_target: ::protobuf::MessageField::none(),
            track_target: ::protobuf::MessageField::none(),
            follow_offset: ::protobuf::MessageField::none(),
            track_offset: ::protobuf::MessageField::none(),
            follow_pgain: 0.,
            track_pgain: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CameraTrack {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CameraTrack").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CameraTrack {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CameraTrack {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CameraTrack`
pub mod camera_track {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:gz.msgs.CameraTrack.TrackMode)
    pub enum TrackMode {
        // @@protoc_insertion_point(enum_value:gz.msgs.CameraTrack.TrackMode.NONE)
        NONE = 0,
        // @@protoc_insertion_point(enum_value:gz.msgs.CameraTrack.TrackMode.TRACK)
        TRACK = 1,
        // @@protoc_insertion_point(enum_value:gz.msgs.CameraTrack.TrackMode.FOLLOW)
        FOLLOW = 2,
        // @@protoc_insertion_point(enum_value:gz.msgs.CameraTrack.TrackMode.FOLLOW_FREE_LOOK)
        FOLLOW_FREE_LOOK = 3,
        // @@protoc_insertion_point(enum_value:gz.msgs.CameraTrack.TrackMode.FOLLOW_LOOK_AT)
        FOLLOW_LOOK_AT = 4,
        // @@protoc_insertion_point(enum_value:gz.msgs.CameraTrack.TrackMode.USE_LAST)
        USE_LAST = 5,
    }

    impl ::protobuf::Enum for TrackMode {
        const NAME: &'static str = "TrackMode";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<TrackMode> {
            match value {
                0 => ::std::option::Option::Some(TrackMode::NONE),
                1 => ::std::option::Option::Some(TrackMode::TRACK),
                2 => ::std::option::Option::Some(TrackMode::FOLLOW),
                3 => ::std::option::Option::Some(TrackMode::FOLLOW_FREE_LOOK),
                4 => ::std::option::Option::Some(TrackMode::FOLLOW_LOOK_AT),
                5 => ::std::option::Option::Some(TrackMode::USE_LAST),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<TrackMode> {
            match str {
                "NONE" => ::std::option::Option::Some(TrackMode::NONE),
                "TRACK" => ::std::option::Option::Some(TrackMode::TRACK),
                "FOLLOW" => ::std::option::Option::Some(TrackMode::FOLLOW),
                "FOLLOW_FREE_LOOK" => ::std::option::Option::Some(TrackMode::FOLLOW_FREE_LOOK),
                "FOLLOW_LOOK_AT" => ::std::option::Option::Some(TrackMode::FOLLOW_LOOK_AT),
                "USE_LAST" => ::std::option::Option::Some(TrackMode::USE_LAST),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [TrackMode] = &[
            TrackMode::NONE,
            TrackMode::TRACK,
            TrackMode::FOLLOW,
            TrackMode::FOLLOW_FREE_LOOK,
            TrackMode::FOLLOW_LOOK_AT,
            TrackMode::USE_LAST,
        ];
    }

    impl ::protobuf::EnumFull for TrackMode {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CameraTrack.TrackMode").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for TrackMode {
        fn default() -> Self {
            TrackMode::NONE
        }
    }

    impl TrackMode {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<TrackMode>("CameraTrack.TrackMode")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19gz/msgs/cameratrack.proto\x12\x07gz.msgs\x1a\x14gz/msgs/entity.pro\
    to\x1a\x14gz/msgs/header.proto\x1a\x16gz/msgs/vector3d.proto\"\xf7\x03\n\
    \x0bCameraTrack\x12'\n\x06header\x18\x01\x20\x01(\x0b2\x0f.gz.msgs.Heade\
    rR\x06header\x12=\n\ntrack_mode\x18\x02\x20\x01(\x0e2\x1e.gz.msgs.Camera\
    Track.TrackModeR\ttrackMode\x124\n\rfollow_target\x18\x03\x20\x01(\x0b2\
    \x0f.gz.msgs.EntityR\x0cfollowTarget\x122\n\x0ctrack_target\x18\x04\x20\
    \x01(\x0b2\x0f.gz.msgs.EntityR\x0btrackTarget\x126\n\rfollow_offset\x18\
    \x05\x20\x01(\x0b2\x11.gz.msgs.Vector3dR\x0cfollowOffset\x124\n\x0ctrack\
    _offset\x18\x06\x20\x01(\x0b2\x11.gz.msgs.Vector3dR\x0btrackOffset\x12!\
    \n\x0cfollow_pgain\x18\x07\x20\x01(\x01R\x0bfollowPgain\x12\x1f\n\x0btra\
    ck_pgain\x18\x08\x20\x01(\x01R\ntrackPgain\"d\n\tTrackMode\x12\x08\n\x04\
    NONE\x10\0\x12\t\n\x05TRACK\x10\x01\x12\n\n\x06FOLLOW\x10\x02\x12\x14\n\
    \x10FOLLOW_FREE_LOOK\x10\x03\x12\x12\n\x0eFOLLOW_LOOK_AT\x10\x04\x12\x0c\
    \n\x08USE_LAST\x10\x05B\x20\n\x0bcom.gz.msgsB\x11CameraTrackProtosb\x06p\
    roto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::entity::file_descriptor().clone());
            deps.push(super::header::file_descriptor().clone());
            deps.push(super::vector3d::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(CameraTrack::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(camera_track::TrackMode::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.21.12
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gz/msgs/material_color.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

#[derive(::gz_msgs_common::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.MaterialColor)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MaterialColor {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.MaterialColor.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:gz.msgs.MaterialColor.entity)
    pub entity: ::protobuf::MessageField<super::entity::Entity>,
    // @@protoc_insertion_point(field:gz.msgs.MaterialColor.ambient)
    pub ambient: ::protobuf::MessageField<super::color::Color>,
    // @@protoc_insertion_point(field:gz.msgs.MaterialColor.diffuse)
    pub diffuse: ::protobuf::MessageField<super::color::Color>,
    // @@protoc_insertion_point(field:gz.msgs.MaterialColor.specular)
    pub specular: ::protobuf::MessageField<super::color::Color>,
    // @@protoc_insertion_point(field:gz.msgs.MaterialColor.emissive)
    pub emissive: ::protobuf::MessageField<super::color::Color>,
    // @@protoc_insertion_point(field:gz.msgs.MaterialColor.shininess)
    pub shininess: f64,
    // @@protoc_insertion_point(field:gz.msgs.MaterialColor.entity_match)
    pub entity_match: ::protobuf::EnumOrUnknown<material_color::EntityMatch>,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.MaterialColor.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MaterialColor {
    fn default() -> &'a MaterialColor {
        <MaterialColor as ::protobuf::Message>::default_instance()
    }
}

impl MaterialColor {
    pub fn new() -> MaterialColor {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &MaterialColor| { &m.header },
            |m: &mut MaterialColor| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::entity::Entity>(
            "entity",
            |m: &MaterialColor| { &m.entity },
            |m: &mut MaterialColor| { &mut m.entity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::color::Color>(
            "ambient",
            |m: &MaterialColor| { &m.ambient },
            |m: &mut MaterialColor| { &mut m.ambient },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::color::Color>(
            "diffuse",
            |m: &MaterialColor| { &m.diffuse },
            |m: &mut MaterialColor| { &mut m.diffuse },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::color::Color>(
            "specular",
            |m: &MaterialColor| { &m.specular },
            |m: &mut MaterialColor| { &mut m.specular },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::color::Color>(
            "emissive",
            |m: &MaterialColor| { &m.emissive },
            |m: &mut MaterialColor| { &mut m.emissive },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "shininess",
            |m: &MaterialColor| { &m.shininess },
            |m: &mut MaterialColor| { &mut m.shininess },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "entity_match",
            |m: &MaterialColor| { &m.entity_match },
            |m: &mut MaterialColor| { &mut m.entity_match },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MaterialColor>(
            "MaterialColor",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MaterialColor {
    const NAME: &'static str = "MaterialColor";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.entity)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ambient)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.diffuse)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.specular)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.emissive)?;
                },
                57 => {
                    self.shininess = is.read_double()?;
                },
                64 => {
                    self.entity_match = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.entity.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ambient.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.diffuse.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.specular.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.emissive.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.shininess != 0. {
            my_size += 1 + 8;
        }
        if self.entity_match != ::protobuf::EnumOrUnknown::new(material_color::EntityMatch::FIRST) {
            my_size += ::protobuf::rt::int32_size(8, self.entity_match.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.entity.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.ambient.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.diffuse.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.specular.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.emissive.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if self.shininess != 0. {
            os.write_double(7, self.shininess)?;
        }
        if self.entity_match != ::protobuf::EnumOrUnknown::new(material_color::EntityMatch::FIRST) {
            os.write_enum(8, ::protobuf::EnumOrUnknown::value(&self.entity_match))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MaterialColor {
        MaterialColor::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.entity.clear();
        self.ambient.clear();
        self.diffuse.clear();
        self.specular.clear();
        self.emissive.clear();
        self.shininess = 0.;
        self.entity_match = ::protobuf::EnumOrUnknown::new(material_color::EntityMatch::FIRST);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MaterialColor {
        static instance: MaterialColor = MaterialColor {
            header: ::protobuf::MessageField::none(),
            entity: ::protobuf::MessageField::none(),
            ambient: ::protobuf::MessageField::none(),
            diffuse: ::protobuf::MessageField::none(),
            specular: ::protobuf::MessageField::none(),
            emissive: ::protobuf::MessageField::none(),
            shininess: 0.,
            entity_match: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MaterialColor {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MaterialColor").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MaterialColor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MaterialColor {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MaterialColor`
pub mod material_color {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:gz.msgs.MaterialColor.EntityMatch)
    pub enum EntityMatch {
        // @@protoc_insertion_point(enum_value:gz.msgs.MaterialColor.EntityMatch.FIRST)
        FIRST = 0,
        // @@protoc_insertion_point(enum_value:gz.msgs.MaterialColor.EntityMatch.ALL)
        ALL = 1,
    }

    impl ::protobuf::Enum for EntityMatch {
        const NAME: &'static str = "EntityMatch";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EntityMatch> {
            match value {
                0 => ::std::option::Option::Some(EntityMatch::FIRST),
                1 => ::std::option::Option::Some(EntityMatch::ALL),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EntityMatch> {
            match str {
                "FIRST" => ::std::option::Option::Some(EntityMatch::FIRST),
                "ALL" => ::std::option::Option::Some(EntityMatch::ALL),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EntityMatch] = &[
            EntityMatch::FIRST,
            EntityMatch::ALL,
        ];
    }

    impl ::protobuf::EnumFull for EntityMatch {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("MaterialColor.EntityMatch").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for EntityMatch {
        fn default() -> Self {
            EntityMatch::FIRST
        }
    }

    impl EntityMatch {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EntityMatch>("MaterialColor.EntityMatch")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cgz/msgs/material_color.proto\x12\x07gz.msgs\x1a\x13gz/msgs/color.p\
    roto\x1a\x14gz/msgs/entity.proto\x1a\x14gz/msgs/header.proto\"\x95\x03\n\
    \rMaterialColor\x12'\n\x06header\x18\x01\x20\x01(\x0b2\x0f.gz.msgs.Heade\
    rR\x06header\x12'\n\x06entity\x18\x02\x20\x01(\x0b2\x0f.gz.msgs.EntityR\
    \x06entity\x12(\n\x07ambient\x18\x03\x20\x01(\x0b2\x0e.gz.msgs.ColorR\
    \x07ambient\x12(\n\x07diffuse\x18\x04\x20\x01(\x0b2\x0e.gz.msgs.ColorR\
    \x07diffuse\x12*\n\x08specular\x18\x05\x20\x01(\x0b2\x0e.gz.msgs.ColorR\
    \x08specular\x12*\n\x08emissive\x18\x06\x20\x01(\x0b2\x0e.gz.msgs.ColorR\
    \x08emissive\x12\x1c\n\tshininess\x18\x07\x20\x01(\x01R\tshininess\x12E\
    \n\x0centity_match\x18\x08\x20\x01(\x0e2\".gz.msgs.MaterialColor.EntityM\
    atchR\x0bentityMatch\"!\n\x0bEntityMatch\x12\t\n\x05FIRST\x10\0\x12\x07\
    \n\x03ALL\x10\x01B\"\n\x0bcom.gz.msgsB\x13MaterialColorProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::color::file_descriptor().clone());
            deps.push(super::entity::file_descriptor().clone());
            deps.push(super::header::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MaterialColor::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(material_color::EntityMatch::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

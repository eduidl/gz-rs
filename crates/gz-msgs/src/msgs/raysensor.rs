// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gz/msgs/raysensor.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_derive::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.RaySensor)
pub struct RaySensor {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.RaySensor.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:gz.msgs.RaySensor.display_scan)
    pub display_scan: bool,
    // @@protoc_insertion_point(field:gz.msgs.RaySensor.horizontal_samples)
    pub horizontal_samples: i32,
    // @@protoc_insertion_point(field:gz.msgs.RaySensor.horizontal_resolution)
    pub horizontal_resolution: f64,
    // @@protoc_insertion_point(field:gz.msgs.RaySensor.horizontal_min_angle)
    pub horizontal_min_angle: f64,
    // @@protoc_insertion_point(field:gz.msgs.RaySensor.horizontal_max_angle)
    pub horizontal_max_angle: f64,
    // @@protoc_insertion_point(field:gz.msgs.RaySensor.vertical_samples)
    pub vertical_samples: i32,
    // @@protoc_insertion_point(field:gz.msgs.RaySensor.vertical_resolution)
    pub vertical_resolution: f64,
    // @@protoc_insertion_point(field:gz.msgs.RaySensor.vertical_min_angle)
    pub vertical_min_angle: f64,
    // @@protoc_insertion_point(field:gz.msgs.RaySensor.vertical_max_angle)
    pub vertical_max_angle: f64,
    // @@protoc_insertion_point(field:gz.msgs.RaySensor.range_min)
    pub range_min: f64,
    // @@protoc_insertion_point(field:gz.msgs.RaySensor.range_max)
    pub range_max: f64,
    // @@protoc_insertion_point(field:gz.msgs.RaySensor.range_resolution)
    pub range_resolution: f64,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.RaySensor.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RaySensor {
    fn default() -> &'a RaySensor {
        <RaySensor as ::protobuf::Message>::default_instance()
    }
}

impl RaySensor {
    pub fn new() -> RaySensor {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &RaySensor| { &m.header },
            |m: &mut RaySensor| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "display_scan",
            |m: &RaySensor| { &m.display_scan },
            |m: &mut RaySensor| { &mut m.display_scan },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "horizontal_samples",
            |m: &RaySensor| { &m.horizontal_samples },
            |m: &mut RaySensor| { &mut m.horizontal_samples },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "horizontal_resolution",
            |m: &RaySensor| { &m.horizontal_resolution },
            |m: &mut RaySensor| { &mut m.horizontal_resolution },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "horizontal_min_angle",
            |m: &RaySensor| { &m.horizontal_min_angle },
            |m: &mut RaySensor| { &mut m.horizontal_min_angle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "horizontal_max_angle",
            |m: &RaySensor| { &m.horizontal_max_angle },
            |m: &mut RaySensor| { &mut m.horizontal_max_angle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "vertical_samples",
            |m: &RaySensor| { &m.vertical_samples },
            |m: &mut RaySensor| { &mut m.vertical_samples },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "vertical_resolution",
            |m: &RaySensor| { &m.vertical_resolution },
            |m: &mut RaySensor| { &mut m.vertical_resolution },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "vertical_min_angle",
            |m: &RaySensor| { &m.vertical_min_angle },
            |m: &mut RaySensor| { &mut m.vertical_min_angle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "vertical_max_angle",
            |m: &RaySensor| { &m.vertical_max_angle },
            |m: &mut RaySensor| { &mut m.vertical_max_angle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "range_min",
            |m: &RaySensor| { &m.range_min },
            |m: &mut RaySensor| { &mut m.range_min },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "range_max",
            |m: &RaySensor| { &m.range_max },
            |m: &mut RaySensor| { &mut m.range_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "range_resolution",
            |m: &RaySensor| { &m.range_resolution },
            |m: &mut RaySensor| { &mut m.range_resolution },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RaySensor>(
            "RaySensor",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RaySensor {
    const NAME: &'static str = "RaySensor";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                16 => {
                    self.display_scan = is.read_bool()?;
                },
                24 => {
                    self.horizontal_samples = is.read_int32()?;
                },
                33 => {
                    self.horizontal_resolution = is.read_double()?;
                },
                41 => {
                    self.horizontal_min_angle = is.read_double()?;
                },
                49 => {
                    self.horizontal_max_angle = is.read_double()?;
                },
                56 => {
                    self.vertical_samples = is.read_int32()?;
                },
                65 => {
                    self.vertical_resolution = is.read_double()?;
                },
                73 => {
                    self.vertical_min_angle = is.read_double()?;
                },
                81 => {
                    self.vertical_max_angle = is.read_double()?;
                },
                89 => {
                    self.range_min = is.read_double()?;
                },
                97 => {
                    self.range_max = is.read_double()?;
                },
                105 => {
                    self.range_resolution = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.display_scan != false {
            my_size += 1 + 1;
        }
        if self.horizontal_samples != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.horizontal_samples);
        }
        if self.horizontal_resolution != 0. {
            my_size += 1 + 8;
        }
        if self.horizontal_min_angle != 0. {
            my_size += 1 + 8;
        }
        if self.horizontal_max_angle != 0. {
            my_size += 1 + 8;
        }
        if self.vertical_samples != 0 {
            my_size += ::protobuf::rt::int32_size(7, self.vertical_samples);
        }
        if self.vertical_resolution != 0. {
            my_size += 1 + 8;
        }
        if self.vertical_min_angle != 0. {
            my_size += 1 + 8;
        }
        if self.vertical_max_angle != 0. {
            my_size += 1 + 8;
        }
        if self.range_min != 0. {
            my_size += 1 + 8;
        }
        if self.range_max != 0. {
            my_size += 1 + 8;
        }
        if self.range_resolution != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.display_scan != false {
            os.write_bool(2, self.display_scan)?;
        }
        if self.horizontal_samples != 0 {
            os.write_int32(3, self.horizontal_samples)?;
        }
        if self.horizontal_resolution != 0. {
            os.write_double(4, self.horizontal_resolution)?;
        }
        if self.horizontal_min_angle != 0. {
            os.write_double(5, self.horizontal_min_angle)?;
        }
        if self.horizontal_max_angle != 0. {
            os.write_double(6, self.horizontal_max_angle)?;
        }
        if self.vertical_samples != 0 {
            os.write_int32(7, self.vertical_samples)?;
        }
        if self.vertical_resolution != 0. {
            os.write_double(8, self.vertical_resolution)?;
        }
        if self.vertical_min_angle != 0. {
            os.write_double(9, self.vertical_min_angle)?;
        }
        if self.vertical_max_angle != 0. {
            os.write_double(10, self.vertical_max_angle)?;
        }
        if self.range_min != 0. {
            os.write_double(11, self.range_min)?;
        }
        if self.range_max != 0. {
            os.write_double(12, self.range_max)?;
        }
        if self.range_resolution != 0. {
            os.write_double(13, self.range_resolution)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RaySensor {
        RaySensor::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.display_scan = false;
        self.horizontal_samples = 0;
        self.horizontal_resolution = 0.;
        self.horizontal_min_angle = 0.;
        self.horizontal_max_angle = 0.;
        self.vertical_samples = 0;
        self.vertical_resolution = 0.;
        self.vertical_min_angle = 0.;
        self.vertical_max_angle = 0.;
        self.range_min = 0.;
        self.range_max = 0.;
        self.range_resolution = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RaySensor {
        static instance: RaySensor = RaySensor {
            header: ::protobuf::MessageField::none(),
            display_scan: false,
            horizontal_samples: 0,
            horizontal_resolution: 0.,
            horizontal_min_angle: 0.,
            horizontal_max_angle: 0.,
            vertical_samples: 0,
            vertical_resolution: 0.,
            vertical_min_angle: 0.,
            vertical_max_angle: 0.,
            range_min: 0.,
            range_max: 0.,
            range_resolution: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RaySensor {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RaySensor").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RaySensor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RaySensor {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17gz/msgs/raysensor.proto\x12\x07gz.msgs\x1a\x14gz/msgs/header.proto\
    \"\xbc\x04\n\tRaySensor\x12'\n\x06header\x18\x01\x20\x01(\x0b2\x0f.gz.ms\
    gs.HeaderR\x06header\x12!\n\x0cdisplay_scan\x18\x02\x20\x01(\x08R\x0bdis\
    playScan\x12-\n\x12horizontal_samples\x18\x03\x20\x01(\x05R\x11horizonta\
    lSamples\x123\n\x15horizontal_resolution\x18\x04\x20\x01(\x01R\x14horizo\
    ntalResolution\x120\n\x14horizontal_min_angle\x18\x05\x20\x01(\x01R\x12h\
    orizontalMinAngle\x120\n\x14horizontal_max_angle\x18\x06\x20\x01(\x01R\
    \x12horizontalMaxAngle\x12)\n\x10vertical_samples\x18\x07\x20\x01(\x05R\
    \x0fverticalSamples\x12/\n\x13vertical_resolution\x18\x08\x20\x01(\x01R\
    \x12verticalResolution\x12,\n\x12vertical_min_angle\x18\t\x20\x01(\x01R\
    \x10verticalMinAngle\x12,\n\x12vertical_max_angle\x18\n\x20\x01(\x01R\
    \x10verticalMaxAngle\x12\x1b\n\trange_min\x18\x0b\x20\x01(\x01R\x08range\
    Min\x12\x1b\n\trange_max\x18\x0c\x20\x01(\x01R\x08rangeMax\x12)\n\x10ran\
    ge_resolution\x18\r\x20\x01(\x01R\x0frangeResolutionB\x1e\n\x0bcom.gz.ms\
    gsB\x0fRaySensorProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::header::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RaySensor::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

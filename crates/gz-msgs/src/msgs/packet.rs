// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gz/msgs/packet.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_derive::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.Packet)
pub struct Packet {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.Packet.topic)
    pub topic: ::std::string::String,
    // @@protoc_insertion_point(field:gz.msgs.Packet.type)
    pub type_: ::std::string::String,
    // message oneof groups
    pub content: ::std::option::Option<packet::Content>,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.Packet.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Packet {
    fn default() -> &'a Packet {
        <Packet as ::protobuf::Message>::default_instance()
    }
}

impl Packet {
    pub fn new() -> Packet {
        ::std::default::Default::default()
    }

    // .gz.msgs.CmdVel2D cmd_vel2d = 3;

    pub fn cmd_vel2d(&self) -> &super::cmd_vel2d::CmdVel2D {
        match self.content {
            ::std::option::Option::Some(packet::Content::CmdVel2d(ref v)) => v,
            _ => <super::cmd_vel2d::CmdVel2D as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_cmd_vel2d(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_cmd_vel2d(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(packet::Content::CmdVel2d(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cmd_vel2d(&mut self, v: super::cmd_vel2d::CmdVel2D) {
        self.content = ::std::option::Option::Some(packet::Content::CmdVel2d(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cmd_vel2d(&mut self) -> &mut super::cmd_vel2d::CmdVel2D {
        if let ::std::option::Option::Some(packet::Content::CmdVel2d(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(packet::Content::CmdVel2d(super::cmd_vel2d::CmdVel2D::new()));
        }
        match self.content {
            ::std::option::Option::Some(packet::Content::CmdVel2d(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cmd_vel2d(&mut self) -> super::cmd_vel2d::CmdVel2D {
        if self.has_cmd_vel2d() {
            match self.content.take() {
                ::std::option::Option::Some(packet::Content::CmdVel2d(v)) => v,
                _ => panic!(),
            }
        } else {
            super::cmd_vel2d::CmdVel2D::new()
        }
    }

    // .gz.msgs.Image image = 4;

    pub fn image(&self) -> &super::image::Image {
        match self.content {
            ::std::option::Option::Some(packet::Content::Image(ref v)) => v,
            _ => <super::image::Image as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_image(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_image(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(packet::Content::Image(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_image(&mut self, v: super::image::Image) {
        self.content = ::std::option::Option::Some(packet::Content::Image(v))
    }

    // Mutable pointer to the field.
    pub fn mut_image(&mut self) -> &mut super::image::Image {
        if let ::std::option::Option::Some(packet::Content::Image(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(packet::Content::Image(super::image::Image::new()));
        }
        match self.content {
            ::std::option::Option::Some(packet::Content::Image(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_image(&mut self) -> super::image::Image {
        if self.has_image() {
            match self.content.take() {
                ::std::option::Option::Some(packet::Content::Image(v)) => v,
                _ => panic!(),
            }
        } else {
            super::image::Image::new()
        }
    }

    // .gz.msgs.StringMsg_V string_msg_v = 5;

    pub fn string_msg_v(&self) -> &super::stringmsg_v::StringMsg_V {
        match self.content {
            ::std::option::Option::Some(packet::Content::StringMsgV(ref v)) => v,
            _ => <super::stringmsg_v::StringMsg_V as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_string_msg_v(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_string_msg_v(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(packet::Content::StringMsgV(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string_msg_v(&mut self, v: super::stringmsg_v::StringMsg_V) {
        self.content = ::std::option::Option::Some(packet::Content::StringMsgV(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string_msg_v(&mut self) -> &mut super::stringmsg_v::StringMsg_V {
        if let ::std::option::Option::Some(packet::Content::StringMsgV(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(packet::Content::StringMsgV(super::stringmsg_v::StringMsg_V::new()));
        }
        match self.content {
            ::std::option::Option::Some(packet::Content::StringMsgV(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string_msg_v(&mut self) -> super::stringmsg_v::StringMsg_V {
        if self.has_string_msg_v() {
            match self.content.take() {
                ::std::option::Option::Some(packet::Content::StringMsgV(v)) => v,
                _ => panic!(),
            }
        } else {
            super::stringmsg_v::StringMsg_V::new()
        }
    }

    // .gz.msgs.WebRequest web_request = 6;

    pub fn web_request(&self) -> &super::web_request::WebRequest {
        match self.content {
            ::std::option::Option::Some(packet::Content::WebRequest(ref v)) => v,
            _ => <super::web_request::WebRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_web_request(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_web_request(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(packet::Content::WebRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_web_request(&mut self, v: super::web_request::WebRequest) {
        self.content = ::std::option::Option::Some(packet::Content::WebRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_web_request(&mut self) -> &mut super::web_request::WebRequest {
        if let ::std::option::Option::Some(packet::Content::WebRequest(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(packet::Content::WebRequest(super::web_request::WebRequest::new()));
        }
        match self.content {
            ::std::option::Option::Some(packet::Content::WebRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_web_request(&mut self) -> super::web_request::WebRequest {
        if self.has_web_request() {
            match self.content.take() {
                ::std::option::Option::Some(packet::Content::WebRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            super::web_request::WebRequest::new()
        }
    }

    // .gz.msgs.Pose pose = 7;

    pub fn pose(&self) -> &super::pose::Pose {
        match self.content {
            ::std::option::Option::Some(packet::Content::Pose(ref v)) => v,
            _ => <super::pose::Pose as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_pose(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_pose(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(packet::Content::Pose(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pose(&mut self, v: super::pose::Pose) {
        self.content = ::std::option::Option::Some(packet::Content::Pose(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pose(&mut self) -> &mut super::pose::Pose {
        if let ::std::option::Option::Some(packet::Content::Pose(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(packet::Content::Pose(super::pose::Pose::new()));
        }
        match self.content {
            ::std::option::Option::Some(packet::Content::Pose(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pose(&mut self) -> super::pose::Pose {
        if self.has_pose() {
            match self.content.take() {
                ::std::option::Option::Some(packet::Content::Pose(v)) => v,
                _ => panic!(),
            }
        } else {
            super::pose::Pose::new()
        }
    }

    // .gz.msgs.Double_V doublev = 8;

    pub fn doublev(&self) -> &super::double_v::Double_V {
        match self.content {
            ::std::option::Option::Some(packet::Content::Doublev(ref v)) => v,
            _ => <super::double_v::Double_V as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_doublev(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_doublev(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(packet::Content::Doublev(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_doublev(&mut self, v: super::double_v::Double_V) {
        self.content = ::std::option::Option::Some(packet::Content::Doublev(v))
    }

    // Mutable pointer to the field.
    pub fn mut_doublev(&mut self) -> &mut super::double_v::Double_V {
        if let ::std::option::Option::Some(packet::Content::Doublev(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(packet::Content::Doublev(super::double_v::Double_V::new()));
        }
        match self.content {
            ::std::option::Option::Some(packet::Content::Doublev(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_doublev(&mut self) -> super::double_v::Double_V {
        if self.has_doublev() {
            match self.content.take() {
                ::std::option::Option::Some(packet::Content::Doublev(v)) => v,
                _ => panic!(),
            }
        } else {
            super::double_v::Double_V::new()
        }
    }

    // .gz.msgs.Pose_V pose_v = 9;

    pub fn pose_v(&self) -> &super::pose_v::Pose_V {
        match self.content {
            ::std::option::Option::Some(packet::Content::PoseV(ref v)) => v,
            _ => <super::pose_v::Pose_V as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_pose_v(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_pose_v(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(packet::Content::PoseV(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pose_v(&mut self, v: super::pose_v::Pose_V) {
        self.content = ::std::option::Option::Some(packet::Content::PoseV(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pose_v(&mut self) -> &mut super::pose_v::Pose_V {
        if let ::std::option::Option::Some(packet::Content::PoseV(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(packet::Content::PoseV(super::pose_v::Pose_V::new()));
        }
        match self.content {
            ::std::option::Option::Some(packet::Content::PoseV(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pose_v(&mut self) -> super::pose_v::Pose_V {
        if self.has_pose_v() {
            match self.content.take() {
                ::std::option::Option::Some(packet::Content::PoseV(v)) => v,
                _ => panic!(),
            }
        } else {
            super::pose_v::Pose_V::new()
        }
    }

    // .gz.msgs.Time time = 10;

    pub fn time(&self) -> &super::time::Time {
        match self.content {
            ::std::option::Option::Some(packet::Content::Time(ref v)) => v,
            _ => <super::time::Time as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_time(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_time(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(packet::Content::Time(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: super::time::Time) {
        self.content = ::std::option::Option::Some(packet::Content::Time(v))
    }

    // Mutable pointer to the field.
    pub fn mut_time(&mut self) -> &mut super::time::Time {
        if let ::std::option::Option::Some(packet::Content::Time(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(packet::Content::Time(super::time::Time::new()));
        }
        match self.content {
            ::std::option::Option::Some(packet::Content::Time(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_time(&mut self) -> super::time::Time {
        if self.has_time() {
            match self.content.take() {
                ::std::option::Option::Some(packet::Content::Time(v)) => v,
                _ => panic!(),
            }
        } else {
            super::time::Time::new()
        }
    }

    // .gz.msgs.Clock clock = 11;

    pub fn clock(&self) -> &super::clock::Clock {
        match self.content {
            ::std::option::Option::Some(packet::Content::Clock(ref v)) => v,
            _ => <super::clock::Clock as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_clock(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_clock(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(packet::Content::Clock(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_clock(&mut self, v: super::clock::Clock) {
        self.content = ::std::option::Option::Some(packet::Content::Clock(v))
    }

    // Mutable pointer to the field.
    pub fn mut_clock(&mut self) -> &mut super::clock::Clock {
        if let ::std::option::Option::Some(packet::Content::Clock(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(packet::Content::Clock(super::clock::Clock::new()));
        }
        match self.content {
            ::std::option::Option::Some(packet::Content::Clock(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_clock(&mut self) -> super::clock::Clock {
        if self.has_clock() {
            match self.content.take() {
                ::std::option::Option::Some(packet::Content::Clock(v)) => v,
                _ => panic!(),
            }
        } else {
            super::clock::Clock::new()
        }
    }

    // .gz.msgs.WorldStatistics world_stats = 12;

    pub fn world_stats(&self) -> &super::world_stats::WorldStatistics {
        match self.content {
            ::std::option::Option::Some(packet::Content::WorldStats(ref v)) => v,
            _ => <super::world_stats::WorldStatistics as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_world_stats(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_world_stats(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(packet::Content::WorldStats(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_world_stats(&mut self, v: super::world_stats::WorldStatistics) {
        self.content = ::std::option::Option::Some(packet::Content::WorldStats(v))
    }

    // Mutable pointer to the field.
    pub fn mut_world_stats(&mut self) -> &mut super::world_stats::WorldStatistics {
        if let ::std::option::Option::Some(packet::Content::WorldStats(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(packet::Content::WorldStats(super::world_stats::WorldStatistics::new()));
        }
        match self.content {
            ::std::option::Option::Some(packet::Content::WorldStats(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_world_stats(&mut self) -> super::world_stats::WorldStatistics {
        if self.has_world_stats() {
            match self.content.take() {
                ::std::option::Option::Some(packet::Content::WorldStats(v)) => v,
                _ => panic!(),
            }
        } else {
            super::world_stats::WorldStatistics::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "topic",
            |m: &Packet| { &m.topic },
            |m: &mut Packet| { &mut m.topic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Packet| { &m.type_ },
            |m: &mut Packet| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::cmd_vel2d::CmdVel2D>(
            "cmd_vel2d",
            Packet::has_cmd_vel2d,
            Packet::cmd_vel2d,
            Packet::mut_cmd_vel2d,
            Packet::set_cmd_vel2d,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::image::Image>(
            "image",
            Packet::has_image,
            Packet::image,
            Packet::mut_image,
            Packet::set_image,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::stringmsg_v::StringMsg_V>(
            "string_msg_v",
            Packet::has_string_msg_v,
            Packet::string_msg_v,
            Packet::mut_string_msg_v,
            Packet::set_string_msg_v,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::web_request::WebRequest>(
            "web_request",
            Packet::has_web_request,
            Packet::web_request,
            Packet::mut_web_request,
            Packet::set_web_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::pose::Pose>(
            "pose",
            Packet::has_pose,
            Packet::pose,
            Packet::mut_pose,
            Packet::set_pose,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::double_v::Double_V>(
            "doublev",
            Packet::has_doublev,
            Packet::doublev,
            Packet::mut_doublev,
            Packet::set_doublev,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::pose_v::Pose_V>(
            "pose_v",
            Packet::has_pose_v,
            Packet::pose_v,
            Packet::mut_pose_v,
            Packet::set_pose_v,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::time::Time>(
            "time",
            Packet::has_time,
            Packet::time,
            Packet::mut_time,
            Packet::set_time,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::clock::Clock>(
            "clock",
            Packet::has_clock,
            Packet::clock,
            Packet::mut_clock,
            Packet::set_clock,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::world_stats::WorldStatistics>(
            "world_stats",
            Packet::has_world_stats,
            Packet::world_stats,
            Packet::mut_world_stats,
            Packet::set_world_stats,
        ));
        oneofs.push(packet::Content::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Packet>(
            "Packet",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Packet {
    const NAME: &'static str = "Packet";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.topic = is.read_string()?;
                },
                18 => {
                    self.type_ = is.read_string()?;
                },
                26 => {
                    self.content = ::std::option::Option::Some(packet::Content::CmdVel2d(is.read_message()?));
                },
                34 => {
                    self.content = ::std::option::Option::Some(packet::Content::Image(is.read_message()?));
                },
                42 => {
                    self.content = ::std::option::Option::Some(packet::Content::StringMsgV(is.read_message()?));
                },
                50 => {
                    self.content = ::std::option::Option::Some(packet::Content::WebRequest(is.read_message()?));
                },
                58 => {
                    self.content = ::std::option::Option::Some(packet::Content::Pose(is.read_message()?));
                },
                66 => {
                    self.content = ::std::option::Option::Some(packet::Content::Doublev(is.read_message()?));
                },
                74 => {
                    self.content = ::std::option::Option::Some(packet::Content::PoseV(is.read_message()?));
                },
                82 => {
                    self.content = ::std::option::Option::Some(packet::Content::Time(is.read_message()?));
                },
                90 => {
                    self.content = ::std::option::Option::Some(packet::Content::Clock(is.read_message()?));
                },
                98 => {
                    self.content = ::std::option::Option::Some(packet::Content::WorldStats(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.topic.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.topic);
        }
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.type_);
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &packet::Content::CmdVel2d(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &packet::Content::Image(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &packet::Content::StringMsgV(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &packet::Content::WebRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &packet::Content::Pose(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &packet::Content::Doublev(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &packet::Content::PoseV(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &packet::Content::Time(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &packet::Content::Clock(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &packet::Content::WorldStats(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.topic.is_empty() {
            os.write_string(1, &self.topic)?;
        }
        if !self.type_.is_empty() {
            os.write_string(2, &self.type_)?;
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &packet::Content::CmdVel2d(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &packet::Content::Image(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &packet::Content::StringMsgV(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &packet::Content::WebRequest(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &packet::Content::Pose(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &packet::Content::Doublev(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &packet::Content::PoseV(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &packet::Content::Time(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &packet::Content::Clock(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &packet::Content::WorldStats(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Packet {
        Packet::new()
    }

    fn clear(&mut self) {
        self.topic.clear();
        self.type_.clear();
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Packet {
        static instance: Packet = Packet {
            topic: ::std::string::String::new(),
            type_: ::std::string::String::new(),
            content: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Packet {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Packet").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Packet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Packet {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Packet`
pub mod packet {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:gz.msgs.Packet.content)
    pub enum Content {
        // @@protoc_insertion_point(oneof_field:gz.msgs.Packet.cmd_vel2d)
        CmdVel2d(super::super::cmd_vel2d::CmdVel2D),
        // @@protoc_insertion_point(oneof_field:gz.msgs.Packet.image)
        Image(super::super::image::Image),
        // @@protoc_insertion_point(oneof_field:gz.msgs.Packet.string_msg_v)
        StringMsgV(super::super::stringmsg_v::StringMsg_V),
        // @@protoc_insertion_point(oneof_field:gz.msgs.Packet.web_request)
        WebRequest(super::super::web_request::WebRequest),
        // @@protoc_insertion_point(oneof_field:gz.msgs.Packet.pose)
        Pose(super::super::pose::Pose),
        // @@protoc_insertion_point(oneof_field:gz.msgs.Packet.doublev)
        Doublev(super::super::double_v::Double_V),
        // @@protoc_insertion_point(oneof_field:gz.msgs.Packet.pose_v)
        PoseV(super::super::pose_v::Pose_V),
        // @@protoc_insertion_point(oneof_field:gz.msgs.Packet.time)
        Time(super::super::time::Time),
        // @@protoc_insertion_point(oneof_field:gz.msgs.Packet.clock)
        Clock(super::super::clock::Clock),
        // @@protoc_insertion_point(oneof_field:gz.msgs.Packet.world_stats)
        WorldStats(super::super::world_stats::WorldStatistics),
    }

    impl ::protobuf::Oneof for Content {
    }

    impl ::protobuf::OneofFull for Content {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Packet as ::protobuf::MessageFull>::descriptor().oneof_by_name("content").unwrap()).clone()
        }
    }

    impl Content {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Content>("content")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14gz/msgs/packet.proto\x12\x07gz.msgs\x1a\x16gz/msgs/double_v.proto\
    \x1a\x13gz/msgs/clock.proto\x1a\x17gz/msgs/cmd_vel2d.proto\x1a\x13gz/msg\
    s/image.proto\x1a\x12gz/msgs/pose.proto\x1a\x14gz/msgs/pose_v.proto\x1a\
    \x19gz/msgs/stringmsg_v.proto\x1a\x12gz/msgs/time.proto\x1a\x19gz/msgs/w\
    eb_request.proto\x1a\x19gz/msgs/world_stats.proto\"\x91\x04\n\x06Packet\
    \x12\x14\n\x05topic\x18\x01\x20\x01(\tR\x05topic\x12\x12\n\x04type\x18\
    \x02\x20\x01(\tR\x04type\x120\n\tcmd_vel2d\x18\x03\x20\x01(\x0b2\x11.gz.\
    msgs.CmdVel2DH\0R\x08cmdVel2d\x12&\n\x05image\x18\x04\x20\x01(\x0b2\x0e.\
    gz.msgs.ImageH\0R\x05image\x128\n\x0cstring_msg_v\x18\x05\x20\x01(\x0b2\
    \x14.gz.msgs.StringMsg_VH\0R\nstringMsgV\x126\n\x0bweb_request\x18\x06\
    \x20\x01(\x0b2\x13.gz.msgs.WebRequestH\0R\nwebRequest\x12#\n\x04pose\x18\
    \x07\x20\x01(\x0b2\r.gz.msgs.PoseH\0R\x04pose\x12-\n\x07doublev\x18\x08\
    \x20\x01(\x0b2\x11.gz.msgs.Double_VH\0R\x07doublev\x12(\n\x06pose_v\x18\
    \t\x20\x01(\x0b2\x0f.gz.msgs.Pose_VH\0R\x05poseV\x12#\n\x04time\x18\n\
    \x20\x01(\x0b2\r.gz.msgs.TimeH\0R\x04time\x12&\n\x05clock\x18\x0b\x20\
    \x01(\x0b2\x0e.gz.msgs.ClockH\0R\x05clock\x12;\n\x0bworld_stats\x18\x0c\
    \x20\x01(\x0b2\x18.gz.msgs.WorldStatisticsH\0R\nworldStatsB\t\n\x07conte\
    ntB\x1b\n\x0bcom.gz.msgsB\x0cPacketProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(10);
            deps.push(super::double_v::file_descriptor().clone());
            deps.push(super::clock::file_descriptor().clone());
            deps.push(super::cmd_vel2d::file_descriptor().clone());
            deps.push(super::image::file_descriptor().clone());
            deps.push(super::pose::file_descriptor().clone());
            deps.push(super::pose_v::file_descriptor().clone());
            deps.push(super::stringmsg_v::file_descriptor().clone());
            deps.push(super::time::file_descriptor().clone());
            deps.push(super::web_request::file_descriptor().clone());
            deps.push(super::world_stats::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Packet::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

#![doc = include_str!("../README.md")]

mod msgs;

pub use msgs::{
    actor::Actor,
    actuators::Actuators,
    air_pressure_sensor::AirPressureSensor,
    air_speed_sensor::AirSpeedSensor,
    altimeter::Altimeter,
    altimeter_sensor::AltimeterSensor,
    annotated_axis_aligned_2d_box::AnnotatedAxisAligned2DBox,
    annotated_axis_aligned_2d_box_v::AnnotatedAxisAligned2DBox_V,
    annotated_oriented_3d_box::AnnotatedOriented3DBox,
    annotated_oriented_3d_box_v::AnnotatedOriented3DBox_V,
    any::Any,
    atmosphere::Atmosphere,
    axis::Axis,
    axis_aligned_2d_box::AxisAligned2DBox,
    axis_aligned_box::AxisAlignedBox,
    battery::Battery,
    battery_state::BatteryState,
    boolean::Boolean,
    boxgeom::BoxGeom,
    bytes::Bytes,
    camera_cmd::CameraCmd,
    camera_info::CameraInfo,
    camera_lens::CameraLens,
    camerasensor::CameraSensor,
    capsulegeom::CapsuleGeom,
    cessna::Cessna,
    clock::Clock,
    cmd_vel2d::CmdVel2D,
    collision::Collision,
    color::Color,
    conegeom::ConeGeom,
    contact::Contact,
    contacts::Contacts,
    contactsensor::ContactSensor,
    cylindergeom::CylinderGeom,
    dataframe::Dataframe,
    density::Density,
    diagnostics::Diagnostics,
    discovery::Discovery,
    distortion::Distortion,
    double::Double,
    double_v::Double_V,
    duration::Duration,
    dvl_beam_state::DVLBeamState,
    dvl_kinematic_estimate::DVLKinematicEstimate,
    dvl_range_estimate::DVLRangeEstimate,
    dvl_tracking_target::DVLTrackingTarget,
    dvl_velocity_tracking::DVLVelocityTracking,
    ellipsoidgeom::EllipsoidGeom,
    empty::Empty,
    entity::Entity,
    entity_factory::EntityFactory,
    entity_factory_v::EntityFactory_V,
    entity_plugin_v::EntityPlugin_V,
    entity_wrench::EntityWrench,
    entity_wrench_map::EntityWrenchMap,
    float::Float,
    float_v::Float_V,
    fluid::Fluid,
    fluid_pressure::FluidPressure,
    fog::Fog,
    friction::Friction,
    fuel_metadata::FuelMetadata,
    geometry::Geometry,
    gps::GPS,
    gps_sensor::GPSSensor,
    gui::GUI,
    gui_camera::GUICamera,
    header::Header,
    heightmapgeom::HeightmapGeom,
    hydra::Hydra,
    image::Image,
    imagegeom::ImageGeom,
    imu::IMU,
    imu_sensor::IMUSensor,
    inertial::Inertial,
    int32::Int32,
    int32_v::Int32_V,
    int64::Int64,
    int64_v::Int64_V,
    joint::Joint,
    joint_animation::JointAnimation,
    joint_cmd::JointCmd,
    joint_trajectory::JointTrajectory,
    joint_trajectory_point::JointTrajectoryPoint,
    joint_wrench::JointWrench,
    joy::Joy,
    joystick::Joystick,
    laserscan::LaserScan,
    lens::Lens,
    lidar_sensor::LidarSensor,
    light::Light,
    link::Link,
    link_data::LinkData,
    log_control::LogControl,
    log_playback_control::LogPlaybackControl,
    log_playback_stats::LogPlaybackStatistics,
    log_status::LogStatus,
    logical_camera_image::LogicalCameraImage,
    logical_camera_sensor::LogicalCameraSensor,
    magnetometer::Magnetometer,
    magnetometer_sensor::MagnetometerSensor,
    marker::Marker,
    marker_v::Marker_V,
    material::Material,
    meshgeom::MeshGeom,
    model::Model,
    model_configuration::ModelConfiguration,
    model_v::Model_V,
    navsat::NavSat,
    navsat_sensor::NavSatSensor,
    occupancy_grid::OccupancyGrid,
    odometry::Odometry,
    odometry_with_covariance::OdometryWithCovariance,
    oriented_3d_box::Oriented3DBox,
    packet::Packet,
    param::Param,
    param_v::Param_V,
    parameter::Parameter,
    parameter_declaration::ParameterDeclaration,
    parameter_declarations::ParameterDeclarations,
    parameter_error::ParameterError,
    parameter_name::ParameterName,
    parameter_value::ParameterValue,
    particle_emitter::ParticleEmitter,
    particle_emitter_v::ParticleEmitter_V,
    performance_sensor_metrics::PerformanceSensorMetrics,
    physics::Physics,
    pid::PID,
    planegeom::PlaneGeom,
    plugin::Plugin,
    plugin_v::Plugin_V,
    pointcloud::PointCloud,
    pointcloud_packed::PointCloudPacked,
    polylinegeom::Polyline,
    pose::Pose,
    pose_animation::PoseAnimation,
    pose_trajectory::PoseTrajectory,
    pose_v::Pose_V,
    pose_with_covariance::PoseWithCovariance,
    projector::Projector,
    propagation_grid::PropagationGrid,
    propagation_particle::PropagationParticle,
    publish::Publish,
    publishers::Publishers,
    quaternion::Quaternion,
    raysensor::RaySensor,
    request::Request,
    response::Response,
    rest_login::RestLogin,
    rest_logout::RestLogout,
    rest_post::RestPost,
    rest_response::RestResponse,
    road::Road,
    scene::Scene,
    sdf_generator_config::SdfGeneratorConfig,
    selection::Selection,
    sensor::Sensor,
    sensor_noise::SensorNoise,
    sensor_v::Sensor_V,
    serialized::{SerializedComponent, SerializedEntity, SerializedState, SerializedStep},
    serialized_map::{SerializedEntityMap, SerializedStateMap, SerializedStepMap},
    server_control::ServerControl,
    shadows::Shadows,
    sim_event::SimEvent,
    sky::Sky,
    sonar::Sonar,
    spheregeom::SphereGeom,
    spherical_coordinates::SphericalCoordinates,
    statistic::{Metric, Statistic, StatisticsGroup},
    stringmsg::StringMsg,
    stringmsg_v::StringMsg_V,
    subscribe::Subscribe,
    surface::Surface,
    tactile::Tactile,
    test::Test,
    time::Time,
    topic_info::TopicInfo,
    track_visual::TrackVisual,
    twist::Twist,
    twist_with_covariance::TwistWithCovariance,
    uint32::UInt32,
    uint32_v::UInt32_V,
    uint64::UInt64,
    uint64_v::UInt64_V,
    undo_redo::UndoRedo,
    user_cmd::UserCmd,
    user_cmd_stats::UserCmdStats,
    vector2d::Vector2d,
    vector3d::Vector3d,
    version::Version,
    version_range::VersionRange,
    versioned_name::VersionedName,
    video_record::VideoRecord,
    visual::Visual,
    visual_v::Visual_V,
    web_request::WebRequest,
    wheel_slip_parameters_cmd::WheelSlipParametersCmd,
    wind::Wind,
    wireless_node::WirelessNode,
    wireless_nodes::WirelessNodes,
    world_control::WorldControl,
    world_control_state::WorldControlState,
    world_modify::WorldModify,
    world_reset::WorldReset,
    world_stats::WorldStatistics,
    wrench::Wrench,
    *,
};
pub use protobuf;
use protobuf::Message;

pub trait GzMessage: Message {
    const GZ_TYPE_NAME: &'static str;
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_type_name() {
        assert_eq!(Actor::GZ_TYPE_NAME, "gz.msgs.Actor");
    }
}

// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gz/msgs/cessna.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_common::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.Cessna)
pub struct Cessna {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.Cessna.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:gz.msgs.Cessna.propeller_speed)
    pub propeller_speed: f32,
    // @@protoc_insertion_point(field:gz.msgs.Cessna.left_aileron)
    pub left_aileron: f32,
    // @@protoc_insertion_point(field:gz.msgs.Cessna.left_flap)
    pub left_flap: f32,
    // @@protoc_insertion_point(field:gz.msgs.Cessna.right_aileron)
    pub right_aileron: f32,
    // @@protoc_insertion_point(field:gz.msgs.Cessna.right_flap)
    pub right_flap: f32,
    // @@protoc_insertion_point(field:gz.msgs.Cessna.elevators)
    pub elevators: f32,
    // @@protoc_insertion_point(field:gz.msgs.Cessna.rudder)
    pub rudder: f32,
    // @@protoc_insertion_point(field:gz.msgs.Cessna.cmd_propeller_speed)
    pub cmd_propeller_speed: f32,
    // @@protoc_insertion_point(field:gz.msgs.Cessna.cmd_left_aileron)
    pub cmd_left_aileron: f32,
    // @@protoc_insertion_point(field:gz.msgs.Cessna.cmd_left_flap)
    pub cmd_left_flap: f32,
    // @@protoc_insertion_point(field:gz.msgs.Cessna.cmd_right_aileron)
    pub cmd_right_aileron: f32,
    // @@protoc_insertion_point(field:gz.msgs.Cessna.cmd_right_flap)
    pub cmd_right_flap: f32,
    // @@protoc_insertion_point(field:gz.msgs.Cessna.cmd_elevators)
    pub cmd_elevators: f32,
    // @@protoc_insertion_point(field:gz.msgs.Cessna.cmd_rudder)
    pub cmd_rudder: f32,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.Cessna.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Cessna {
    fn default() -> &'a Cessna {
        <Cessna as ::protobuf::Message>::default_instance()
    }
}

impl Cessna {
    pub fn new() -> Cessna {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &Cessna| { &m.header },
            |m: &mut Cessna| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "propeller_speed",
            |m: &Cessna| { &m.propeller_speed },
            |m: &mut Cessna| { &mut m.propeller_speed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "left_aileron",
            |m: &Cessna| { &m.left_aileron },
            |m: &mut Cessna| { &mut m.left_aileron },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "left_flap",
            |m: &Cessna| { &m.left_flap },
            |m: &mut Cessna| { &mut m.left_flap },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "right_aileron",
            |m: &Cessna| { &m.right_aileron },
            |m: &mut Cessna| { &mut m.right_aileron },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "right_flap",
            |m: &Cessna| { &m.right_flap },
            |m: &mut Cessna| { &mut m.right_flap },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "elevators",
            |m: &Cessna| { &m.elevators },
            |m: &mut Cessna| { &mut m.elevators },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rudder",
            |m: &Cessna| { &m.rudder },
            |m: &mut Cessna| { &mut m.rudder },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cmd_propeller_speed",
            |m: &Cessna| { &m.cmd_propeller_speed },
            |m: &mut Cessna| { &mut m.cmd_propeller_speed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cmd_left_aileron",
            |m: &Cessna| { &m.cmd_left_aileron },
            |m: &mut Cessna| { &mut m.cmd_left_aileron },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cmd_left_flap",
            |m: &Cessna| { &m.cmd_left_flap },
            |m: &mut Cessna| { &mut m.cmd_left_flap },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cmd_right_aileron",
            |m: &Cessna| { &m.cmd_right_aileron },
            |m: &mut Cessna| { &mut m.cmd_right_aileron },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cmd_right_flap",
            |m: &Cessna| { &m.cmd_right_flap },
            |m: &mut Cessna| { &mut m.cmd_right_flap },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cmd_elevators",
            |m: &Cessna| { &m.cmd_elevators },
            |m: &mut Cessna| { &mut m.cmd_elevators },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cmd_rudder",
            |m: &Cessna| { &m.cmd_rudder },
            |m: &mut Cessna| { &mut m.cmd_rudder },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Cessna>(
            "Cessna",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Cessna {
    const NAME: &'static str = "Cessna";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                21 => {
                    self.propeller_speed = is.read_float()?;
                },
                29 => {
                    self.left_aileron = is.read_float()?;
                },
                37 => {
                    self.left_flap = is.read_float()?;
                },
                45 => {
                    self.right_aileron = is.read_float()?;
                },
                53 => {
                    self.right_flap = is.read_float()?;
                },
                61 => {
                    self.elevators = is.read_float()?;
                },
                69 => {
                    self.rudder = is.read_float()?;
                },
                77 => {
                    self.cmd_propeller_speed = is.read_float()?;
                },
                85 => {
                    self.cmd_left_aileron = is.read_float()?;
                },
                93 => {
                    self.cmd_left_flap = is.read_float()?;
                },
                101 => {
                    self.cmd_right_aileron = is.read_float()?;
                },
                109 => {
                    self.cmd_right_flap = is.read_float()?;
                },
                117 => {
                    self.cmd_elevators = is.read_float()?;
                },
                125 => {
                    self.cmd_rudder = is.read_float()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.propeller_speed != 0. {
            my_size += 1 + 4;
        }
        if self.left_aileron != 0. {
            my_size += 1 + 4;
        }
        if self.left_flap != 0. {
            my_size += 1 + 4;
        }
        if self.right_aileron != 0. {
            my_size += 1 + 4;
        }
        if self.right_flap != 0. {
            my_size += 1 + 4;
        }
        if self.elevators != 0. {
            my_size += 1 + 4;
        }
        if self.rudder != 0. {
            my_size += 1 + 4;
        }
        if self.cmd_propeller_speed != 0. {
            my_size += 1 + 4;
        }
        if self.cmd_left_aileron != 0. {
            my_size += 1 + 4;
        }
        if self.cmd_left_flap != 0. {
            my_size += 1 + 4;
        }
        if self.cmd_right_aileron != 0. {
            my_size += 1 + 4;
        }
        if self.cmd_right_flap != 0. {
            my_size += 1 + 4;
        }
        if self.cmd_elevators != 0. {
            my_size += 1 + 4;
        }
        if self.cmd_rudder != 0. {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.propeller_speed != 0. {
            os.write_float(2, self.propeller_speed)?;
        }
        if self.left_aileron != 0. {
            os.write_float(3, self.left_aileron)?;
        }
        if self.left_flap != 0. {
            os.write_float(4, self.left_flap)?;
        }
        if self.right_aileron != 0. {
            os.write_float(5, self.right_aileron)?;
        }
        if self.right_flap != 0. {
            os.write_float(6, self.right_flap)?;
        }
        if self.elevators != 0. {
            os.write_float(7, self.elevators)?;
        }
        if self.rudder != 0. {
            os.write_float(8, self.rudder)?;
        }
        if self.cmd_propeller_speed != 0. {
            os.write_float(9, self.cmd_propeller_speed)?;
        }
        if self.cmd_left_aileron != 0. {
            os.write_float(10, self.cmd_left_aileron)?;
        }
        if self.cmd_left_flap != 0. {
            os.write_float(11, self.cmd_left_flap)?;
        }
        if self.cmd_right_aileron != 0. {
            os.write_float(12, self.cmd_right_aileron)?;
        }
        if self.cmd_right_flap != 0. {
            os.write_float(13, self.cmd_right_flap)?;
        }
        if self.cmd_elevators != 0. {
            os.write_float(14, self.cmd_elevators)?;
        }
        if self.cmd_rudder != 0. {
            os.write_float(15, self.cmd_rudder)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Cessna {
        Cessna::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.propeller_speed = 0.;
        self.left_aileron = 0.;
        self.left_flap = 0.;
        self.right_aileron = 0.;
        self.right_flap = 0.;
        self.elevators = 0.;
        self.rudder = 0.;
        self.cmd_propeller_speed = 0.;
        self.cmd_left_aileron = 0.;
        self.cmd_left_flap = 0.;
        self.cmd_right_aileron = 0.;
        self.cmd_right_flap = 0.;
        self.cmd_elevators = 0.;
        self.cmd_rudder = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Cessna {
        static instance: Cessna = Cessna {
            header: ::protobuf::MessageField::none(),
            propeller_speed: 0.,
            left_aileron: 0.,
            left_flap: 0.,
            right_aileron: 0.,
            right_flap: 0.,
            elevators: 0.,
            rudder: 0.,
            cmd_propeller_speed: 0.,
            cmd_left_aileron: 0.,
            cmd_left_flap: 0.,
            cmd_right_aileron: 0.,
            cmd_right_flap: 0.,
            cmd_elevators: 0.,
            cmd_rudder: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Cessna {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Cessna").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Cessna {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cessna {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14gz/msgs/cessna.proto\x12\x07gz.msgs\x1a\x14gz/msgs/header.proto\"\
    \xa8\x04\n\x06Cessna\x12'\n\x06header\x18\x01\x20\x01(\x0b2\x0f.gz.msgs.\
    HeaderR\x06header\x12'\n\x0fpropeller_speed\x18\x02\x20\x01(\x02R\x0epro\
    pellerSpeed\x12!\n\x0cleft_aileron\x18\x03\x20\x01(\x02R\x0bleftAileron\
    \x12\x1b\n\tleft_flap\x18\x04\x20\x01(\x02R\x08leftFlap\x12#\n\rright_ai\
    leron\x18\x05\x20\x01(\x02R\x0crightAileron\x12\x1d\n\nright_flap\x18\
    \x06\x20\x01(\x02R\trightFlap\x12\x1c\n\televators\x18\x07\x20\x01(\x02R\
    \televators\x12\x16\n\x06rudder\x18\x08\x20\x01(\x02R\x06rudder\x12.\n\
    \x13cmd_propeller_speed\x18\t\x20\x01(\x02R\x11cmdPropellerSpeed\x12(\n\
    \x10cmd_left_aileron\x18\n\x20\x01(\x02R\x0ecmdLeftAileron\x12\"\n\rcmd_\
    left_flap\x18\x0b\x20\x01(\x02R\x0bcmdLeftFlap\x12*\n\x11cmd_right_ailer\
    on\x18\x0c\x20\x01(\x02R\x0fcmdRightAileron\x12$\n\x0ecmd_right_flap\x18\
    \r\x20\x01(\x02R\x0ccmdRightFlap\x12#\n\rcmd_elevators\x18\x0e\x20\x01(\
    \x02R\x0ccmdElevators\x12\x1d\n\ncmd_rudder\x18\x0f\x20\x01(\x02R\tcmdRu\
    dderB\x1b\n\x0bcom.gz.msgsB\x0cCessnaProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::header::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Cessna::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

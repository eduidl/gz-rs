// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gz/msgs/camera_info.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_derive::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.CameraInfo)
pub struct CameraInfo {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.CameraInfo.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:gz.msgs.CameraInfo.width)
    pub width: u32,
    // @@protoc_insertion_point(field:gz.msgs.CameraInfo.height)
    pub height: u32,
    // @@protoc_insertion_point(field:gz.msgs.CameraInfo.distortion)
    pub distortion: ::protobuf::MessageField<camera_info::Distortion>,
    // @@protoc_insertion_point(field:gz.msgs.CameraInfo.intrinsics)
    pub intrinsics: ::protobuf::MessageField<camera_info::Intrinsics>,
    // @@protoc_insertion_point(field:gz.msgs.CameraInfo.projection)
    pub projection: ::protobuf::MessageField<camera_info::Projection>,
    // @@protoc_insertion_point(field:gz.msgs.CameraInfo.rectification_matrix)
    pub rectification_matrix: ::std::vec::Vec<f64>,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.CameraInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CameraInfo {
    fn default() -> &'a CameraInfo {
        <CameraInfo as ::protobuf::Message>::default_instance()
    }
}

impl CameraInfo {
    pub fn new() -> CameraInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &CameraInfo| { &m.header },
            |m: &mut CameraInfo| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "width",
            |m: &CameraInfo| { &m.width },
            |m: &mut CameraInfo| { &mut m.width },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &CameraInfo| { &m.height },
            |m: &mut CameraInfo| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, camera_info::Distortion>(
            "distortion",
            |m: &CameraInfo| { &m.distortion },
            |m: &mut CameraInfo| { &mut m.distortion },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, camera_info::Intrinsics>(
            "intrinsics",
            |m: &CameraInfo| { &m.intrinsics },
            |m: &mut CameraInfo| { &mut m.intrinsics },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, camera_info::Projection>(
            "projection",
            |m: &CameraInfo| { &m.projection },
            |m: &mut CameraInfo| { &mut m.projection },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rectification_matrix",
            |m: &CameraInfo| { &m.rectification_matrix },
            |m: &mut CameraInfo| { &mut m.rectification_matrix },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CameraInfo>(
            "CameraInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CameraInfo {
    const NAME: &'static str = "CameraInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                16 => {
                    self.width = is.read_uint32()?;
                },
                24 => {
                    self.height = is.read_uint32()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.distortion)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.intrinsics)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.projection)?;
                },
                58 => {
                    is.read_repeated_packed_double_into(&mut self.rectification_matrix)?;
                },
                57 => {
                    self.rectification_matrix.push(is.read_double()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.width != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.width);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.height);
        }
        if let Some(v) = self.distortion.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.intrinsics.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.projection.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::vec_packed_double_size(7, &self.rectification_matrix);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.width != 0 {
            os.write_uint32(2, self.width)?;
        }
        if self.height != 0 {
            os.write_uint32(3, self.height)?;
        }
        if let Some(v) = self.distortion.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.intrinsics.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.projection.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_repeated_packed_double(7, &self.rectification_matrix)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CameraInfo {
        CameraInfo::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.width = 0;
        self.height = 0;
        self.distortion.clear();
        self.intrinsics.clear();
        self.projection.clear();
        self.rectification_matrix.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CameraInfo {
        static instance: CameraInfo = CameraInfo {
            header: ::protobuf::MessageField::none(),
            width: 0,
            height: 0,
            distortion: ::protobuf::MessageField::none(),
            intrinsics: ::protobuf::MessageField::none(),
            projection: ::protobuf::MessageField::none(),
            rectification_matrix: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CameraInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CameraInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CameraInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CameraInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CameraInfo`
pub mod camera_info {
    #[derive(PartialEq,Clone,Default,Debug)]
    #[derive(::gz_msgs_derive::GzMessage)]
    // @@protoc_insertion_point(message:gz.msgs.CameraInfo.Distortion)
    pub struct Distortion {
        // message fields
        // @@protoc_insertion_point(field:gz.msgs.CameraInfo.Distortion.model)
        pub model: ::protobuf::EnumOrUnknown<distortion::DistortionModelType>,
        // @@protoc_insertion_point(field:gz.msgs.CameraInfo.Distortion.k)
        pub k: ::std::vec::Vec<f64>,
        // special fields
        // @@protoc_insertion_point(special_field:gz.msgs.CameraInfo.Distortion.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Distortion {
        fn default() -> &'a Distortion {
            <Distortion as ::protobuf::Message>::default_instance()
        }
    }

    impl Distortion {
        pub fn new() -> Distortion {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "model",
                |m: &Distortion| { &m.model },
                |m: &mut Distortion| { &mut m.model },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "k",
                |m: &Distortion| { &m.k },
                |m: &mut Distortion| { &mut m.k },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Distortion>(
                "CameraInfo.Distortion",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Distortion {
        const NAME: &'static str = "Distortion";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.model = is.read_enum_or_unknown()?;
                    },
                    18 => {
                        is.read_repeated_packed_double_into(&mut self.k)?;
                    },
                    17 => {
                        self.k.push(is.read_double()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.model != ::protobuf::EnumOrUnknown::new(distortion::DistortionModelType::PLUMB_BOB) {
                my_size += ::protobuf::rt::int32_size(1, self.model.value());
            }
            my_size += 9 * self.k.len() as u64;
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.model != ::protobuf::EnumOrUnknown::new(distortion::DistortionModelType::PLUMB_BOB) {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.model))?;
            }
            for v in &self.k {
                os.write_double(2, *v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Distortion {
            Distortion::new()
        }

        fn clear(&mut self) {
            self.model = ::protobuf::EnumOrUnknown::new(distortion::DistortionModelType::PLUMB_BOB);
            self.k.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Distortion {
            static instance: Distortion = Distortion {
                model: ::protobuf::EnumOrUnknown::from_i32(0),
                k: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Distortion {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CameraInfo.Distortion").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Distortion {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Distortion {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Distortion`
    pub mod distortion {
        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:gz.msgs.CameraInfo.Distortion.DistortionModelType)
        pub enum DistortionModelType {
            // @@protoc_insertion_point(enum_value:gz.msgs.CameraInfo.Distortion.DistortionModelType.PLUMB_BOB)
            PLUMB_BOB = 0,
            // @@protoc_insertion_point(enum_value:gz.msgs.CameraInfo.Distortion.DistortionModelType.RATIONAL_POLYNOMIAL)
            RATIONAL_POLYNOMIAL = 1,
            // @@protoc_insertion_point(enum_value:gz.msgs.CameraInfo.Distortion.DistortionModelType.EQUIDISTANT)
            EQUIDISTANT = 2,
        }

        impl ::protobuf::Enum for DistortionModelType {
            const NAME: &'static str = "DistortionModelType";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<DistortionModelType> {
                match value {
                    0 => ::std::option::Option::Some(DistortionModelType::PLUMB_BOB),
                    1 => ::std::option::Option::Some(DistortionModelType::RATIONAL_POLYNOMIAL),
                    2 => ::std::option::Option::Some(DistortionModelType::EQUIDISTANT),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [DistortionModelType] = &[
                DistortionModelType::PLUMB_BOB,
                DistortionModelType::RATIONAL_POLYNOMIAL,
                DistortionModelType::EQUIDISTANT,
            ];
        }

        impl ::protobuf::EnumFull for DistortionModelType {
            fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().enum_by_package_relative_name("CameraInfo.Distortion.DistortionModelType").unwrap()).clone()
            }

            fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                let index = *self as usize;
                Self::enum_descriptor().value_by_index(index)
            }
        }

        impl ::std::default::Default for DistortionModelType {
            fn default() -> Self {
                DistortionModelType::PLUMB_BOB
            }
        }

        impl DistortionModelType {
            pub(in super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DistortionModelType>("CameraInfo.Distortion.DistortionModelType")
            }
        }
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    #[derive(::gz_msgs_derive::GzMessage)]
    // @@protoc_insertion_point(message:gz.msgs.CameraInfo.Intrinsics)
    pub struct Intrinsics {
        // message fields
        // @@protoc_insertion_point(field:gz.msgs.CameraInfo.Intrinsics.k)
        pub k: ::std::vec::Vec<f64>,
        // special fields
        // @@protoc_insertion_point(special_field:gz.msgs.CameraInfo.Intrinsics.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Intrinsics {
        fn default() -> &'a Intrinsics {
            <Intrinsics as ::protobuf::Message>::default_instance()
        }
    }

    impl Intrinsics {
        pub fn new() -> Intrinsics {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "k",
                |m: &Intrinsics| { &m.k },
                |m: &mut Intrinsics| { &mut m.k },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Intrinsics>(
                "CameraInfo.Intrinsics",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Intrinsics {
        const NAME: &'static str = "Intrinsics";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        is.read_repeated_packed_double_into(&mut self.k)?;
                    },
                    9 => {
                        self.k.push(is.read_double()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            my_size += 9 * self.k.len() as u64;
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.k {
                os.write_double(1, *v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Intrinsics {
            Intrinsics::new()
        }

        fn clear(&mut self) {
            self.k.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Intrinsics {
            static instance: Intrinsics = Intrinsics {
                k: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Intrinsics {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CameraInfo.Intrinsics").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Intrinsics {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Intrinsics {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    #[derive(::gz_msgs_derive::GzMessage)]
    // @@protoc_insertion_point(message:gz.msgs.CameraInfo.Projection)
    pub struct Projection {
        // message fields
        // @@protoc_insertion_point(field:gz.msgs.CameraInfo.Projection.p)
        pub p: ::std::vec::Vec<f64>,
        // special fields
        // @@protoc_insertion_point(special_field:gz.msgs.CameraInfo.Projection.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Projection {
        fn default() -> &'a Projection {
            <Projection as ::protobuf::Message>::default_instance()
        }
    }

    impl Projection {
        pub fn new() -> Projection {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "p",
                |m: &Projection| { &m.p },
                |m: &mut Projection| { &mut m.p },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Projection>(
                "CameraInfo.Projection",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Projection {
        const NAME: &'static str = "Projection";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        is.read_repeated_packed_double_into(&mut self.p)?;
                    },
                    9 => {
                        self.p.push(is.read_double()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            my_size += 9 * self.p.len() as u64;
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.p {
                os.write_double(1, *v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Projection {
            Projection::new()
        }

        fn clear(&mut self) {
            self.p.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Projection {
            static instance: Projection = Projection {
                p: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Projection {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CameraInfo.Projection").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Projection {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Projection {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19gz/msgs/camera_info.proto\x12\x07gz.msgs\x1a\x14gz/msgs/header.pro\
    to\"\xc9\x04\n\nCameraInfo\x12'\n\x06header\x18\x01\x20\x01(\x0b2\x0f.gz\
    .msgs.HeaderR\x06header\x12\x14\n\x05width\x18\x02\x20\x01(\rR\x05width\
    \x12\x16\n\x06height\x18\x03\x20\x01(\rR\x06height\x12>\n\ndistortion\
    \x18\x04\x20\x01(\x0b2\x1e.gz.msgs.CameraInfo.DistortionR\ndistortion\
    \x12>\n\nintrinsics\x18\x05\x20\x01(\x0b2\x1e.gz.msgs.CameraInfo.Intrins\
    icsR\nintrinsics\x12>\n\nprojection\x18\x06\x20\x01(\x0b2\x1e.gz.msgs.Ca\
    meraInfo.ProjectionR\nprojection\x125\n\x14rectification_matrix\x18\x07\
    \x20\x03(\x01R\x13rectificationMatrixB\x02\x10\x01\x1a\xb4\x01\n\nDistor\
    tion\x12H\n\x05model\x18\x01\x20\x01(\x0e22.gz.msgs.CameraInfo.Distortio\
    n.DistortionModelTypeR\x05model\x12\x0c\n\x01k\x18\x02\x20\x03(\x01R\x01\
    k\"N\n\x13DistortionModelType\x12\r\n\tPLUMB_BOB\x10\0\x12\x17\n\x13RATI\
    ONAL_POLYNOMIAL\x10\x01\x12\x0f\n\x0bEQUIDISTANT\x10\x02\x1a\x1a\n\nIntr\
    insics\x12\x0c\n\x01k\x18\x01\x20\x03(\x01R\x01k\x1a\x1a\n\nProjection\
    \x12\x0c\n\x01p\x18\x01\x20\x03(\x01R\x01pB\x1f\n\x0bcom.gz.msgsB\x10Cam\
    eraInfoProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::header::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(CameraInfo::generated_message_descriptor_data());
            messages.push(camera_info::Distortion::generated_message_descriptor_data());
            messages.push(camera_info::Intrinsics::generated_message_descriptor_data());
            messages.push(camera_info::Projection::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(camera_info::distortion::DistortionModelType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

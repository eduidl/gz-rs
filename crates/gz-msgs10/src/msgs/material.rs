// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gz/msgs/material.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_common::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.Material)
pub struct Material {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.Material.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:gz.msgs.Material.script)
    pub script: ::protobuf::MessageField<material::Script>,
    // @@protoc_insertion_point(field:gz.msgs.Material.shader_type)
    pub shader_type: ::protobuf::EnumOrUnknown<material::ShaderType>,
    // @@protoc_insertion_point(field:gz.msgs.Material.normal_map)
    pub normal_map: ::std::string::String,
    // @@protoc_insertion_point(field:gz.msgs.Material.ambient)
    pub ambient: ::protobuf::MessageField<super::color::Color>,
    // @@protoc_insertion_point(field:gz.msgs.Material.diffuse)
    pub diffuse: ::protobuf::MessageField<super::color::Color>,
    // @@protoc_insertion_point(field:gz.msgs.Material.specular)
    pub specular: ::protobuf::MessageField<super::color::Color>,
    // @@protoc_insertion_point(field:gz.msgs.Material.emissive)
    pub emissive: ::protobuf::MessageField<super::color::Color>,
    // @@protoc_insertion_point(field:gz.msgs.Material.lighting)
    pub lighting: bool,
    // @@protoc_insertion_point(field:gz.msgs.Material.pbr)
    pub pbr: ::protobuf::MessageField<material::PBR>,
    // @@protoc_insertion_point(field:gz.msgs.Material.render_order)
    pub render_order: f64,
    // @@protoc_insertion_point(field:gz.msgs.Material.double_sided)
    pub double_sided: bool,
    // @@protoc_insertion_point(field:gz.msgs.Material.shininess)
    pub shininess: f64,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.Material.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Material {
    fn default() -> &'a Material {
        <Material as ::protobuf::Message>::default_instance()
    }
}

impl Material {
    pub fn new() -> Material {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &Material| { &m.header },
            |m: &mut Material| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, material::Script>(
            "script",
            |m: &Material| { &m.script },
            |m: &mut Material| { &mut m.script },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "shader_type",
            |m: &Material| { &m.shader_type },
            |m: &mut Material| { &mut m.shader_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "normal_map",
            |m: &Material| { &m.normal_map },
            |m: &mut Material| { &mut m.normal_map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::color::Color>(
            "ambient",
            |m: &Material| { &m.ambient },
            |m: &mut Material| { &mut m.ambient },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::color::Color>(
            "diffuse",
            |m: &Material| { &m.diffuse },
            |m: &mut Material| { &mut m.diffuse },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::color::Color>(
            "specular",
            |m: &Material| { &m.specular },
            |m: &mut Material| { &mut m.specular },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::color::Color>(
            "emissive",
            |m: &Material| { &m.emissive },
            |m: &mut Material| { &mut m.emissive },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "lighting",
            |m: &Material| { &m.lighting },
            |m: &mut Material| { &mut m.lighting },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, material::PBR>(
            "pbr",
            |m: &Material| { &m.pbr },
            |m: &mut Material| { &mut m.pbr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "render_order",
            |m: &Material| { &m.render_order },
            |m: &mut Material| { &mut m.render_order },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "double_sided",
            |m: &Material| { &m.double_sided },
            |m: &mut Material| { &mut m.double_sided },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "shininess",
            |m: &Material| { &m.shininess },
            |m: &mut Material| { &mut m.shininess },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Material>(
            "Material",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Material {
    const NAME: &'static str = "Material";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.script)?;
                },
                24 => {
                    self.shader_type = is.read_enum_or_unknown()?;
                },
                34 => {
                    self.normal_map = is.read_string()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ambient)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.diffuse)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.specular)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.emissive)?;
                },
                72 => {
                    self.lighting = is.read_bool()?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pbr)?;
                },
                89 => {
                    self.render_order = is.read_double()?;
                },
                96 => {
                    self.double_sided = is.read_bool()?;
                },
                105 => {
                    self.shininess = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.script.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.shader_type != ::protobuf::EnumOrUnknown::new(material::ShaderType::VERTEX) {
            my_size += ::protobuf::rt::int32_size(3, self.shader_type.value());
        }
        if !self.normal_map.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.normal_map);
        }
        if let Some(v) = self.ambient.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.diffuse.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.specular.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.emissive.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.lighting != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.pbr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.render_order != 0. {
            my_size += 1 + 8;
        }
        if self.double_sided != false {
            my_size += 1 + 1;
        }
        if self.shininess != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.script.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.shader_type != ::protobuf::EnumOrUnknown::new(material::ShaderType::VERTEX) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.shader_type))?;
        }
        if !self.normal_map.is_empty() {
            os.write_string(4, &self.normal_map)?;
        }
        if let Some(v) = self.ambient.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.diffuse.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.specular.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.emissive.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if self.lighting != false {
            os.write_bool(9, self.lighting)?;
        }
        if let Some(v) = self.pbr.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if self.render_order != 0. {
            os.write_double(11, self.render_order)?;
        }
        if self.double_sided != false {
            os.write_bool(12, self.double_sided)?;
        }
        if self.shininess != 0. {
            os.write_double(13, self.shininess)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Material {
        Material::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.script.clear();
        self.shader_type = ::protobuf::EnumOrUnknown::new(material::ShaderType::VERTEX);
        self.normal_map.clear();
        self.ambient.clear();
        self.diffuse.clear();
        self.specular.clear();
        self.emissive.clear();
        self.lighting = false;
        self.pbr.clear();
        self.render_order = 0.;
        self.double_sided = false;
        self.shininess = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Material {
        static instance: Material = Material {
            header: ::protobuf::MessageField::none(),
            script: ::protobuf::MessageField::none(),
            shader_type: ::protobuf::EnumOrUnknown::from_i32(0),
            normal_map: ::std::string::String::new(),
            ambient: ::protobuf::MessageField::none(),
            diffuse: ::protobuf::MessageField::none(),
            specular: ::protobuf::MessageField::none(),
            emissive: ::protobuf::MessageField::none(),
            lighting: false,
            pbr: ::protobuf::MessageField::none(),
            render_order: 0.,
            double_sided: false,
            shininess: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Material {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Material").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Material {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Material {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Material`
pub mod material {
    #[derive(PartialEq,Clone,Default,Debug)]
    #[derive(::gz_msgs_common::GzMessage)]
    // @@protoc_insertion_point(message:gz.msgs.Material.Script)
    pub struct Script {
        // message fields
        // @@protoc_insertion_point(field:gz.msgs.Material.Script.uri)
        pub uri: ::std::vec::Vec<::std::string::String>,
        // @@protoc_insertion_point(field:gz.msgs.Material.Script.name)
        pub name: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:gz.msgs.Material.Script.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Script {
        fn default() -> &'a Script {
            <Script as ::protobuf::Message>::default_instance()
        }
    }

    impl Script {
        pub fn new() -> Script {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "uri",
                |m: &Script| { &m.uri },
                |m: &mut Script| { &mut m.uri },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "name",
                |m: &Script| { &m.name },
                |m: &mut Script| { &mut m.name },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Script>(
                "Material.Script",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Script {
        const NAME: &'static str = "Script";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.uri.push(is.read_string()?);
                    },
                    18 => {
                        self.name = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.uri {
                my_size += ::protobuf::rt::string_size(1, &value);
            };
            if !self.name.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.name);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.uri {
                os.write_string(1, &v)?;
            };
            if !self.name.is_empty() {
                os.write_string(2, &self.name)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Script {
            Script::new()
        }

        fn clear(&mut self) {
            self.uri.clear();
            self.name.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Script {
            static instance: Script = Script {
                uri: ::std::vec::Vec::new(),
                name: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Script {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Material.Script").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Script {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Script {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    #[derive(::gz_msgs_common::GzMessage)]
    // @@protoc_insertion_point(message:gz.msgs.Material.PBR)
    pub struct PBR {
        // message fields
        // @@protoc_insertion_point(field:gz.msgs.Material.PBR.type)
        pub type_: ::protobuf::EnumOrUnknown<pbr::WorkflowType>,
        // @@protoc_insertion_point(field:gz.msgs.Material.PBR.albedo_map)
        pub albedo_map: ::std::string::String,
        // @@protoc_insertion_point(field:gz.msgs.Material.PBR.normal_map)
        pub normal_map: ::std::string::String,
        // @@protoc_insertion_point(field:gz.msgs.Material.PBR.metalness)
        pub metalness: f64,
        // @@protoc_insertion_point(field:gz.msgs.Material.PBR.metalness_map)
        pub metalness_map: ::std::string::String,
        // @@protoc_insertion_point(field:gz.msgs.Material.PBR.roughness)
        pub roughness: f64,
        // @@protoc_insertion_point(field:gz.msgs.Material.PBR.roughness_map)
        pub roughness_map: ::std::string::String,
        // @@protoc_insertion_point(field:gz.msgs.Material.PBR.glossiness)
        pub glossiness: f64,
        // @@protoc_insertion_point(field:gz.msgs.Material.PBR.glossiness_map)
        pub glossiness_map: ::std::string::String,
        // @@protoc_insertion_point(field:gz.msgs.Material.PBR.specular_map)
        pub specular_map: ::std::string::String,
        // @@protoc_insertion_point(field:gz.msgs.Material.PBR.environment_map)
        pub environment_map: ::std::string::String,
        // @@protoc_insertion_point(field:gz.msgs.Material.PBR.ambient_occlusion_map)
        pub ambient_occlusion_map: ::std::string::String,
        // @@protoc_insertion_point(field:gz.msgs.Material.PBR.emissive_map)
        pub emissive_map: ::std::string::String,
        // @@protoc_insertion_point(field:gz.msgs.Material.PBR.light_map)
        pub light_map: ::std::string::String,
        // @@protoc_insertion_point(field:gz.msgs.Material.PBR.light_map_texcoord_set)
        pub light_map_texcoord_set: u32,
        // special fields
        // @@protoc_insertion_point(special_field:gz.msgs.Material.PBR.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PBR {
        fn default() -> &'a PBR {
            <PBR as ::protobuf::Message>::default_instance()
        }
    }

    impl PBR {
        pub fn new() -> PBR {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(15);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "type",
                |m: &PBR| { &m.type_ },
                |m: &mut PBR| { &mut m.type_ },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "albedo_map",
                |m: &PBR| { &m.albedo_map },
                |m: &mut PBR| { &mut m.albedo_map },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "normal_map",
                |m: &PBR| { &m.normal_map },
                |m: &mut PBR| { &mut m.normal_map },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "metalness",
                |m: &PBR| { &m.metalness },
                |m: &mut PBR| { &mut m.metalness },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "metalness_map",
                |m: &PBR| { &m.metalness_map },
                |m: &mut PBR| { &mut m.metalness_map },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "roughness",
                |m: &PBR| { &m.roughness },
                |m: &mut PBR| { &mut m.roughness },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "roughness_map",
                |m: &PBR| { &m.roughness_map },
                |m: &mut PBR| { &mut m.roughness_map },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "glossiness",
                |m: &PBR| { &m.glossiness },
                |m: &mut PBR| { &mut m.glossiness },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "glossiness_map",
                |m: &PBR| { &m.glossiness_map },
                |m: &mut PBR| { &mut m.glossiness_map },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "specular_map",
                |m: &PBR| { &m.specular_map },
                |m: &mut PBR| { &mut m.specular_map },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "environment_map",
                |m: &PBR| { &m.environment_map },
                |m: &mut PBR| { &mut m.environment_map },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "ambient_occlusion_map",
                |m: &PBR| { &m.ambient_occlusion_map },
                |m: &mut PBR| { &mut m.ambient_occlusion_map },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "emissive_map",
                |m: &PBR| { &m.emissive_map },
                |m: &mut PBR| { &mut m.emissive_map },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "light_map",
                |m: &PBR| { &m.light_map },
                |m: &mut PBR| { &mut m.light_map },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "light_map_texcoord_set",
                |m: &PBR| { &m.light_map_texcoord_set },
                |m: &mut PBR| { &mut m.light_map_texcoord_set },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PBR>(
                "Material.PBR",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for PBR {
        const NAME: &'static str = "PBR";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.type_ = is.read_enum_or_unknown()?;
                    },
                    18 => {
                        self.albedo_map = is.read_string()?;
                    },
                    26 => {
                        self.normal_map = is.read_string()?;
                    },
                    33 => {
                        self.metalness = is.read_double()?;
                    },
                    42 => {
                        self.metalness_map = is.read_string()?;
                    },
                    49 => {
                        self.roughness = is.read_double()?;
                    },
                    58 => {
                        self.roughness_map = is.read_string()?;
                    },
                    65 => {
                        self.glossiness = is.read_double()?;
                    },
                    74 => {
                        self.glossiness_map = is.read_string()?;
                    },
                    82 => {
                        self.specular_map = is.read_string()?;
                    },
                    90 => {
                        self.environment_map = is.read_string()?;
                    },
                    98 => {
                        self.ambient_occlusion_map = is.read_string()?;
                    },
                    106 => {
                        self.emissive_map = is.read_string()?;
                    },
                    114 => {
                        self.light_map = is.read_string()?;
                    },
                    120 => {
                        self.light_map_texcoord_set = is.read_uint32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.type_ != ::protobuf::EnumOrUnknown::new(pbr::WorkflowType::NONE) {
                my_size += ::protobuf::rt::int32_size(1, self.type_.value());
            }
            if !self.albedo_map.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.albedo_map);
            }
            if !self.normal_map.is_empty() {
                my_size += ::protobuf::rt::string_size(3, &self.normal_map);
            }
            if self.metalness != 0. {
                my_size += 1 + 8;
            }
            if !self.metalness_map.is_empty() {
                my_size += ::protobuf::rt::string_size(5, &self.metalness_map);
            }
            if self.roughness != 0. {
                my_size += 1 + 8;
            }
            if !self.roughness_map.is_empty() {
                my_size += ::protobuf::rt::string_size(7, &self.roughness_map);
            }
            if self.glossiness != 0. {
                my_size += 1 + 8;
            }
            if !self.glossiness_map.is_empty() {
                my_size += ::protobuf::rt::string_size(9, &self.glossiness_map);
            }
            if !self.specular_map.is_empty() {
                my_size += ::protobuf::rt::string_size(10, &self.specular_map);
            }
            if !self.environment_map.is_empty() {
                my_size += ::protobuf::rt::string_size(11, &self.environment_map);
            }
            if !self.ambient_occlusion_map.is_empty() {
                my_size += ::protobuf::rt::string_size(12, &self.ambient_occlusion_map);
            }
            if !self.emissive_map.is_empty() {
                my_size += ::protobuf::rt::string_size(13, &self.emissive_map);
            }
            if !self.light_map.is_empty() {
                my_size += ::protobuf::rt::string_size(14, &self.light_map);
            }
            if self.light_map_texcoord_set != 0 {
                my_size += ::protobuf::rt::uint32_size(15, self.light_map_texcoord_set);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.type_ != ::protobuf::EnumOrUnknown::new(pbr::WorkflowType::NONE) {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
            }
            if !self.albedo_map.is_empty() {
                os.write_string(2, &self.albedo_map)?;
            }
            if !self.normal_map.is_empty() {
                os.write_string(3, &self.normal_map)?;
            }
            if self.metalness != 0. {
                os.write_double(4, self.metalness)?;
            }
            if !self.metalness_map.is_empty() {
                os.write_string(5, &self.metalness_map)?;
            }
            if self.roughness != 0. {
                os.write_double(6, self.roughness)?;
            }
            if !self.roughness_map.is_empty() {
                os.write_string(7, &self.roughness_map)?;
            }
            if self.glossiness != 0. {
                os.write_double(8, self.glossiness)?;
            }
            if !self.glossiness_map.is_empty() {
                os.write_string(9, &self.glossiness_map)?;
            }
            if !self.specular_map.is_empty() {
                os.write_string(10, &self.specular_map)?;
            }
            if !self.environment_map.is_empty() {
                os.write_string(11, &self.environment_map)?;
            }
            if !self.ambient_occlusion_map.is_empty() {
                os.write_string(12, &self.ambient_occlusion_map)?;
            }
            if !self.emissive_map.is_empty() {
                os.write_string(13, &self.emissive_map)?;
            }
            if !self.light_map.is_empty() {
                os.write_string(14, &self.light_map)?;
            }
            if self.light_map_texcoord_set != 0 {
                os.write_uint32(15, self.light_map_texcoord_set)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PBR {
            PBR::new()
        }

        fn clear(&mut self) {
            self.type_ = ::protobuf::EnumOrUnknown::new(pbr::WorkflowType::NONE);
            self.albedo_map.clear();
            self.normal_map.clear();
            self.metalness = 0.;
            self.metalness_map.clear();
            self.roughness = 0.;
            self.roughness_map.clear();
            self.glossiness = 0.;
            self.glossiness_map.clear();
            self.specular_map.clear();
            self.environment_map.clear();
            self.ambient_occlusion_map.clear();
            self.emissive_map.clear();
            self.light_map.clear();
            self.light_map_texcoord_set = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PBR {
            static instance: PBR = PBR {
                type_: ::protobuf::EnumOrUnknown::from_i32(0),
                albedo_map: ::std::string::String::new(),
                normal_map: ::std::string::String::new(),
                metalness: 0.,
                metalness_map: ::std::string::String::new(),
                roughness: 0.,
                roughness_map: ::std::string::String::new(),
                glossiness: 0.,
                glossiness_map: ::std::string::String::new(),
                specular_map: ::std::string::String::new(),
                environment_map: ::std::string::String::new(),
                ambient_occlusion_map: ::std::string::String::new(),
                emissive_map: ::std::string::String::new(),
                light_map: ::std::string::String::new(),
                light_map_texcoord_set: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for PBR {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Material.PBR").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PBR {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for PBR {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `PBR`
    pub mod pbr {
        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:gz.msgs.Material.PBR.WorkflowType)
        pub enum WorkflowType {
            // @@protoc_insertion_point(enum_value:gz.msgs.Material.PBR.WorkflowType.NONE)
            NONE = 0,
            // @@protoc_insertion_point(enum_value:gz.msgs.Material.PBR.WorkflowType.METAL)
            METAL = 1,
            // @@protoc_insertion_point(enum_value:gz.msgs.Material.PBR.WorkflowType.SPECULAR)
            SPECULAR = 2,
        }

        impl ::protobuf::Enum for WorkflowType {
            const NAME: &'static str = "WorkflowType";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<WorkflowType> {
                match value {
                    0 => ::std::option::Option::Some(WorkflowType::NONE),
                    1 => ::std::option::Option::Some(WorkflowType::METAL),
                    2 => ::std::option::Option::Some(WorkflowType::SPECULAR),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [WorkflowType] = &[
                WorkflowType::NONE,
                WorkflowType::METAL,
                WorkflowType::SPECULAR,
            ];
        }

        impl ::protobuf::EnumFull for WorkflowType {
            fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().enum_by_package_relative_name("Material.PBR.WorkflowType").unwrap()).clone()
            }

            fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                let index = *self as usize;
                Self::enum_descriptor().value_by_index(index)
            }
        }

        impl ::std::default::Default for WorkflowType {
            fn default() -> Self {
                WorkflowType::NONE
            }
        }

        impl WorkflowType {
            pub(in super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                ::protobuf::reflect::GeneratedEnumDescriptorData::new::<WorkflowType>("Material.PBR.WorkflowType")
            }
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:gz.msgs.Material.ShaderType)
    pub enum ShaderType {
        // @@protoc_insertion_point(enum_value:gz.msgs.Material.ShaderType.VERTEX)
        VERTEX = 0,
        // @@protoc_insertion_point(enum_value:gz.msgs.Material.ShaderType.PIXEL)
        PIXEL = 1,
        // @@protoc_insertion_point(enum_value:gz.msgs.Material.ShaderType.NORMAL_MAP_OBJECT_SPACE)
        NORMAL_MAP_OBJECT_SPACE = 2,
        // @@protoc_insertion_point(enum_value:gz.msgs.Material.ShaderType.NORMAL_MAP_TANGENT_SPACE)
        NORMAL_MAP_TANGENT_SPACE = 3,
    }

    impl ::protobuf::Enum for ShaderType {
        const NAME: &'static str = "ShaderType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ShaderType> {
            match value {
                0 => ::std::option::Option::Some(ShaderType::VERTEX),
                1 => ::std::option::Option::Some(ShaderType::PIXEL),
                2 => ::std::option::Option::Some(ShaderType::NORMAL_MAP_OBJECT_SPACE),
                3 => ::std::option::Option::Some(ShaderType::NORMAL_MAP_TANGENT_SPACE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ShaderType] = &[
            ShaderType::VERTEX,
            ShaderType::PIXEL,
            ShaderType::NORMAL_MAP_OBJECT_SPACE,
            ShaderType::NORMAL_MAP_TANGENT_SPACE,
        ];
    }

    impl ::protobuf::EnumFull for ShaderType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Material.ShaderType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ShaderType {
        fn default() -> Self {
            ShaderType::VERTEX
        }
    }

    impl ShaderType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ShaderType>("Material.ShaderType")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16gz/msgs/material.proto\x12\x07gz.msgs\x1a\x13gz/msgs/color.proto\
    \x1a\x14gz/msgs/header.proto\"\x9b\n\n\x08Material\x12'\n\x06header\x18\
    \x01\x20\x01(\x0b2\x0f.gz.msgs.HeaderR\x06header\x120\n\x06script\x18\
    \x02\x20\x01(\x0b2\x18.gz.msgs.Material.ScriptR\x06script\x12=\n\x0bshad\
    er_type\x18\x03\x20\x01(\x0e2\x1c.gz.msgs.Material.ShaderTypeR\nshaderTy\
    pe\x12\x1d\n\nnormal_map\x18\x04\x20\x01(\tR\tnormalMap\x12(\n\x07ambien\
    t\x18\x05\x20\x01(\x0b2\x0e.gz.msgs.ColorR\x07ambient\x12(\n\x07diffuse\
    \x18\x06\x20\x01(\x0b2\x0e.gz.msgs.ColorR\x07diffuse\x12*\n\x08specular\
    \x18\x07\x20\x01(\x0b2\x0e.gz.msgs.ColorR\x08specular\x12*\n\x08emissive\
    \x18\x08\x20\x01(\x0b2\x0e.gz.msgs.ColorR\x08emissive\x12\x1a\n\x08light\
    ing\x18\t\x20\x01(\x08R\x08lighting\x12'\n\x03pbr\x18\n\x20\x01(\x0b2\
    \x15.gz.msgs.Material.PBRR\x03pbr\x12!\n\x0crender_order\x18\x0b\x20\x01\
    (\x01R\x0brenderOrder\x12!\n\x0cdouble_sided\x18\x0c\x20\x01(\x08R\x0bdo\
    ubleSided\x12\x1c\n\tshininess\x18\r\x20\x01(\x01R\tshininess\x1a.\n\x06\
    Script\x12\x10\n\x03uri\x18\x01\x20\x03(\tR\x03uri\x12\x12\n\x04name\x18\
    \x02\x20\x01(\tR\x04name\x1a\xf0\x04\n\x03PBR\x126\n\x04type\x18\x01\x20\
    \x01(\x0e2\".gz.msgs.Material.PBR.WorkflowTypeR\x04type\x12\x1d\n\nalbed\
    o_map\x18\x02\x20\x01(\tR\talbedoMap\x12\x1d\n\nnormal_map\x18\x03\x20\
    \x01(\tR\tnormalMap\x12\x1c\n\tmetalness\x18\x04\x20\x01(\x01R\tmetalnes\
    s\x12#\n\rmetalness_map\x18\x05\x20\x01(\tR\x0cmetalnessMap\x12\x1c\n\tr\
    oughness\x18\x06\x20\x01(\x01R\troughness\x12#\n\rroughness_map\x18\x07\
    \x20\x01(\tR\x0croughnessMap\x12\x1e\n\nglossiness\x18\x08\x20\x01(\x01R\
    \nglossiness\x12%\n\x0eglossiness_map\x18\t\x20\x01(\tR\rglossinessMap\
    \x12!\n\x0cspecular_map\x18\n\x20\x01(\tR\x0bspecularMap\x12'\n\x0fenvir\
    onment_map\x18\x0b\x20\x01(\tR\x0eenvironmentMap\x122\n\x15ambient_occlu\
    sion_map\x18\x0c\x20\x01(\tR\x13ambientOcclusionMap\x12!\n\x0cemissive_m\
    ap\x18\r\x20\x01(\tR\x0bemissiveMap\x12\x1b\n\tlight_map\x18\x0e\x20\x01\
    (\tR\x08lightMap\x123\n\x16light_map_texcoord_set\x18\x0f\x20\x01(\rR\
    \x13lightMapTexcoordSet\"1\n\x0cWorkflowType\x12\x08\n\x04NONE\x10\0\x12\
    \t\n\x05METAL\x10\x01\x12\x0c\n\x08SPECULAR\x10\x02\"^\n\nShaderType\x12\
    \n\n\x06VERTEX\x10\0\x12\t\n\x05PIXEL\x10\x01\x12\x1b\n\x17NORMAL_MAP_OB\
    JECT_SPACE\x10\x02\x12\x1c\n\x18NORMAL_MAP_TANGENT_SPACE\x10\x03B\x1d\n\
    \x0bcom.gz.msgsB\x0eMaterialProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::color::file_descriptor().clone());
            deps.push(super::header::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Material::generated_message_descriptor_data());
            messages.push(material::Script::generated_message_descriptor_data());
            messages.push(material::PBR::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(material::ShaderType::generated_enum_descriptor_data());
            enums.push(material::pbr::WorkflowType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

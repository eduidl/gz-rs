// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gz/msgs/camerasensor.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_derive::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.CameraSensor)
pub struct CameraSensor {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.horizontal_fov)
    pub horizontal_fov: f64,
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.image_size)
    pub image_size: ::protobuf::MessageField<super::vector2d::Vector2d>,
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.image_format)
    pub image_format: ::std::string::String,
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.near_clip)
    pub near_clip: f64,
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.far_clip)
    pub far_clip: f64,
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.save_enabled)
    pub save_enabled: bool,
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.save_path)
    pub save_path: ::std::string::String,
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.distortion)
    pub distortion: ::protobuf::MessageField<super::distortion::Distortion>,
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.image_noise)
    pub image_noise: ::protobuf::MessageField<super::sensor_noise::SensorNoise>,
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.depth_near_clip)
    pub depth_near_clip: ::protobuf::MessageField<super::double::Double>,
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.depth_far_clip)
    pub depth_far_clip: ::protobuf::MessageField<super::double::Double>,
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.bounding_box_type)
    pub bounding_box_type: ::protobuf::EnumOrUnknown<camera_sensor::BoundingBoxType>,
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.segmentation_type)
    pub segmentation_type: ::protobuf::EnumOrUnknown<camera_sensor::SegmentationType>,
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.lens)
    pub lens: ::protobuf::MessageField<super::lens::Lens>,
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.triggered)
    pub triggered: bool,
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.triggered_topic)
    pub triggered_topic: ::std::string::String,
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.anti_aliasing)
    pub anti_aliasing: i32,
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.visibility_mask)
    pub visibility_mask: u32,
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.is_depth_camera)
    pub is_depth_camera: bool,
    // @@protoc_insertion_point(field:gz.msgs.CameraSensor.pixel_format)
    pub pixel_format: ::protobuf::EnumOrUnknown<super::image::PixelFormatType>,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.CameraSensor.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CameraSensor {
    fn default() -> &'a CameraSensor {
        <CameraSensor as ::protobuf::Message>::default_instance()
    }
}

impl CameraSensor {
    pub fn new() -> CameraSensor {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(21);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &CameraSensor| { &m.header },
            |m: &mut CameraSensor| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "horizontal_fov",
            |m: &CameraSensor| { &m.horizontal_fov },
            |m: &mut CameraSensor| { &mut m.horizontal_fov },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::vector2d::Vector2d>(
            "image_size",
            |m: &CameraSensor| { &m.image_size },
            |m: &mut CameraSensor| { &mut m.image_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "image_format",
            |m: &CameraSensor| { &m.image_format },
            |m: &mut CameraSensor| { &mut m.image_format },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "near_clip",
            |m: &CameraSensor| { &m.near_clip },
            |m: &mut CameraSensor| { &mut m.near_clip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "far_clip",
            |m: &CameraSensor| { &m.far_clip },
            |m: &mut CameraSensor| { &mut m.far_clip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "save_enabled",
            |m: &CameraSensor| { &m.save_enabled },
            |m: &mut CameraSensor| { &mut m.save_enabled },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "save_path",
            |m: &CameraSensor| { &m.save_path },
            |m: &mut CameraSensor| { &mut m.save_path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::distortion::Distortion>(
            "distortion",
            |m: &CameraSensor| { &m.distortion },
            |m: &mut CameraSensor| { &mut m.distortion },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sensor_noise::SensorNoise>(
            "image_noise",
            |m: &CameraSensor| { &m.image_noise },
            |m: &mut CameraSensor| { &mut m.image_noise },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::double::Double>(
            "depth_near_clip",
            |m: &CameraSensor| { &m.depth_near_clip },
            |m: &mut CameraSensor| { &mut m.depth_near_clip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::double::Double>(
            "depth_far_clip",
            |m: &CameraSensor| { &m.depth_far_clip },
            |m: &mut CameraSensor| { &mut m.depth_far_clip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bounding_box_type",
            |m: &CameraSensor| { &m.bounding_box_type },
            |m: &mut CameraSensor| { &mut m.bounding_box_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "segmentation_type",
            |m: &CameraSensor| { &m.segmentation_type },
            |m: &mut CameraSensor| { &mut m.segmentation_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::lens::Lens>(
            "lens",
            |m: &CameraSensor| { &m.lens },
            |m: &mut CameraSensor| { &mut m.lens },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "triggered",
            |m: &CameraSensor| { &m.triggered },
            |m: &mut CameraSensor| { &mut m.triggered },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "triggered_topic",
            |m: &CameraSensor| { &m.triggered_topic },
            |m: &mut CameraSensor| { &mut m.triggered_topic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "anti_aliasing",
            |m: &CameraSensor| { &m.anti_aliasing },
            |m: &mut CameraSensor| { &mut m.anti_aliasing },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "visibility_mask",
            |m: &CameraSensor| { &m.visibility_mask },
            |m: &mut CameraSensor| { &mut m.visibility_mask },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_depth_camera",
            |m: &CameraSensor| { &m.is_depth_camera },
            |m: &mut CameraSensor| { &mut m.is_depth_camera },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pixel_format",
            |m: &CameraSensor| { &m.pixel_format },
            |m: &mut CameraSensor| { &mut m.pixel_format },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CameraSensor>(
            "CameraSensor",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CameraSensor {
    const NAME: &'static str = "CameraSensor";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                17 => {
                    self.horizontal_fov = is.read_double()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.image_size)?;
                },
                34 => {
                    self.image_format = is.read_string()?;
                },
                41 => {
                    self.near_clip = is.read_double()?;
                },
                49 => {
                    self.far_clip = is.read_double()?;
                },
                56 => {
                    self.save_enabled = is.read_bool()?;
                },
                66 => {
                    self.save_path = is.read_string()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.distortion)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.image_noise)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.depth_near_clip)?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.depth_far_clip)?;
                },
                104 => {
                    self.bounding_box_type = is.read_enum_or_unknown()?;
                },
                112 => {
                    self.segmentation_type = is.read_enum_or_unknown()?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lens)?;
                },
                128 => {
                    self.triggered = is.read_bool()?;
                },
                138 => {
                    self.triggered_topic = is.read_string()?;
                },
                144 => {
                    self.anti_aliasing = is.read_int32()?;
                },
                152 => {
                    self.visibility_mask = is.read_uint32()?;
                },
                160 => {
                    self.is_depth_camera = is.read_bool()?;
                },
                168 => {
                    self.pixel_format = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.horizontal_fov != 0. {
            my_size += 1 + 8;
        }
        if let Some(v) = self.image_size.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.image_format.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.image_format);
        }
        if self.near_clip != 0. {
            my_size += 1 + 8;
        }
        if self.far_clip != 0. {
            my_size += 1 + 8;
        }
        if self.save_enabled != false {
            my_size += 1 + 1;
        }
        if !self.save_path.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.save_path);
        }
        if let Some(v) = self.distortion.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.image_noise.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.depth_near_clip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.depth_far_clip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.bounding_box_type != ::protobuf::EnumOrUnknown::new(camera_sensor::BoundingBoxType::NO_BOUNDING_BOX) {
            my_size += ::protobuf::rt::int32_size(13, self.bounding_box_type.value());
        }
        if self.segmentation_type != ::protobuf::EnumOrUnknown::new(camera_sensor::SegmentationType::NO_SEGMENTATION) {
            my_size += ::protobuf::rt::int32_size(14, self.segmentation_type.value());
        }
        if let Some(v) = self.lens.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.triggered != false {
            my_size += 2 + 1;
        }
        if !self.triggered_topic.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.triggered_topic);
        }
        if self.anti_aliasing != 0 {
            my_size += ::protobuf::rt::int32_size(18, self.anti_aliasing);
        }
        if self.visibility_mask != 0 {
            my_size += ::protobuf::rt::uint32_size(19, self.visibility_mask);
        }
        if self.is_depth_camera != false {
            my_size += 2 + 1;
        }
        if self.pixel_format != ::protobuf::EnumOrUnknown::new(super::image::PixelFormatType::UNKNOWN_PIXEL_FORMAT) {
            my_size += ::protobuf::rt::int32_size(21, self.pixel_format.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.horizontal_fov != 0. {
            os.write_double(2, self.horizontal_fov)?;
        }
        if let Some(v) = self.image_size.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if !self.image_format.is_empty() {
            os.write_string(4, &self.image_format)?;
        }
        if self.near_clip != 0. {
            os.write_double(5, self.near_clip)?;
        }
        if self.far_clip != 0. {
            os.write_double(6, self.far_clip)?;
        }
        if self.save_enabled != false {
            os.write_bool(7, self.save_enabled)?;
        }
        if !self.save_path.is_empty() {
            os.write_string(8, &self.save_path)?;
        }
        if let Some(v) = self.distortion.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.image_noise.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.depth_near_clip.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.depth_far_clip.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if self.bounding_box_type != ::protobuf::EnumOrUnknown::new(camera_sensor::BoundingBoxType::NO_BOUNDING_BOX) {
            os.write_enum(13, ::protobuf::EnumOrUnknown::value(&self.bounding_box_type))?;
        }
        if self.segmentation_type != ::protobuf::EnumOrUnknown::new(camera_sensor::SegmentationType::NO_SEGMENTATION) {
            os.write_enum(14, ::protobuf::EnumOrUnknown::value(&self.segmentation_type))?;
        }
        if let Some(v) = self.lens.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if self.triggered != false {
            os.write_bool(16, self.triggered)?;
        }
        if !self.triggered_topic.is_empty() {
            os.write_string(17, &self.triggered_topic)?;
        }
        if self.anti_aliasing != 0 {
            os.write_int32(18, self.anti_aliasing)?;
        }
        if self.visibility_mask != 0 {
            os.write_uint32(19, self.visibility_mask)?;
        }
        if self.is_depth_camera != false {
            os.write_bool(20, self.is_depth_camera)?;
        }
        if self.pixel_format != ::protobuf::EnumOrUnknown::new(super::image::PixelFormatType::UNKNOWN_PIXEL_FORMAT) {
            os.write_enum(21, ::protobuf::EnumOrUnknown::value(&self.pixel_format))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CameraSensor {
        CameraSensor::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.horizontal_fov = 0.;
        self.image_size.clear();
        self.image_format.clear();
        self.near_clip = 0.;
        self.far_clip = 0.;
        self.save_enabled = false;
        self.save_path.clear();
        self.distortion.clear();
        self.image_noise.clear();
        self.depth_near_clip.clear();
        self.depth_far_clip.clear();
        self.bounding_box_type = ::protobuf::EnumOrUnknown::new(camera_sensor::BoundingBoxType::NO_BOUNDING_BOX);
        self.segmentation_type = ::protobuf::EnumOrUnknown::new(camera_sensor::SegmentationType::NO_SEGMENTATION);
        self.lens.clear();
        self.triggered = false;
        self.triggered_topic.clear();
        self.anti_aliasing = 0;
        self.visibility_mask = 0;
        self.is_depth_camera = false;
        self.pixel_format = ::protobuf::EnumOrUnknown::new(super::image::PixelFormatType::UNKNOWN_PIXEL_FORMAT);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CameraSensor {
        static instance: CameraSensor = CameraSensor {
            header: ::protobuf::MessageField::none(),
            horizontal_fov: 0.,
            image_size: ::protobuf::MessageField::none(),
            image_format: ::std::string::String::new(),
            near_clip: 0.,
            far_clip: 0.,
            save_enabled: false,
            save_path: ::std::string::String::new(),
            distortion: ::protobuf::MessageField::none(),
            image_noise: ::protobuf::MessageField::none(),
            depth_near_clip: ::protobuf::MessageField::none(),
            depth_far_clip: ::protobuf::MessageField::none(),
            bounding_box_type: ::protobuf::EnumOrUnknown::from_i32(0),
            segmentation_type: ::protobuf::EnumOrUnknown::from_i32(0),
            lens: ::protobuf::MessageField::none(),
            triggered: false,
            triggered_topic: ::std::string::String::new(),
            anti_aliasing: 0,
            visibility_mask: 0,
            is_depth_camera: false,
            pixel_format: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CameraSensor {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CameraSensor").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CameraSensor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CameraSensor {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CameraSensor`
pub mod camera_sensor {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:gz.msgs.CameraSensor.BoundingBoxType)
    pub enum BoundingBoxType {
        // @@protoc_insertion_point(enum_value:gz.msgs.CameraSensor.BoundingBoxType.NO_BOUNDING_BOX)
        NO_BOUNDING_BOX = 0,
        // @@protoc_insertion_point(enum_value:gz.msgs.CameraSensor.BoundingBoxType.FULL_BOX_2D)
        FULL_BOX_2D = 1,
        // @@protoc_insertion_point(enum_value:gz.msgs.CameraSensor.BoundingBoxType.VISIBLE_BOX_2D)
        VISIBLE_BOX_2D = 2,
        // @@protoc_insertion_point(enum_value:gz.msgs.CameraSensor.BoundingBoxType.BOX_3D)
        BOX_3D = 3,
    }

    impl ::protobuf::Enum for BoundingBoxType {
        const NAME: &'static str = "BoundingBoxType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<BoundingBoxType> {
            match value {
                0 => ::std::option::Option::Some(BoundingBoxType::NO_BOUNDING_BOX),
                1 => ::std::option::Option::Some(BoundingBoxType::FULL_BOX_2D),
                2 => ::std::option::Option::Some(BoundingBoxType::VISIBLE_BOX_2D),
                3 => ::std::option::Option::Some(BoundingBoxType::BOX_3D),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [BoundingBoxType] = &[
            BoundingBoxType::NO_BOUNDING_BOX,
            BoundingBoxType::FULL_BOX_2D,
            BoundingBoxType::VISIBLE_BOX_2D,
            BoundingBoxType::BOX_3D,
        ];
    }

    impl ::protobuf::EnumFull for BoundingBoxType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CameraSensor.BoundingBoxType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for BoundingBoxType {
        fn default() -> Self {
            BoundingBoxType::NO_BOUNDING_BOX
        }
    }

    impl BoundingBoxType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<BoundingBoxType>("CameraSensor.BoundingBoxType")
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:gz.msgs.CameraSensor.SegmentationType)
    pub enum SegmentationType {
        // @@protoc_insertion_point(enum_value:gz.msgs.CameraSensor.SegmentationType.NO_SEGMENTATION)
        NO_SEGMENTATION = 0,
        // @@protoc_insertion_point(enum_value:gz.msgs.CameraSensor.SegmentationType.SEMANTIC)
        SEMANTIC = 1,
        // @@protoc_insertion_point(enum_value:gz.msgs.CameraSensor.SegmentationType.PANOPTIC)
        PANOPTIC = 2,
    }

    impl ::protobuf::Enum for SegmentationType {
        const NAME: &'static str = "SegmentationType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<SegmentationType> {
            match value {
                0 => ::std::option::Option::Some(SegmentationType::NO_SEGMENTATION),
                1 => ::std::option::Option::Some(SegmentationType::SEMANTIC),
                2 => ::std::option::Option::Some(SegmentationType::PANOPTIC),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [SegmentationType] = &[
            SegmentationType::NO_SEGMENTATION,
            SegmentationType::SEMANTIC,
            SegmentationType::PANOPTIC,
        ];
    }

    impl ::protobuf::EnumFull for SegmentationType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CameraSensor.SegmentationType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for SegmentationType {
        fn default() -> Self {
            SegmentationType::NO_SEGMENTATION
        }
    }

    impl SegmentationType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<SegmentationType>("CameraSensor.SegmentationType")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1agz/msgs/camerasensor.proto\x12\x07gz.msgs\x1a\x18gz/msgs/distortio\
    n.proto\x1a\x14gz/msgs/double.proto\x1a\x14gz/msgs/header.proto\x1a\x13g\
    z/msgs/image.proto\x1a\x12gz/msgs/lens.proto\x1a\x1agz/msgs/sensor_noise\
    .proto\x1a\x16gz/msgs/vector2d.proto\"\xea\x08\n\x0cCameraSensor\x12'\n\
    \x06header\x18\x01\x20\x01(\x0b2\x0f.gz.msgs.HeaderR\x06header\x12%\n\
    \x0ehorizontal_fov\x18\x02\x20\x01(\x01R\rhorizontalFov\x120\n\nimage_si\
    ze\x18\x03\x20\x01(\x0b2\x11.gz.msgs.Vector2dR\timageSize\x12!\n\x0cimag\
    e_format\x18\x04\x20\x01(\tR\x0bimageFormat\x12\x1b\n\tnear_clip\x18\x05\
    \x20\x01(\x01R\x08nearClip\x12\x19\n\x08far_clip\x18\x06\x20\x01(\x01R\
    \x07farClip\x12!\n\x0csave_enabled\x18\x07\x20\x01(\x08R\x0bsaveEnabled\
    \x12\x1b\n\tsave_path\x18\x08\x20\x01(\tR\x08savePath\x123\n\ndistortion\
    \x18\t\x20\x01(\x0b2\x13.gz.msgs.DistortionR\ndistortion\x125\n\x0bimage\
    _noise\x18\n\x20\x01(\x0b2\x14.gz.msgs.SensorNoiseR\nimageNoise\x127\n\
    \x0fdepth_near_clip\x18\x0b\x20\x01(\x0b2\x0f.gz.msgs.DoubleR\rdepthNear\
    Clip\x125\n\x0edepth_far_clip\x18\x0c\x20\x01(\x0b2\x0f.gz.msgs.DoubleR\
    \x0cdepthFarClip\x12Q\n\x11bounding_box_type\x18\r\x20\x01(\x0e2%.gz.msg\
    s.CameraSensor.BoundingBoxTypeR\x0fboundingBoxType\x12S\n\x11segmentatio\
    n_type\x18\x0e\x20\x01(\x0e2&.gz.msgs.CameraSensor.SegmentationTypeR\x10\
    segmentationType\x12!\n\x04lens\x18\x0f\x20\x01(\x0b2\r.gz.msgs.LensR\
    \x04lens\x12\x1c\n\ttriggered\x18\x10\x20\x01(\x08R\ttriggered\x12'\n\
    \x0ftriggered_topic\x18\x11\x20\x01(\tR\x0etriggeredTopic\x12#\n\ranti_a\
    liasing\x18\x12\x20\x01(\x05R\x0cantiAliasing\x12'\n\x0fvisibility_mask\
    \x18\x13\x20\x01(\rR\x0evisibilityMask\x12&\n\x0fis_depth_camera\x18\x14\
    \x20\x01(\x08R\risDepthCamera\x12;\n\x0cpixel_format\x18\x15\x20\x01(\
    \x0e2\x18.gz.msgs.PixelFormatTypeR\x0bpixelFormat\"W\n\x0fBoundingBoxTyp\
    e\x12\x13\n\x0fNO_BOUNDING_BOX\x10\0\x12\x0f\n\x0bFULL_BOX_2D\x10\x01\
    \x12\x12\n\x0eVISIBLE_BOX_2D\x10\x02\x12\n\n\x06BOX_3D\x10\x03\"C\n\x10S\
    egmentationType\x12\x13\n\x0fNO_SEGMENTATION\x10\0\x12\x0c\n\x08SEMANTIC\
    \x10\x01\x12\x0c\n\x08PANOPTIC\x10\x02B!\n\x0bcom.gz.msgsB\x12CameraSens\
    orProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(7);
            deps.push(super::distortion::file_descriptor().clone());
            deps.push(super::double::file_descriptor().clone());
            deps.push(super::header::file_descriptor().clone());
            deps.push(super::image::file_descriptor().clone());
            deps.push(super::lens::file_descriptor().clone());
            deps.push(super::sensor_noise::file_descriptor().clone());
            deps.push(super::vector2d::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(CameraSensor::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(camera_sensor::BoundingBoxType::generated_enum_descriptor_data());
            enums.push(camera_sensor::SegmentationType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

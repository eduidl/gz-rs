// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gz/msgs/model.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_common::GzMessage)]
// @@protoc_insertion_point(message:gz.msgs.Model)
pub struct Model {
    // message fields
    // @@protoc_insertion_point(field:gz.msgs.Model.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:gz.msgs.Model.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:gz.msgs.Model.id)
    pub id: u32,
    // @@protoc_insertion_point(field:gz.msgs.Model.is_static)
    pub is_static: bool,
    // @@protoc_insertion_point(field:gz.msgs.Model.pose)
    pub pose: ::protobuf::MessageField<super::pose::Pose>,
    // @@protoc_insertion_point(field:gz.msgs.Model.joint)
    pub joint: ::std::vec::Vec<super::joint::Joint>,
    // @@protoc_insertion_point(field:gz.msgs.Model.link)
    pub link: ::std::vec::Vec<super::link::Link>,
    // @@protoc_insertion_point(field:gz.msgs.Model.deleted)
    pub deleted: bool,
    // @@protoc_insertion_point(field:gz.msgs.Model.visual)
    pub visual: ::std::vec::Vec<super::visual::Visual>,
    // @@protoc_insertion_point(field:gz.msgs.Model.scale)
    pub scale: ::protobuf::MessageField<super::vector3d::Vector3d>,
    // @@protoc_insertion_point(field:gz.msgs.Model.self_collide)
    pub self_collide: bool,
    // @@protoc_insertion_point(field:gz.msgs.Model.model)
    pub model: ::std::vec::Vec<Model>,
    // @@protoc_insertion_point(field:gz.msgs.Model.bounding_box)
    pub bounding_box: ::protobuf::MessageField<super::axis_aligned_box::AxisAlignedBox>,
    // special fields
    // @@protoc_insertion_point(special_field:gz.msgs.Model.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Model {
    fn default() -> &'a Model {
        <Model as ::protobuf::Message>::default_instance()
    }
}

impl Model {
    pub fn new() -> Model {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &Model| { &m.header },
            |m: &mut Model| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Model| { &m.name },
            |m: &mut Model| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Model| { &m.id },
            |m: &mut Model| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_static",
            |m: &Model| { &m.is_static },
            |m: &mut Model| { &mut m.is_static },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pose::Pose>(
            "pose",
            |m: &Model| { &m.pose },
            |m: &mut Model| { &mut m.pose },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "joint",
            |m: &Model| { &m.joint },
            |m: &mut Model| { &mut m.joint },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "link",
            |m: &Model| { &m.link },
            |m: &mut Model| { &mut m.link },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "deleted",
            |m: &Model| { &m.deleted },
            |m: &mut Model| { &mut m.deleted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "visual",
            |m: &Model| { &m.visual },
            |m: &mut Model| { &mut m.visual },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::vector3d::Vector3d>(
            "scale",
            |m: &Model| { &m.scale },
            |m: &mut Model| { &mut m.scale },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "self_collide",
            |m: &Model| { &m.self_collide },
            |m: &mut Model| { &mut m.self_collide },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "model",
            |m: &Model| { &m.model },
            |m: &mut Model| { &mut m.model },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::axis_aligned_box::AxisAlignedBox>(
            "bounding_box",
            |m: &Model| { &m.bounding_box },
            |m: &mut Model| { &mut m.bounding_box },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Model>(
            "Model",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Model {
    const NAME: &'static str = "Model";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                24 => {
                    self.id = is.read_uint32()?;
                },
                32 => {
                    self.is_static = is.read_bool()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pose)?;
                },
                50 => {
                    self.joint.push(is.read_message()?);
                },
                58 => {
                    self.link.push(is.read_message()?);
                },
                64 => {
                    self.deleted = is.read_bool()?;
                },
                74 => {
                    self.visual.push(is.read_message()?);
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.scale)?;
                },
                88 => {
                    self.self_collide = is.read_bool()?;
                },
                98 => {
                    self.model.push(is.read_message()?);
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.bounding_box)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.id);
        }
        if self.is_static != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.pose.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.joint {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.link {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.deleted != false {
            my_size += 1 + 1;
        }
        for value in &self.visual {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.scale.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.self_collide != false {
            my_size += 1 + 1;
        }
        for value in &self.model {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.bounding_box.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.id != 0 {
            os.write_uint32(3, self.id)?;
        }
        if self.is_static != false {
            os.write_bool(4, self.is_static)?;
        }
        if let Some(v) = self.pose.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        for v in &self.joint {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        for v in &self.link {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if self.deleted != false {
            os.write_bool(8, self.deleted)?;
        }
        for v in &self.visual {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        if let Some(v) = self.scale.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if self.self_collide != false {
            os.write_bool(11, self.self_collide)?;
        }
        for v in &self.model {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        if let Some(v) = self.bounding_box.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Model {
        Model::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.name.clear();
        self.id = 0;
        self.is_static = false;
        self.pose.clear();
        self.joint.clear();
        self.link.clear();
        self.deleted = false;
        self.visual.clear();
        self.scale.clear();
        self.self_collide = false;
        self.model.clear();
        self.bounding_box.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Model {
        static instance: Model = Model {
            header: ::protobuf::MessageField::none(),
            name: ::std::string::String::new(),
            id: 0,
            is_static: false,
            pose: ::protobuf::MessageField::none(),
            joint: ::std::vec::Vec::new(),
            link: ::std::vec::Vec::new(),
            deleted: false,
            visual: ::std::vec::Vec::new(),
            scale: ::protobuf::MessageField::none(),
            self_collide: false,
            model: ::std::vec::Vec::new(),
            bounding_box: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Model {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Model").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Model {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Model {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13gz/msgs/model.proto\x12\x07gz.msgs\x1a\x1egz/msgs/axis_aligned_box\
    .proto\x1a\x13gz/msgs/joint.proto\x1a\x12gz/msgs/link.proto\x1a\x12gz/ms\
    gs/pose.proto\x1a\x14gz/msgs/visual.proto\x1a\x16gz/msgs/vector3d.proto\
    \x1a\x14gz/msgs/header.proto\"\xce\x03\n\x05Model\x12'\n\x06header\x18\
    \x01\x20\x01(\x0b2\x0f.gz.msgs.HeaderR\x06header\x12\x12\n\x04name\x18\
    \x02\x20\x01(\tR\x04name\x12\x0e\n\x02id\x18\x03\x20\x01(\rR\x02id\x12\
    \x1b\n\tis_static\x18\x04\x20\x01(\x08R\x08isStatic\x12!\n\x04pose\x18\
    \x05\x20\x01(\x0b2\r.gz.msgs.PoseR\x04pose\x12$\n\x05joint\x18\x06\x20\
    \x03(\x0b2\x0e.gz.msgs.JointR\x05joint\x12!\n\x04link\x18\x07\x20\x03(\
    \x0b2\r.gz.msgs.LinkR\x04link\x12\x18\n\x07deleted\x18\x08\x20\x01(\x08R\
    \x07deleted\x12'\n\x06visual\x18\t\x20\x03(\x0b2\x0f.gz.msgs.VisualR\x06\
    visual\x12'\n\x05scale\x18\n\x20\x01(\x0b2\x11.gz.msgs.Vector3dR\x05scal\
    e\x12!\n\x0cself_collide\x18\x0b\x20\x01(\x08R\x0bselfCollide\x12$\n\x05\
    model\x18\x0c\x20\x03(\x0b2\x0e.gz.msgs.ModelR\x05model\x12:\n\x0cboundi\
    ng_box\x18\r\x20\x01(\x0b2\x17.gz.msgs.AxisAlignedBoxR\x0bboundingBoxB\
    \x1a\n\x0bcom.gz.msgsB\x0bModelProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(7);
            deps.push(super::axis_aligned_box::file_descriptor().clone());
            deps.push(super::joint::file_descriptor().clone());
            deps.push(super::link::file_descriptor().clone());
            deps.push(super::pose::file_descriptor().clone());
            deps.push(super::visual::file_descriptor().clone());
            deps.push(super::vector3d::file_descriptor().clone());
            deps.push(super::header::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Model::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ignition/msgs/log_status.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_derive::IgnMessage)]
// @@protoc_insertion_point(message:ignition.msgs.LogStatus)
pub struct LogStatus {
    // message fields
    // @@protoc_insertion_point(field:ignition.msgs.LogStatus.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:ignition.msgs.LogStatus.sim_time)
    pub sim_time: ::protobuf::MessageField<super::time::Time>,
    // @@protoc_insertion_point(field:ignition.msgs.LogStatus.log_file)
    pub log_file: ::protobuf::MessageField<log_status::LogFile>,
    // special fields
    // @@protoc_insertion_point(special_field:ignition.msgs.LogStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LogStatus {
    fn default() -> &'a LogStatus {
        <LogStatus as ::protobuf::Message>::default_instance()
    }
}

impl LogStatus {
    pub fn new() -> LogStatus {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &LogStatus| { &m.header },
            |m: &mut LogStatus| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::time::Time>(
            "sim_time",
            |m: &LogStatus| { &m.sim_time },
            |m: &mut LogStatus| { &mut m.sim_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, log_status::LogFile>(
            "log_file",
            |m: &LogStatus| { &m.log_file },
            |m: &mut LogStatus| { &mut m.log_file },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LogStatus>(
            "LogStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LogStatus {
    const NAME: &'static str = "LogStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sim_time)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.log_file)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sim_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.log_file.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.sim_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.log_file.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LogStatus {
        LogStatus::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.sim_time.clear();
        self.log_file.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LogStatus {
        static instance: LogStatus = LogStatus {
            header: ::protobuf::MessageField::none(),
            sim_time: ::protobuf::MessageField::none(),
            log_file: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LogStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LogStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LogStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `LogStatus`
pub mod log_status {
    #[derive(PartialEq,Clone,Default,Debug)]
    #[derive(::gz_msgs_derive::IgnMessage)]
    // @@protoc_insertion_point(message:ignition.msgs.LogStatus.LogFile)
    pub struct LogFile {
        // message fields
        // @@protoc_insertion_point(field:ignition.msgs.LogStatus.LogFile.uri)
        pub uri: ::std::string::String,
        // @@protoc_insertion_point(field:ignition.msgs.LogStatus.LogFile.base_path)
        pub base_path: ::std::string::String,
        // @@protoc_insertion_point(field:ignition.msgs.LogStatus.LogFile.full_path)
        pub full_path: ::std::string::String,
        // @@protoc_insertion_point(field:ignition.msgs.LogStatus.LogFile.size)
        pub size: f32,
        // @@protoc_insertion_point(field:ignition.msgs.LogStatus.LogFile.size_units)
        pub size_units: ::protobuf::EnumOrUnknown<log_file::Units>,
        // @@protoc_insertion_point(field:ignition.msgs.LogStatus.LogFile.record_resources)
        pub record_resources: bool,
        // special fields
        // @@protoc_insertion_point(special_field:ignition.msgs.LogStatus.LogFile.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a LogFile {
        fn default() -> &'a LogFile {
            <LogFile as ::protobuf::Message>::default_instance()
        }
    }

    impl LogFile {
        pub fn new() -> LogFile {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(6);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "uri",
                |m: &LogFile| { &m.uri },
                |m: &mut LogFile| { &mut m.uri },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "base_path",
                |m: &LogFile| { &m.base_path },
                |m: &mut LogFile| { &mut m.base_path },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "full_path",
                |m: &LogFile| { &m.full_path },
                |m: &mut LogFile| { &mut m.full_path },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size",
                |m: &LogFile| { &m.size },
                |m: &mut LogFile| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "size_units",
                |m: &LogFile| { &m.size_units },
                |m: &mut LogFile| { &mut m.size_units },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "record_resources",
                |m: &LogFile| { &m.record_resources },
                |m: &mut LogFile| { &mut m.record_resources },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LogFile>(
                "LogStatus.LogFile",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for LogFile {
        const NAME: &'static str = "LogFile";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.uri = is.read_string()?;
                    },
                    18 => {
                        self.base_path = is.read_string()?;
                    },
                    26 => {
                        self.full_path = is.read_string()?;
                    },
                    37 => {
                        self.size = is.read_float()?;
                    },
                    40 => {
                        self.size_units = is.read_enum_or_unknown()?;
                    },
                    48 => {
                        self.record_resources = is.read_bool()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.uri.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.uri);
            }
            if !self.base_path.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.base_path);
            }
            if !self.full_path.is_empty() {
                my_size += ::protobuf::rt::string_size(3, &self.full_path);
            }
            if self.size != 0. {
                my_size += 1 + 4;
            }
            if self.size_units != ::protobuf::EnumOrUnknown::new(log_file::Units::BYTES) {
                my_size += ::protobuf::rt::int32_size(5, self.size_units.value());
            }
            if self.record_resources != false {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.uri.is_empty() {
                os.write_string(1, &self.uri)?;
            }
            if !self.base_path.is_empty() {
                os.write_string(2, &self.base_path)?;
            }
            if !self.full_path.is_empty() {
                os.write_string(3, &self.full_path)?;
            }
            if self.size != 0. {
                os.write_float(4, self.size)?;
            }
            if self.size_units != ::protobuf::EnumOrUnknown::new(log_file::Units::BYTES) {
                os.write_enum(5, ::protobuf::EnumOrUnknown::value(&self.size_units))?;
            }
            if self.record_resources != false {
                os.write_bool(6, self.record_resources)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> LogFile {
            LogFile::new()
        }

        fn clear(&mut self) {
            self.uri.clear();
            self.base_path.clear();
            self.full_path.clear();
            self.size = 0.;
            self.size_units = ::protobuf::EnumOrUnknown::new(log_file::Units::BYTES);
            self.record_resources = false;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static LogFile {
            static instance: LogFile = LogFile {
                uri: ::std::string::String::new(),
                base_path: ::std::string::String::new(),
                full_path: ::std::string::String::new(),
                size: 0.,
                size_units: ::protobuf::EnumOrUnknown::from_i32(0),
                record_resources: false,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for LogFile {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("LogStatus.LogFile").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for LogFile {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for LogFile {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `LogFile`
    pub mod log_file {
        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:ignition.msgs.LogStatus.LogFile.Units)
        pub enum Units {
            // @@protoc_insertion_point(enum_value:ignition.msgs.LogStatus.LogFile.Units.BYTES)
            BYTES = 0,
            // @@protoc_insertion_point(enum_value:ignition.msgs.LogStatus.LogFile.Units.K_BYTES)
            K_BYTES = 1,
            // @@protoc_insertion_point(enum_value:ignition.msgs.LogStatus.LogFile.Units.M_BYTES)
            M_BYTES = 2,
            // @@protoc_insertion_point(enum_value:ignition.msgs.LogStatus.LogFile.Units.G_BYTES)
            G_BYTES = 3,
        }

        impl ::protobuf::Enum for Units {
            const NAME: &'static str = "Units";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<Units> {
                match value {
                    0 => ::std::option::Option::Some(Units::BYTES),
                    1 => ::std::option::Option::Some(Units::K_BYTES),
                    2 => ::std::option::Option::Some(Units::M_BYTES),
                    3 => ::std::option::Option::Some(Units::G_BYTES),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [Units] = &[
                Units::BYTES,
                Units::K_BYTES,
                Units::M_BYTES,
                Units::G_BYTES,
            ];
        }

        impl ::protobuf::EnumFull for Units {
            fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().enum_by_package_relative_name("LogStatus.LogFile.Units").unwrap()).clone()
            }

            fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                let index = *self as usize;
                Self::enum_descriptor().value_by_index(index)
            }
        }

        impl ::std::default::Default for Units {
            fn default() -> Self {
                Units::BYTES
            }
        }

        impl Units {
            pub(in super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Units>("LogStatus.LogFile.Units")
            }
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1eignition/msgs/log_status.proto\x12\rignition.msgs\x1a\x18ignition/\
    msgs/time.proto\x1a\x1aignition/msgs/header.proto\"\xc0\x03\n\tLogStatus\
    \x12-\n\x06header\x18\x01\x20\x01(\x0b2\x15.ignition.msgs.HeaderR\x06hea\
    der\x12.\n\x08sim_time\x18\x02\x20\x01(\x0b2\x13.ignition.msgs.TimeR\x07\
    simTime\x12;\n\x08log_file\x18\x03\x20\x01(\x0b2\x20.ignition.msgs.LogSt\
    atus.LogFileR\x07logFile\x1a\x96\x02\n\x07LogFile\x12\x10\n\x03uri\x18\
    \x01\x20\x01(\tR\x03uri\x12\x1b\n\tbase_path\x18\x02\x20\x01(\tR\x08base\
    Path\x12\x1b\n\tfull_path\x18\x03\x20\x01(\tR\x08fullPath\x12\x12\n\x04s\
    ize\x18\x04\x20\x01(\x02R\x04size\x12E\n\nsize_units\x18\x05\x20\x01(\
    \x0e2&.ignition.msgs.LogStatus.LogFile.UnitsR\tsizeUnits\x12)\n\x10recor\
    d_resources\x18\x06\x20\x01(\x08R\x0frecordResources\"9\n\x05Units\x12\t\
    \n\x05BYTES\x10\0\x12\x0b\n\x07K_BYTES\x10\x01\x12\x0b\n\x07M_BYTES\x10\
    \x02\x12\x0b\n\x07G_BYTES\x10\x03B$\n\x11com.ignition.msgsB\x0fLogStatus\
    Protosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::time::file_descriptor().clone());
            deps.push(super::header::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(LogStatus::generated_message_descriptor_data());
            messages.push(log_status::LogFile::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(log_status::log_file::Units::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

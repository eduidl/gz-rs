// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ignition/msgs/marker.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_derive::IgnMessage)]
// @@protoc_insertion_point(message:ignition.msgs.Marker)
pub struct Marker {
    // message fields
    // @@protoc_insertion_point(field:ignition.msgs.Marker.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:ignition.msgs.Marker.action)
    pub action: ::protobuf::EnumOrUnknown<marker::Action>,
    // @@protoc_insertion_point(field:ignition.msgs.Marker.ns)
    pub ns: ::std::string::String,
    // @@protoc_insertion_point(field:ignition.msgs.Marker.id)
    pub id: u64,
    // @@protoc_insertion_point(field:ignition.msgs.Marker.layer)
    pub layer: i32,
    // @@protoc_insertion_point(field:ignition.msgs.Marker.type)
    pub type_: ::protobuf::EnumOrUnknown<marker::Type>,
    // @@protoc_insertion_point(field:ignition.msgs.Marker.lifetime)
    pub lifetime: ::protobuf::MessageField<super::time::Time>,
    // @@protoc_insertion_point(field:ignition.msgs.Marker.pose)
    pub pose: ::protobuf::MessageField<super::pose::Pose>,
    // @@protoc_insertion_point(field:ignition.msgs.Marker.scale)
    pub scale: ::protobuf::MessageField<super::vector3d::Vector3d>,
    // @@protoc_insertion_point(field:ignition.msgs.Marker.material)
    pub material: ::protobuf::MessageField<super::material::Material>,
    // @@protoc_insertion_point(field:ignition.msgs.Marker.point)
    pub point: ::std::vec::Vec<super::vector3d::Vector3d>,
    // @@protoc_insertion_point(field:ignition.msgs.Marker.text)
    pub text: ::std::string::String,
    // @@protoc_insertion_point(field:ignition.msgs.Marker.parent)
    pub parent: ::std::string::String,
    // @@protoc_insertion_point(field:ignition.msgs.Marker.visibility)
    pub visibility: ::protobuf::EnumOrUnknown<marker::Visibility>,
    // special fields
    // @@protoc_insertion_point(special_field:ignition.msgs.Marker.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Marker {
    fn default() -> &'a Marker {
        <Marker as ::protobuf::Message>::default_instance()
    }
}

impl Marker {
    pub fn new() -> Marker {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &Marker| { &m.header },
            |m: &mut Marker| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "action",
            |m: &Marker| { &m.action },
            |m: &mut Marker| { &mut m.action },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ns",
            |m: &Marker| { &m.ns },
            |m: &mut Marker| { &mut m.ns },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Marker| { &m.id },
            |m: &mut Marker| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "layer",
            |m: &Marker| { &m.layer },
            |m: &mut Marker| { &mut m.layer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Marker| { &m.type_ },
            |m: &mut Marker| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::time::Time>(
            "lifetime",
            |m: &Marker| { &m.lifetime },
            |m: &mut Marker| { &mut m.lifetime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pose::Pose>(
            "pose",
            |m: &Marker| { &m.pose },
            |m: &mut Marker| { &mut m.pose },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::vector3d::Vector3d>(
            "scale",
            |m: &Marker| { &m.scale },
            |m: &mut Marker| { &mut m.scale },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::material::Material>(
            "material",
            |m: &Marker| { &m.material },
            |m: &mut Marker| { &mut m.material },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "point",
            |m: &Marker| { &m.point },
            |m: &mut Marker| { &mut m.point },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "text",
            |m: &Marker| { &m.text },
            |m: &mut Marker| { &mut m.text },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "parent",
            |m: &Marker| { &m.parent },
            |m: &mut Marker| { &mut m.parent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "visibility",
            |m: &Marker| { &m.visibility },
            |m: &mut Marker| { &mut m.visibility },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Marker>(
            "Marker",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Marker {
    const NAME: &'static str = "Marker";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                16 => {
                    self.action = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.ns = is.read_string()?;
                },
                32 => {
                    self.id = is.read_uint64()?;
                },
                40 => {
                    self.layer = is.read_int32()?;
                },
                48 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lifetime)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pose)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.scale)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.material)?;
                },
                90 => {
                    self.point.push(is.read_message()?);
                },
                98 => {
                    self.text = is.read_string()?;
                },
                106 => {
                    self.parent = is.read_string()?;
                },
                112 => {
                    self.visibility = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.action != ::protobuf::EnumOrUnknown::new(marker::Action::ADD_MODIFY) {
            my_size += ::protobuf::rt::int32_size(2, self.action.value());
        }
        if !self.ns.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.ns);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.id);
        }
        if self.layer != 0 {
            my_size += ::protobuf::rt::int32_size(5, self.layer);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(marker::Type::NONE) {
            my_size += ::protobuf::rt::int32_size(6, self.type_.value());
        }
        if let Some(v) = self.lifetime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.pose.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.scale.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.material.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.point {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.text);
        }
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.parent);
        }
        if self.visibility != ::protobuf::EnumOrUnknown::new(marker::Visibility::GUI) {
            my_size += ::protobuf::rt::int32_size(14, self.visibility.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.action != ::protobuf::EnumOrUnknown::new(marker::Action::ADD_MODIFY) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.action))?;
        }
        if !self.ns.is_empty() {
            os.write_string(3, &self.ns)?;
        }
        if self.id != 0 {
            os.write_uint64(4, self.id)?;
        }
        if self.layer != 0 {
            os.write_int32(5, self.layer)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(marker::Type::NONE) {
            os.write_enum(6, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if let Some(v) = self.lifetime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.pose.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.scale.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.material.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        for v in &self.point {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        if !self.text.is_empty() {
            os.write_string(12, &self.text)?;
        }
        if !self.parent.is_empty() {
            os.write_string(13, &self.parent)?;
        }
        if self.visibility != ::protobuf::EnumOrUnknown::new(marker::Visibility::GUI) {
            os.write_enum(14, ::protobuf::EnumOrUnknown::value(&self.visibility))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Marker {
        Marker::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.action = ::protobuf::EnumOrUnknown::new(marker::Action::ADD_MODIFY);
        self.ns.clear();
        self.id = 0;
        self.layer = 0;
        self.type_ = ::protobuf::EnumOrUnknown::new(marker::Type::NONE);
        self.lifetime.clear();
        self.pose.clear();
        self.scale.clear();
        self.material.clear();
        self.point.clear();
        self.text.clear();
        self.parent.clear();
        self.visibility = ::protobuf::EnumOrUnknown::new(marker::Visibility::GUI);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Marker {
        static instance: Marker = Marker {
            header: ::protobuf::MessageField::none(),
            action: ::protobuf::EnumOrUnknown::from_i32(0),
            ns: ::std::string::String::new(),
            id: 0,
            layer: 0,
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            lifetime: ::protobuf::MessageField::none(),
            pose: ::protobuf::MessageField::none(),
            scale: ::protobuf::MessageField::none(),
            material: ::protobuf::MessageField::none(),
            point: ::std::vec::Vec::new(),
            text: ::std::string::String::new(),
            parent: ::std::string::String::new(),
            visibility: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Marker {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Marker").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Marker {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Marker {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Marker`
pub mod marker {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:ignition.msgs.Marker.Type)
    pub enum Type {
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Type.NONE)
        NONE = 0,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Type.BOX)
        BOX = 1,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Type.CYLINDER)
        CYLINDER = 2,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Type.LINE_LIST)
        LINE_LIST = 4,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Type.LINE_STRIP)
        LINE_STRIP = 3,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Type.POINTS)
        POINTS = 5,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Type.SPHERE)
        SPHERE = 6,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Type.TEXT)
        TEXT = 7,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Type.TRIANGLE_FAN)
        TRIANGLE_FAN = 8,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Type.TRIANGLE_LIST)
        TRIANGLE_LIST = 9,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Type.TRIANGLE_STRIP)
        TRIANGLE_STRIP = 10,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Type.CONE)
        CONE = 11,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Type.ARROW)
        ARROW = 12,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Type.AXIS)
        AXIS = 13,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Type.CAPSULE)
        CAPSULE = 14,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Type.ELLIPSOID)
        ELLIPSOID = 15,
    }

    impl ::protobuf::Enum for Type {
        const NAME: &'static str = "Type";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Type> {
            match value {
                0 => ::std::option::Option::Some(Type::NONE),
                1 => ::std::option::Option::Some(Type::BOX),
                2 => ::std::option::Option::Some(Type::CYLINDER),
                4 => ::std::option::Option::Some(Type::LINE_LIST),
                3 => ::std::option::Option::Some(Type::LINE_STRIP),
                5 => ::std::option::Option::Some(Type::POINTS),
                6 => ::std::option::Option::Some(Type::SPHERE),
                7 => ::std::option::Option::Some(Type::TEXT),
                8 => ::std::option::Option::Some(Type::TRIANGLE_FAN),
                9 => ::std::option::Option::Some(Type::TRIANGLE_LIST),
                10 => ::std::option::Option::Some(Type::TRIANGLE_STRIP),
                11 => ::std::option::Option::Some(Type::CONE),
                12 => ::std::option::Option::Some(Type::ARROW),
                13 => ::std::option::Option::Some(Type::AXIS),
                14 => ::std::option::Option::Some(Type::CAPSULE),
                15 => ::std::option::Option::Some(Type::ELLIPSOID),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Type] = &[
            Type::NONE,
            Type::BOX,
            Type::CYLINDER,
            Type::LINE_LIST,
            Type::LINE_STRIP,
            Type::POINTS,
            Type::SPHERE,
            Type::TEXT,
            Type::TRIANGLE_FAN,
            Type::TRIANGLE_LIST,
            Type::TRIANGLE_STRIP,
            Type::CONE,
            Type::ARROW,
            Type::AXIS,
            Type::CAPSULE,
            Type::ELLIPSOID,
        ];
    }

    impl ::protobuf::EnumFull for Type {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Marker.Type").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                Type::NONE => 0,
                Type::BOX => 1,
                Type::CYLINDER => 2,
                Type::LINE_LIST => 3,
                Type::LINE_STRIP => 4,
                Type::POINTS => 5,
                Type::SPHERE => 6,
                Type::TEXT => 7,
                Type::TRIANGLE_FAN => 8,
                Type::TRIANGLE_LIST => 9,
                Type::TRIANGLE_STRIP => 10,
                Type::CONE => 11,
                Type::ARROW => 12,
                Type::AXIS => 13,
                Type::CAPSULE => 14,
                Type::ELLIPSOID => 15,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Type {
        fn default() -> Self {
            Type::NONE
        }
    }

    impl Type {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("Marker.Type")
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:ignition.msgs.Marker.Visibility)
    pub enum Visibility {
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Visibility.GUI)
        GUI = 0,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Visibility.ALL)
        ALL = 1,
    }

    impl ::protobuf::Enum for Visibility {
        const NAME: &'static str = "Visibility";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Visibility> {
            match value {
                0 => ::std::option::Option::Some(Visibility::GUI),
                1 => ::std::option::Option::Some(Visibility::ALL),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Visibility] = &[
            Visibility::GUI,
            Visibility::ALL,
        ];
    }

    impl ::protobuf::EnumFull for Visibility {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Marker.Visibility").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Visibility {
        fn default() -> Self {
            Visibility::GUI
        }
    }

    impl Visibility {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Visibility>("Marker.Visibility")
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:ignition.msgs.Marker.Action)
    pub enum Action {
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Action.ADD_MODIFY)
        ADD_MODIFY = 0,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Action.DELETE_MARKER)
        DELETE_MARKER = 1,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Marker.Action.DELETE_ALL)
        DELETE_ALL = 2,
    }

    impl ::protobuf::Enum for Action {
        const NAME: &'static str = "Action";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Action> {
            match value {
                0 => ::std::option::Option::Some(Action::ADD_MODIFY),
                1 => ::std::option::Option::Some(Action::DELETE_MARKER),
                2 => ::std::option::Option::Some(Action::DELETE_ALL),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Action] = &[
            Action::ADD_MODIFY,
            Action::DELETE_MARKER,
            Action::DELETE_ALL,
        ];
    }

    impl ::protobuf::EnumFull for Action {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Marker.Action").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Action {
        fn default() -> Self {
            Action::ADD_MODIFY
        }
    }

    impl Action {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Action>("Marker.Action")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aignition/msgs/marker.proto\x12\rignition.msgs\x1a\x18ignition/msgs\
    /time.proto\x1a\x18ignition/msgs/pose.proto\x1a\x1cignition/msgs/vector3\
    d.proto\x1a\x1cignition/msgs/material.proto\x1a\x1aignition/msgs/header.\
    proto\"\xea\x06\n\x06Marker\x12-\n\x06header\x18\x01\x20\x01(\x0b2\x15.i\
    gnition.msgs.HeaderR\x06header\x124\n\x06action\x18\x02\x20\x01(\x0e2\
    \x1c.ignition.msgs.Marker.ActionR\x06action\x12\x0e\n\x02ns\x18\x03\x20\
    \x01(\tR\x02ns\x12\x0e\n\x02id\x18\x04\x20\x01(\x04R\x02id\x12\x14\n\x05\
    layer\x18\x05\x20\x01(\x05R\x05layer\x12.\n\x04type\x18\x06\x20\x01(\x0e\
    2\x1a.ignition.msgs.Marker.TypeR\x04type\x12/\n\x08lifetime\x18\x07\x20\
    \x01(\x0b2\x13.ignition.msgs.TimeR\x08lifetime\x12'\n\x04pose\x18\x08\
    \x20\x01(\x0b2\x13.ignition.msgs.PoseR\x04pose\x12-\n\x05scale\x18\t\x20\
    \x01(\x0b2\x17.ignition.msgs.Vector3dR\x05scale\x123\n\x08material\x18\n\
    \x20\x01(\x0b2\x17.ignition.msgs.MaterialR\x08material\x12-\n\x05point\
    \x18\x0b\x20\x03(\x0b2\x17.ignition.msgs.Vector3dR\x05point\x12\x12\n\
    \x04text\x18\x0c\x20\x01(\tR\x04text\x12\x16\n\x06parent\x18\r\x20\x01(\
    \tR\x06parent\x12@\n\nvisibility\x18\x0e\x20\x01(\x0e2\x20.ignition.msgs\
    .Marker.VisibilityR\nvisibility\"\xdc\x01\n\x04Type\x12\x08\n\x04NONE\
    \x10\0\x12\x07\n\x03BOX\x10\x01\x12\x0c\n\x08CYLINDER\x10\x02\x12\r\n\tL\
    INE_LIST\x10\x04\x12\x0e\n\nLINE_STRIP\x10\x03\x12\n\n\x06POINTS\x10\x05\
    \x12\n\n\x06SPHERE\x10\x06\x12\x08\n\x04TEXT\x10\x07\x12\x10\n\x0cTRIANG\
    LE_FAN\x10\x08\x12\x11\n\rTRIANGLE_LIST\x10\t\x12\x12\n\x0eTRIANGLE_STRI\
    P\x10\n\x12\x08\n\x04CONE\x10\x0b\x12\t\n\x05ARROW\x10\x0c\x12\x08\n\x04\
    AXIS\x10\r\x12\x0b\n\x07CAPSULE\x10\x0e\x12\r\n\tELLIPSOID\x10\x0f\"\x1e\
    \n\nVisibility\x12\x07\n\x03GUI\x10\0\x12\x07\n\x03ALL\x10\x01\";\n\x06A\
    ction\x12\x0e\n\nADD_MODIFY\x10\0\x12\x11\n\rDELETE_MARKER\x10\x01\x12\
    \x0e\n\nDELETE_ALL\x10\x02B!\n\x11com.ignition.msgsB\x0cMarkerProtosb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::time::file_descriptor().clone());
            deps.push(super::pose::file_descriptor().clone());
            deps.push(super::vector3d::file_descriptor().clone());
            deps.push(super::material::file_descriptor().clone());
            deps.push(super::header::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Marker::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(marker::Type::generated_enum_descriptor_data());
            enums.push(marker::Visibility::generated_enum_descriptor_data());
            enums.push(marker::Action::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

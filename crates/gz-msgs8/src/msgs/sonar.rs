// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ignition/msgs/sonar.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_derive::IgnMessage)]
// @@protoc_insertion_point(message:ignition.msgs.Sonar)
pub struct Sonar {
    // message fields
    // @@protoc_insertion_point(field:ignition.msgs.Sonar.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:ignition.msgs.Sonar.frame)
    pub frame: ::std::string::String,
    // @@protoc_insertion_point(field:ignition.msgs.Sonar.world_pose)
    pub world_pose: ::protobuf::MessageField<super::pose::Pose>,
    // @@protoc_insertion_point(field:ignition.msgs.Sonar.range_min)
    pub range_min: f64,
    // @@protoc_insertion_point(field:ignition.msgs.Sonar.range_max)
    pub range_max: f64,
    // @@protoc_insertion_point(field:ignition.msgs.Sonar.radius)
    pub radius: f64,
    // @@protoc_insertion_point(field:ignition.msgs.Sonar.range)
    pub range: f64,
    // @@protoc_insertion_point(field:ignition.msgs.Sonar.geometry)
    pub geometry: ::std::string::String,
    // @@protoc_insertion_point(field:ignition.msgs.Sonar.contact)
    pub contact: ::protobuf::MessageField<super::vector3d::Vector3d>,
    // special fields
    // @@protoc_insertion_point(special_field:ignition.msgs.Sonar.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Sonar {
    fn default() -> &'a Sonar {
        <Sonar as ::protobuf::Message>::default_instance()
    }
}

impl Sonar {
    pub fn new() -> Sonar {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &Sonar| { &m.header },
            |m: &mut Sonar| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "frame",
            |m: &Sonar| { &m.frame },
            |m: &mut Sonar| { &mut m.frame },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pose::Pose>(
            "world_pose",
            |m: &Sonar| { &m.world_pose },
            |m: &mut Sonar| { &mut m.world_pose },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "range_min",
            |m: &Sonar| { &m.range_min },
            |m: &mut Sonar| { &mut m.range_min },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "range_max",
            |m: &Sonar| { &m.range_max },
            |m: &mut Sonar| { &mut m.range_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "radius",
            |m: &Sonar| { &m.radius },
            |m: &mut Sonar| { &mut m.radius },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "range",
            |m: &Sonar| { &m.range },
            |m: &mut Sonar| { &mut m.range },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "geometry",
            |m: &Sonar| { &m.geometry },
            |m: &mut Sonar| { &mut m.geometry },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::vector3d::Vector3d>(
            "contact",
            |m: &Sonar| { &m.contact },
            |m: &mut Sonar| { &mut m.contact },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Sonar>(
            "Sonar",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Sonar {
    const NAME: &'static str = "Sonar";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.frame = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.world_pose)?;
                },
                33 => {
                    self.range_min = is.read_double()?;
                },
                41 => {
                    self.range_max = is.read_double()?;
                },
                49 => {
                    self.radius = is.read_double()?;
                },
                57 => {
                    self.range = is.read_double()?;
                },
                66 => {
                    self.geometry = is.read_string()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.contact)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.frame.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.frame);
        }
        if let Some(v) = self.world_pose.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.range_min != 0. {
            my_size += 1 + 8;
        }
        if self.range_max != 0. {
            my_size += 1 + 8;
        }
        if self.radius != 0. {
            my_size += 1 + 8;
        }
        if self.range != 0. {
            my_size += 1 + 8;
        }
        if !self.geometry.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.geometry);
        }
        if let Some(v) = self.contact.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.frame.is_empty() {
            os.write_string(2, &self.frame)?;
        }
        if let Some(v) = self.world_pose.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.range_min != 0. {
            os.write_double(4, self.range_min)?;
        }
        if self.range_max != 0. {
            os.write_double(5, self.range_max)?;
        }
        if self.radius != 0. {
            os.write_double(6, self.radius)?;
        }
        if self.range != 0. {
            os.write_double(7, self.range)?;
        }
        if !self.geometry.is_empty() {
            os.write_string(8, &self.geometry)?;
        }
        if let Some(v) = self.contact.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Sonar {
        Sonar::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.frame.clear();
        self.world_pose.clear();
        self.range_min = 0.;
        self.range_max = 0.;
        self.radius = 0.;
        self.range = 0.;
        self.geometry.clear();
        self.contact.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Sonar {
        static instance: Sonar = Sonar {
            header: ::protobuf::MessageField::none(),
            frame: ::std::string::String::new(),
            world_pose: ::protobuf::MessageField::none(),
            range_min: 0.,
            range_max: 0.,
            radius: 0.,
            range: 0.,
            geometry: ::std::string::String::new(),
            contact: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Sonar {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Sonar").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Sonar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sonar {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19ignition/msgs/sonar.proto\x12\rignition.msgs\x1a\x18ignition/msgs/\
    pose.proto\x1a\x1cignition/msgs/vector3d.proto\x1a\x1aignition/msgs/head\
    er.proto\"\xb7\x02\n\x05Sonar\x12-\n\x06header\x18\x01\x20\x01(\x0b2\x15\
    .ignition.msgs.HeaderR\x06header\x12\x14\n\x05frame\x18\x02\x20\x01(\tR\
    \x05frame\x122\n\nworld_pose\x18\x03\x20\x01(\x0b2\x13.ignition.msgs.Pos\
    eR\tworldPose\x12\x1b\n\trange_min\x18\x04\x20\x01(\x01R\x08rangeMin\x12\
    \x1b\n\trange_max\x18\x05\x20\x01(\x01R\x08rangeMax\x12\x16\n\x06radius\
    \x18\x06\x20\x01(\x01R\x06radius\x12\x14\n\x05range\x18\x07\x20\x01(\x01\
    R\x05range\x12\x1a\n\x08geometry\x18\x08\x20\x01(\tR\x08geometry\x121\n\
    \x07contact\x18\t\x20\x01(\x0b2\x17.ignition.msgs.Vector3dR\x07contactB\
    \x20\n\x11com.ignition.msgsB\x0bSonarProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::pose::file_descriptor().clone());
            deps.push(super::vector3d::file_descriptor().clone());
            deps.push(super::header::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Sonar::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

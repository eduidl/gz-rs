// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ignition/msgs/geometry.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_common::IgnMessage)]
// @@protoc_insertion_point(message:ignition.msgs.Geometry)
pub struct Geometry {
    // message fields
    // @@protoc_insertion_point(field:ignition.msgs.Geometry.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:ignition.msgs.Geometry.type)
    pub type_: ::protobuf::EnumOrUnknown<geometry::Type>,
    // @@protoc_insertion_point(field:ignition.msgs.Geometry.box)
    pub box_: ::protobuf::MessageField<super::boxgeom::BoxGeom>,
    // @@protoc_insertion_point(field:ignition.msgs.Geometry.cylinder)
    pub cylinder: ::protobuf::MessageField<super::cylindergeom::CylinderGeom>,
    // @@protoc_insertion_point(field:ignition.msgs.Geometry.plane)
    pub plane: ::protobuf::MessageField<super::planegeom::PlaneGeom>,
    // @@protoc_insertion_point(field:ignition.msgs.Geometry.sphere)
    pub sphere: ::protobuf::MessageField<super::spheregeom::SphereGeom>,
    // @@protoc_insertion_point(field:ignition.msgs.Geometry.image)
    pub image: ::protobuf::MessageField<super::imagegeom::ImageGeom>,
    // @@protoc_insertion_point(field:ignition.msgs.Geometry.heightmap)
    pub heightmap: ::protobuf::MessageField<super::heightmapgeom::HeightmapGeom>,
    // @@protoc_insertion_point(field:ignition.msgs.Geometry.mesh)
    pub mesh: ::protobuf::MessageField<super::meshgeom::MeshGeom>,
    // @@protoc_insertion_point(field:ignition.msgs.Geometry.cone)
    pub cone: ::protobuf::MessageField<super::conegeom::ConeGeom>,
    // @@protoc_insertion_point(field:ignition.msgs.Geometry.capsule)
    pub capsule: ::protobuf::MessageField<super::capsulegeom::CapsuleGeom>,
    // @@protoc_insertion_point(field:ignition.msgs.Geometry.ellipsoid)
    pub ellipsoid: ::protobuf::MessageField<super::ellipsoidgeom::EllipsoidGeom>,
    // @@protoc_insertion_point(field:ignition.msgs.Geometry.points)
    pub points: ::std::vec::Vec<super::vector3d::Vector3d>,
    // @@protoc_insertion_point(field:ignition.msgs.Geometry.polyline)
    pub polyline: ::std::vec::Vec<super::polylinegeom::Polyline>,
    // special fields
    // @@protoc_insertion_point(special_field:ignition.msgs.Geometry.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Geometry {
    fn default() -> &'a Geometry {
        <Geometry as ::protobuf::Message>::default_instance()
    }
}

impl Geometry {
    pub fn new() -> Geometry {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &Geometry| { &m.header },
            |m: &mut Geometry| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Geometry| { &m.type_ },
            |m: &mut Geometry| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::boxgeom::BoxGeom>(
            "box",
            |m: &Geometry| { &m.box_ },
            |m: &mut Geometry| { &mut m.box_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::cylindergeom::CylinderGeom>(
            "cylinder",
            |m: &Geometry| { &m.cylinder },
            |m: &mut Geometry| { &mut m.cylinder },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::planegeom::PlaneGeom>(
            "plane",
            |m: &Geometry| { &m.plane },
            |m: &mut Geometry| { &mut m.plane },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::spheregeom::SphereGeom>(
            "sphere",
            |m: &Geometry| { &m.sphere },
            |m: &mut Geometry| { &mut m.sphere },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::imagegeom::ImageGeom>(
            "image",
            |m: &Geometry| { &m.image },
            |m: &mut Geometry| { &mut m.image },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::heightmapgeom::HeightmapGeom>(
            "heightmap",
            |m: &Geometry| { &m.heightmap },
            |m: &mut Geometry| { &mut m.heightmap },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::meshgeom::MeshGeom>(
            "mesh",
            |m: &Geometry| { &m.mesh },
            |m: &mut Geometry| { &mut m.mesh },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::conegeom::ConeGeom>(
            "cone",
            |m: &Geometry| { &m.cone },
            |m: &mut Geometry| { &mut m.cone },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::capsulegeom::CapsuleGeom>(
            "capsule",
            |m: &Geometry| { &m.capsule },
            |m: &mut Geometry| { &mut m.capsule },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ellipsoidgeom::EllipsoidGeom>(
            "ellipsoid",
            |m: &Geometry| { &m.ellipsoid },
            |m: &mut Geometry| { &mut m.ellipsoid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "points",
            |m: &Geometry| { &m.points },
            |m: &mut Geometry| { &mut m.points },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "polyline",
            |m: &Geometry| { &m.polyline },
            |m: &mut Geometry| { &mut m.polyline },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Geometry>(
            "Geometry",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Geometry {
    const NAME: &'static str = "Geometry";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                16 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.box_)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cylinder)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.plane)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sphere)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.image)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.heightmap)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.mesh)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cone)?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.capsule)?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ellipsoid)?;
                },
                90 => {
                    self.points.push(is.read_message()?);
                },
                98 => {
                    self.polyline.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(geometry::Type::BOX) {
            my_size += ::protobuf::rt::int32_size(2, self.type_.value());
        }
        if let Some(v) = self.box_.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.cylinder.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.plane.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sphere.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.image.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.heightmap.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.mesh.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.cone.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.capsule.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ellipsoid.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.points {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.polyline {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(geometry::Type::BOX) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if let Some(v) = self.box_.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.cylinder.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.plane.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.sphere.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.image.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.heightmap.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.mesh.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.cone.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.capsule.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self.ellipsoid.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        for v in &self.points {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        for v in &self.polyline {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Geometry {
        Geometry::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.type_ = ::protobuf::EnumOrUnknown::new(geometry::Type::BOX);
        self.box_.clear();
        self.cylinder.clear();
        self.plane.clear();
        self.sphere.clear();
        self.image.clear();
        self.heightmap.clear();
        self.mesh.clear();
        self.cone.clear();
        self.capsule.clear();
        self.ellipsoid.clear();
        self.points.clear();
        self.polyline.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Geometry {
        static instance: Geometry = Geometry {
            header: ::protobuf::MessageField::none(),
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            box_: ::protobuf::MessageField::none(),
            cylinder: ::protobuf::MessageField::none(),
            plane: ::protobuf::MessageField::none(),
            sphere: ::protobuf::MessageField::none(),
            image: ::protobuf::MessageField::none(),
            heightmap: ::protobuf::MessageField::none(),
            mesh: ::protobuf::MessageField::none(),
            cone: ::protobuf::MessageField::none(),
            capsule: ::protobuf::MessageField::none(),
            ellipsoid: ::protobuf::MessageField::none(),
            points: ::std::vec::Vec::new(),
            polyline: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Geometry {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Geometry").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Geometry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Geometry {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Geometry`
pub mod geometry {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:ignition.msgs.Geometry.Type)
    pub enum Type {
        // @@protoc_insertion_point(enum_value:ignition.msgs.Geometry.Type.BOX)
        BOX = 0,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Geometry.Type.CYLINDER)
        CYLINDER = 1,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Geometry.Type.SPHERE)
        SPHERE = 2,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Geometry.Type.PLANE)
        PLANE = 3,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Geometry.Type.IMAGE)
        IMAGE = 4,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Geometry.Type.HEIGHTMAP)
        HEIGHTMAP = 5,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Geometry.Type.MESH)
        MESH = 6,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Geometry.Type.TRIANGLE_FAN)
        TRIANGLE_FAN = 7,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Geometry.Type.LINE_STRIP)
        LINE_STRIP = 8,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Geometry.Type.POLYLINE)
        POLYLINE = 9,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Geometry.Type.CONE)
        CONE = 10,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Geometry.Type.EMPTY)
        EMPTY = 11,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Geometry.Type.ARROW)
        ARROW = 12,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Geometry.Type.AXIS)
        AXIS = 13,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Geometry.Type.CAPSULE)
        CAPSULE = 14,
        // @@protoc_insertion_point(enum_value:ignition.msgs.Geometry.Type.ELLIPSOID)
        ELLIPSOID = 15,
    }

    impl ::protobuf::Enum for Type {
        const NAME: &'static str = "Type";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Type> {
            match value {
                0 => ::std::option::Option::Some(Type::BOX),
                1 => ::std::option::Option::Some(Type::CYLINDER),
                2 => ::std::option::Option::Some(Type::SPHERE),
                3 => ::std::option::Option::Some(Type::PLANE),
                4 => ::std::option::Option::Some(Type::IMAGE),
                5 => ::std::option::Option::Some(Type::HEIGHTMAP),
                6 => ::std::option::Option::Some(Type::MESH),
                7 => ::std::option::Option::Some(Type::TRIANGLE_FAN),
                8 => ::std::option::Option::Some(Type::LINE_STRIP),
                9 => ::std::option::Option::Some(Type::POLYLINE),
                10 => ::std::option::Option::Some(Type::CONE),
                11 => ::std::option::Option::Some(Type::EMPTY),
                12 => ::std::option::Option::Some(Type::ARROW),
                13 => ::std::option::Option::Some(Type::AXIS),
                14 => ::std::option::Option::Some(Type::CAPSULE),
                15 => ::std::option::Option::Some(Type::ELLIPSOID),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Type] = &[
            Type::BOX,
            Type::CYLINDER,
            Type::SPHERE,
            Type::PLANE,
            Type::IMAGE,
            Type::HEIGHTMAP,
            Type::MESH,
            Type::TRIANGLE_FAN,
            Type::LINE_STRIP,
            Type::POLYLINE,
            Type::CONE,
            Type::EMPTY,
            Type::ARROW,
            Type::AXIS,
            Type::CAPSULE,
            Type::ELLIPSOID,
        ];
    }

    impl ::protobuf::EnumFull for Type {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Geometry.Type").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Type {
        fn default() -> Self {
            Type::BOX
        }
    }

    impl Type {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("Geometry.Type")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cignition/msgs/geometry.proto\x12\rignition.msgs\x1a\x1bignition/ms\
    gs/boxgeom.proto\x1a\x1fignition/msgs/capsulegeom.proto\x1a\x1cignition/\
    msgs/conegeom.proto\x1a\x20ignition/msgs/cylindergeom.proto\x1a!ignition\
    /msgs/ellipsoidgeom.proto\x1a\x1aignition/msgs/header.proto\x1a!ignition\
    /msgs/heightmapgeom.proto\x1a\x1dignition/msgs/imagegeom.proto\x1a\x1cig\
    nition/msgs/meshgeom.proto\x1a\x1dignition/msgs/planegeom.proto\x1a\x20i\
    gnition/msgs/polylinegeom.proto\x1a\x1eignition/msgs/spheregeom.proto\
    \x1a\x1cignition/msgs/vector3d.proto\"\xa0\x07\n\x08Geometry\x12-\n\x06h\
    eader\x18\x01\x20\x01(\x0b2\x15.ignition.msgs.HeaderR\x06header\x120\n\
    \x04type\x18\x02\x20\x01(\x0e2\x1c.ignition.msgs.Geometry.TypeR\x04type\
    \x12(\n\x03box\x18\x03\x20\x01(\x0b2\x16.ignition.msgs.BoxGeomR\x03box\
    \x127\n\x08cylinder\x18\x04\x20\x01(\x0b2\x1b.ignition.msgs.CylinderGeom\
    R\x08cylinder\x12.\n\x05plane\x18\x05\x20\x01(\x0b2\x18.ignition.msgs.Pl\
    aneGeomR\x05plane\x121\n\x06sphere\x18\x06\x20\x01(\x0b2\x19.ignition.ms\
    gs.SphereGeomR\x06sphere\x12.\n\x05image\x18\x07\x20\x01(\x0b2\x18.ignit\
    ion.msgs.ImageGeomR\x05image\x12:\n\theightmap\x18\x08\x20\x01(\x0b2\x1c\
    .ignition.msgs.HeightmapGeomR\theightmap\x12+\n\x04mesh\x18\t\x20\x01(\
    \x0b2\x17.ignition.msgs.MeshGeomR\x04mesh\x12+\n\x04cone\x18\n\x20\x01(\
    \x0b2\x17.ignition.msgs.ConeGeomR\x04cone\x124\n\x07capsule\x18\r\x20\
    \x01(\x0b2\x1a.ignition.msgs.CapsuleGeomR\x07capsule\x12:\n\tellipsoid\
    \x18\x0e\x20\x01(\x0b2\x1c.ignition.msgs.EllipsoidGeomR\tellipsoid\x12/\
    \n\x06points\x18\x0b\x20\x03(\x0b2\x17.ignition.msgs.Vector3dR\x06points\
    \x123\n\x08polyline\x18\x0c\x20\x03(\x0b2\x17.ignition.msgs.PolylineR\
    \x08polyline\"\xce\x01\n\x04Type\x12\x07\n\x03BOX\x10\0\x12\x0c\n\x08CYL\
    INDER\x10\x01\x12\n\n\x06SPHERE\x10\x02\x12\t\n\x05PLANE\x10\x03\x12\t\n\
    \x05IMAGE\x10\x04\x12\r\n\tHEIGHTMAP\x10\x05\x12\x08\n\x04MESH\x10\x06\
    \x12\x10\n\x0cTRIANGLE_FAN\x10\x07\x12\x0e\n\nLINE_STRIP\x10\x08\x12\x0c\
    \n\x08POLYLINE\x10\t\x12\x08\n\x04CONE\x10\n\x12\t\n\x05EMPTY\x10\x0b\
    \x12\t\n\x05ARROW\x10\x0c\x12\x08\n\x04AXIS\x10\r\x12\x0b\n\x07CAPSULE\
    \x10\x0e\x12\r\n\tELLIPSOID\x10\x0fB#\n\x11com.ignition.msgsB\x0eGeometr\
    yProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(13);
            deps.push(super::boxgeom::file_descriptor().clone());
            deps.push(super::capsulegeom::file_descriptor().clone());
            deps.push(super::conegeom::file_descriptor().clone());
            deps.push(super::cylindergeom::file_descriptor().clone());
            deps.push(super::ellipsoidgeom::file_descriptor().clone());
            deps.push(super::header::file_descriptor().clone());
            deps.push(super::heightmapgeom::file_descriptor().clone());
            deps.push(super::imagegeom::file_descriptor().clone());
            deps.push(super::meshgeom::file_descriptor().clone());
            deps.push(super::planegeom::file_descriptor().clone());
            deps.push(super::polylinegeom::file_descriptor().clone());
            deps.push(super::spheregeom::file_descriptor().clone());
            deps.push(super::vector3d::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Geometry::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(geometry::Type::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ignition/msgs/hydra.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_derive::IgnMessage)]
// @@protoc_insertion_point(message:ignition.msgs.Hydra)
pub struct Hydra {
    // message fields
    // @@protoc_insertion_point(field:ignition.msgs.Hydra.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:ignition.msgs.Hydra.right)
    pub right: ::protobuf::MessageField<hydra::Paddle>,
    // @@protoc_insertion_point(field:ignition.msgs.Hydra.left)
    pub left: ::protobuf::MessageField<hydra::Paddle>,
    // special fields
    // @@protoc_insertion_point(special_field:ignition.msgs.Hydra.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Hydra {
    fn default() -> &'a Hydra {
        <Hydra as ::protobuf::Message>::default_instance()
    }
}

impl Hydra {
    pub fn new() -> Hydra {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &Hydra| { &m.header },
            |m: &mut Hydra| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, hydra::Paddle>(
            "right",
            |m: &Hydra| { &m.right },
            |m: &mut Hydra| { &mut m.right },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, hydra::Paddle>(
            "left",
            |m: &Hydra| { &m.left },
            |m: &mut Hydra| { &mut m.left },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Hydra>(
            "Hydra",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Hydra {
    const NAME: &'static str = "Hydra";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.right)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.left)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.right.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.left.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.right.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.left.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Hydra {
        Hydra::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.right.clear();
        self.left.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Hydra {
        static instance: Hydra = Hydra {
            header: ::protobuf::MessageField::none(),
            right: ::protobuf::MessageField::none(),
            left: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Hydra {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Hydra").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Hydra {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Hydra {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Hydra`
pub mod hydra {
    #[derive(PartialEq,Clone,Default,Debug)]
    #[derive(::gz_msgs_derive::IgnMessage)]
    // @@protoc_insertion_point(message:ignition.msgs.Hydra.Paddle)
    pub struct Paddle {
        // message fields
        // @@protoc_insertion_point(field:ignition.msgs.Hydra.Paddle.pose)
        pub pose: ::protobuf::MessageField<super::super::pose::Pose>,
        // @@protoc_insertion_point(field:ignition.msgs.Hydra.Paddle.button_bumper)
        pub button_bumper: bool,
        // @@protoc_insertion_point(field:ignition.msgs.Hydra.Paddle.button_1)
        pub button_1: bool,
        // @@protoc_insertion_point(field:ignition.msgs.Hydra.Paddle.button_2)
        pub button_2: bool,
        // @@protoc_insertion_point(field:ignition.msgs.Hydra.Paddle.button_3)
        pub button_3: bool,
        // @@protoc_insertion_point(field:ignition.msgs.Hydra.Paddle.button_4)
        pub button_4: bool,
        // @@protoc_insertion_point(field:ignition.msgs.Hydra.Paddle.button_joy)
        pub button_joy: bool,
        // @@protoc_insertion_point(field:ignition.msgs.Hydra.Paddle.button_center)
        pub button_center: bool,
        // @@protoc_insertion_point(field:ignition.msgs.Hydra.Paddle.joy_x)
        pub joy_x: f64,
        // @@protoc_insertion_point(field:ignition.msgs.Hydra.Paddle.joy_y)
        pub joy_y: f64,
        // @@protoc_insertion_point(field:ignition.msgs.Hydra.Paddle.trigger)
        pub trigger: f64,
        // special fields
        // @@protoc_insertion_point(special_field:ignition.msgs.Hydra.Paddle.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Paddle {
        fn default() -> &'a Paddle {
            <Paddle as ::protobuf::Message>::default_instance()
        }
    }

    impl Paddle {
        pub fn new() -> Paddle {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(11);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::pose::Pose>(
                "pose",
                |m: &Paddle| { &m.pose },
                |m: &mut Paddle| { &mut m.pose },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "button_bumper",
                |m: &Paddle| { &m.button_bumper },
                |m: &mut Paddle| { &mut m.button_bumper },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "button_1",
                |m: &Paddle| { &m.button_1 },
                |m: &mut Paddle| { &mut m.button_1 },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "button_2",
                |m: &Paddle| { &m.button_2 },
                |m: &mut Paddle| { &mut m.button_2 },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "button_3",
                |m: &Paddle| { &m.button_3 },
                |m: &mut Paddle| { &mut m.button_3 },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "button_4",
                |m: &Paddle| { &m.button_4 },
                |m: &mut Paddle| { &mut m.button_4 },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "button_joy",
                |m: &Paddle| { &m.button_joy },
                |m: &mut Paddle| { &mut m.button_joy },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "button_center",
                |m: &Paddle| { &m.button_center },
                |m: &mut Paddle| { &mut m.button_center },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "joy_x",
                |m: &Paddle| { &m.joy_x },
                |m: &mut Paddle| { &mut m.joy_x },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "joy_y",
                |m: &Paddle| { &m.joy_y },
                |m: &mut Paddle| { &mut m.joy_y },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "trigger",
                |m: &Paddle| { &m.trigger },
                |m: &mut Paddle| { &mut m.trigger },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Paddle>(
                "Hydra.Paddle",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Paddle {
        const NAME: &'static str = "Paddle";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.pose)?;
                    },
                    16 => {
                        self.button_bumper = is.read_bool()?;
                    },
                    24 => {
                        self.button_1 = is.read_bool()?;
                    },
                    32 => {
                        self.button_2 = is.read_bool()?;
                    },
                    40 => {
                        self.button_3 = is.read_bool()?;
                    },
                    48 => {
                        self.button_4 = is.read_bool()?;
                    },
                    56 => {
                        self.button_joy = is.read_bool()?;
                    },
                    64 => {
                        self.button_center = is.read_bool()?;
                    },
                    73 => {
                        self.joy_x = is.read_double()?;
                    },
                    81 => {
                        self.joy_y = is.read_double()?;
                    },
                    89 => {
                        self.trigger = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.pose.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if self.button_bumper != false {
                my_size += 1 + 1;
            }
            if self.button_1 != false {
                my_size += 1 + 1;
            }
            if self.button_2 != false {
                my_size += 1 + 1;
            }
            if self.button_3 != false {
                my_size += 1 + 1;
            }
            if self.button_4 != false {
                my_size += 1 + 1;
            }
            if self.button_joy != false {
                my_size += 1 + 1;
            }
            if self.button_center != false {
                my_size += 1 + 1;
            }
            if self.joy_x != 0. {
                my_size += 1 + 8;
            }
            if self.joy_y != 0. {
                my_size += 1 + 8;
            }
            if self.trigger != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.pose.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if self.button_bumper != false {
                os.write_bool(2, self.button_bumper)?;
            }
            if self.button_1 != false {
                os.write_bool(3, self.button_1)?;
            }
            if self.button_2 != false {
                os.write_bool(4, self.button_2)?;
            }
            if self.button_3 != false {
                os.write_bool(5, self.button_3)?;
            }
            if self.button_4 != false {
                os.write_bool(6, self.button_4)?;
            }
            if self.button_joy != false {
                os.write_bool(7, self.button_joy)?;
            }
            if self.button_center != false {
                os.write_bool(8, self.button_center)?;
            }
            if self.joy_x != 0. {
                os.write_double(9, self.joy_x)?;
            }
            if self.joy_y != 0. {
                os.write_double(10, self.joy_y)?;
            }
            if self.trigger != 0. {
                os.write_double(11, self.trigger)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Paddle {
            Paddle::new()
        }

        fn clear(&mut self) {
            self.pose.clear();
            self.button_bumper = false;
            self.button_1 = false;
            self.button_2 = false;
            self.button_3 = false;
            self.button_4 = false;
            self.button_joy = false;
            self.button_center = false;
            self.joy_x = 0.;
            self.joy_y = 0.;
            self.trigger = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Paddle {
            static instance: Paddle = Paddle {
                pose: ::protobuf::MessageField::none(),
                button_bumper: false,
                button_1: false,
                button_2: false,
                button_3: false,
                button_4: false,
                button_joy: false,
                button_center: false,
                joy_x: 0.,
                joy_y: 0.,
                trigger: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Paddle {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Hydra.Paddle").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Paddle {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Paddle {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19ignition/msgs/hydra.proto\x12\rignition.msgs\x1a\x18ignition/msgs/\
    pose.proto\x1a\x1aignition/msgs/header.proto\"\xe7\x03\n\x05Hydra\x12-\n\
    \x06header\x18\x01\x20\x01(\x0b2\x15.ignition.msgs.HeaderR\x06header\x12\
    1\n\x05right\x18\x02\x20\x01(\x0b2\x1b.ignition.msgs.Hydra.PaddleR\x05ri\
    ght\x12/\n\x04left\x18\x03\x20\x01(\x0b2\x1b.ignition.msgs.Hydra.PaddleR\
    \x04left\x1a\xca\x02\n\x06Paddle\x12'\n\x04pose\x18\x01\x20\x01(\x0b2\
    \x13.ignition.msgs.PoseR\x04pose\x12#\n\rbutton_bumper\x18\x02\x20\x01(\
    \x08R\x0cbuttonBumper\x12\x19\n\x08button_1\x18\x03\x20\x01(\x08R\x07but\
    ton1\x12\x19\n\x08button_2\x18\x04\x20\x01(\x08R\x07button2\x12\x19\n\
    \x08button_3\x18\x05\x20\x01(\x08R\x07button3\x12\x19\n\x08button_4\x18\
    \x06\x20\x01(\x08R\x07button4\x12\x1d\n\nbutton_joy\x18\x07\x20\x01(\x08\
    R\tbuttonJoy\x12#\n\rbutton_center\x18\x08\x20\x01(\x08R\x0cbuttonCenter\
    \x12\x13\n\x05joy_x\x18\t\x20\x01(\x01R\x04joyX\x12\x13\n\x05joy_y\x18\n\
    \x20\x01(\x01R\x04joyY\x12\x18\n\x07trigger\x18\x0b\x20\x01(\x01R\x07tri\
    ggerB\x20\n\x11com.ignition.msgsB\x0bHydraProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::pose::file_descriptor().clone());
            deps.push(super::header::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Hydra::generated_message_descriptor_data());
            messages.push(hydra::Paddle::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

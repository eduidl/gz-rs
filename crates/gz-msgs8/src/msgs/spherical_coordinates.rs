// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ignition/msgs/spherical_coordinates.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_common::IgnMessage)]
// @@protoc_insertion_point(message:ignition.msgs.SphericalCoordinates)
pub struct SphericalCoordinates {
    // message fields
    // @@protoc_insertion_point(field:ignition.msgs.SphericalCoordinates.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:ignition.msgs.SphericalCoordinates.surface_model)
    pub surface_model: ::protobuf::EnumOrUnknown<spherical_coordinates::SurfaceModel>,
    // @@protoc_insertion_point(field:ignition.msgs.SphericalCoordinates.latitude_deg)
    pub latitude_deg: f64,
    // @@protoc_insertion_point(field:ignition.msgs.SphericalCoordinates.longitude_deg)
    pub longitude_deg: f64,
    // @@protoc_insertion_point(field:ignition.msgs.SphericalCoordinates.elevation)
    pub elevation: f64,
    // @@protoc_insertion_point(field:ignition.msgs.SphericalCoordinates.heading_deg)
    pub heading_deg: f64,
    // @@protoc_insertion_point(field:ignition.msgs.SphericalCoordinates.entity)
    pub entity: ::protobuf::MessageField<super::entity::Entity>,
    // special fields
    // @@protoc_insertion_point(special_field:ignition.msgs.SphericalCoordinates.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SphericalCoordinates {
    fn default() -> &'a SphericalCoordinates {
        <SphericalCoordinates as ::protobuf::Message>::default_instance()
    }
}

impl SphericalCoordinates {
    pub fn new() -> SphericalCoordinates {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &SphericalCoordinates| { &m.header },
            |m: &mut SphericalCoordinates| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "surface_model",
            |m: &SphericalCoordinates| { &m.surface_model },
            |m: &mut SphericalCoordinates| { &mut m.surface_model },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "latitude_deg",
            |m: &SphericalCoordinates| { &m.latitude_deg },
            |m: &mut SphericalCoordinates| { &mut m.latitude_deg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "longitude_deg",
            |m: &SphericalCoordinates| { &m.longitude_deg },
            |m: &mut SphericalCoordinates| { &mut m.longitude_deg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "elevation",
            |m: &SphericalCoordinates| { &m.elevation },
            |m: &mut SphericalCoordinates| { &mut m.elevation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "heading_deg",
            |m: &SphericalCoordinates| { &m.heading_deg },
            |m: &mut SphericalCoordinates| { &mut m.heading_deg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::entity::Entity>(
            "entity",
            |m: &SphericalCoordinates| { &m.entity },
            |m: &mut SphericalCoordinates| { &mut m.entity },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SphericalCoordinates>(
            "SphericalCoordinates",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SphericalCoordinates {
    const NAME: &'static str = "SphericalCoordinates";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                16 => {
                    self.surface_model = is.read_enum_or_unknown()?;
                },
                25 => {
                    self.latitude_deg = is.read_double()?;
                },
                33 => {
                    self.longitude_deg = is.read_double()?;
                },
                41 => {
                    self.elevation = is.read_double()?;
                },
                49 => {
                    self.heading_deg = is.read_double()?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.entity)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.surface_model != ::protobuf::EnumOrUnknown::new(spherical_coordinates::SurfaceModel::EARTH_WGS84) {
            my_size += ::protobuf::rt::int32_size(2, self.surface_model.value());
        }
        if self.latitude_deg != 0. {
            my_size += 1 + 8;
        }
        if self.longitude_deg != 0. {
            my_size += 1 + 8;
        }
        if self.elevation != 0. {
            my_size += 1 + 8;
        }
        if self.heading_deg != 0. {
            my_size += 1 + 8;
        }
        if let Some(v) = self.entity.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.surface_model != ::protobuf::EnumOrUnknown::new(spherical_coordinates::SurfaceModel::EARTH_WGS84) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.surface_model))?;
        }
        if self.latitude_deg != 0. {
            os.write_double(3, self.latitude_deg)?;
        }
        if self.longitude_deg != 0. {
            os.write_double(4, self.longitude_deg)?;
        }
        if self.elevation != 0. {
            os.write_double(5, self.elevation)?;
        }
        if self.heading_deg != 0. {
            os.write_double(6, self.heading_deg)?;
        }
        if let Some(v) = self.entity.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SphericalCoordinates {
        SphericalCoordinates::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.surface_model = ::protobuf::EnumOrUnknown::new(spherical_coordinates::SurfaceModel::EARTH_WGS84);
        self.latitude_deg = 0.;
        self.longitude_deg = 0.;
        self.elevation = 0.;
        self.heading_deg = 0.;
        self.entity.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SphericalCoordinates {
        static instance: SphericalCoordinates = SphericalCoordinates {
            header: ::protobuf::MessageField::none(),
            surface_model: ::protobuf::EnumOrUnknown::from_i32(0),
            latitude_deg: 0.,
            longitude_deg: 0.,
            elevation: 0.,
            heading_deg: 0.,
            entity: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SphericalCoordinates {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SphericalCoordinates").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SphericalCoordinates {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SphericalCoordinates {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SphericalCoordinates`
pub mod spherical_coordinates {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:ignition.msgs.SphericalCoordinates.SurfaceModel)
    pub enum SurfaceModel {
        // @@protoc_insertion_point(enum_value:ignition.msgs.SphericalCoordinates.SurfaceModel.EARTH_WGS84)
        EARTH_WGS84 = 0,
    }

    impl ::protobuf::Enum for SurfaceModel {
        const NAME: &'static str = "SurfaceModel";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<SurfaceModel> {
            match value {
                0 => ::std::option::Option::Some(SurfaceModel::EARTH_WGS84),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [SurfaceModel] = &[
            SurfaceModel::EARTH_WGS84,
        ];
    }

    impl ::protobuf::EnumFull for SurfaceModel {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("SphericalCoordinates.SurfaceModel").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for SurfaceModel {
        fn default() -> Self {
            SurfaceModel::EARTH_WGS84
        }
    }

    impl SurfaceModel {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<SurfaceModel>("SphericalCoordinates.SurfaceModel")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)ignition/msgs/spherical_coordinates.proto\x12\rignition.msgs\x1a\x1ai\
    gnition/msgs/entity.proto\x1a\x1aignition/msgs/header.proto\"\xf3\x02\n\
    \x14SphericalCoordinates\x12-\n\x06header\x18\x01\x20\x01(\x0b2\x15.igni\
    tion.msgs.HeaderR\x06header\x12U\n\rsurface_model\x18\x02\x20\x01(\x0e20\
    .ignition.msgs.SphericalCoordinates.SurfaceModelR\x0csurfaceModel\x12!\n\
    \x0clatitude_deg\x18\x03\x20\x01(\x01R\x0blatitudeDeg\x12#\n\rlongitude_\
    deg\x18\x04\x20\x01(\x01R\x0clongitudeDeg\x12\x1c\n\televation\x18\x05\
    \x20\x01(\x01R\televation\x12\x1f\n\x0bheading_deg\x18\x06\x20\x01(\x01R\
    \nheadingDeg\x12-\n\x06entity\x18\x07\x20\x01(\x0b2\x15.ignition.msgs.En\
    tityR\x06entity\"\x1f\n\x0cSurfaceModel\x12\x0f\n\x0bEARTH_WGS84\x10\0B/\
    \n\x11com.ignition.msgsB\x1aSphericalCoordinatesProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::entity::file_descriptor().clone());
            deps.push(super::header::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(SphericalCoordinates::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(spherical_coordinates::SurfaceModel::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ignition/msgs/sdf_generator_config.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_common::IgnMessage)]
// @@protoc_insertion_point(message:ignition.msgs.SdfGeneratorConfig)
pub struct SdfGeneratorConfig {
    // message fields
    // @@protoc_insertion_point(field:ignition.msgs.SdfGeneratorConfig.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:ignition.msgs.SdfGeneratorConfig.global_entity_gen_config)
    pub global_entity_gen_config: ::protobuf::MessageField<sdf_generator_config::EntityGeneratorConfig>,
    // @@protoc_insertion_point(field:ignition.msgs.SdfGeneratorConfig.override_entity_gen_configs)
    pub override_entity_gen_configs: ::std::collections::HashMap<::std::string::String, sdf_generator_config::EntityGeneratorConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:ignition.msgs.SdfGeneratorConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SdfGeneratorConfig {
    fn default() -> &'a SdfGeneratorConfig {
        <SdfGeneratorConfig as ::protobuf::Message>::default_instance()
    }
}

impl SdfGeneratorConfig {
    pub fn new() -> SdfGeneratorConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &SdfGeneratorConfig| { &m.header },
            |m: &mut SdfGeneratorConfig| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, sdf_generator_config::EntityGeneratorConfig>(
            "global_entity_gen_config",
            |m: &SdfGeneratorConfig| { &m.global_entity_gen_config },
            |m: &mut SdfGeneratorConfig| { &mut m.global_entity_gen_config },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "override_entity_gen_configs",
            |m: &SdfGeneratorConfig| { &m.override_entity_gen_configs },
            |m: &mut SdfGeneratorConfig| { &mut m.override_entity_gen_configs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SdfGeneratorConfig>(
            "SdfGeneratorConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SdfGeneratorConfig {
    const NAME: &'static str = "SdfGeneratorConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.global_entity_gen_config)?;
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.override_entity_gen_configs.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.global_entity_gen_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for (k, v) in &self.override_entity_gen_configs {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.global_entity_gen_config.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for (k, v) in &self.override_entity_gen_configs {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SdfGeneratorConfig {
        SdfGeneratorConfig::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.global_entity_gen_config.clear();
        self.override_entity_gen_configs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SdfGeneratorConfig {
        static instance: ::protobuf::rt::Lazy<SdfGeneratorConfig> = ::protobuf::rt::Lazy::new();
        instance.get(SdfGeneratorConfig::new)
    }
}

impl ::protobuf::MessageFull for SdfGeneratorConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SdfGeneratorConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SdfGeneratorConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SdfGeneratorConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SdfGeneratorConfig`
pub mod sdf_generator_config {
    #[derive(PartialEq,Clone,Default,Debug)]
    #[derive(::gz_msgs_common::IgnMessage)]
    // @@protoc_insertion_point(message:ignition.msgs.SdfGeneratorConfig.EntityGeneratorConfig)
    pub struct EntityGeneratorConfig {
        // message fields
        // @@protoc_insertion_point(field:ignition.msgs.SdfGeneratorConfig.EntityGeneratorConfig.expand_include_tags)
        pub expand_include_tags: ::protobuf::MessageField<super::super::boolean::Boolean>,
        // @@protoc_insertion_point(field:ignition.msgs.SdfGeneratorConfig.EntityGeneratorConfig.save_fuel_version)
        pub save_fuel_version: ::protobuf::MessageField<super::super::boolean::Boolean>,
        // @@protoc_insertion_point(field:ignition.msgs.SdfGeneratorConfig.EntityGeneratorConfig.resources_use_absolute_paths)
        pub resources_use_absolute_paths: ::protobuf::MessageField<super::super::boolean::Boolean>,
        // @@protoc_insertion_point(field:ignition.msgs.SdfGeneratorConfig.EntityGeneratorConfig.copy_model_resources)
        pub copy_model_resources: ::protobuf::MessageField<super::super::boolean::Boolean>,
        // special fields
        // @@protoc_insertion_point(special_field:ignition.msgs.SdfGeneratorConfig.EntityGeneratorConfig.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EntityGeneratorConfig {
        fn default() -> &'a EntityGeneratorConfig {
            <EntityGeneratorConfig as ::protobuf::Message>::default_instance()
        }
    }

    impl EntityGeneratorConfig {
        pub fn new() -> EntityGeneratorConfig {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::boolean::Boolean>(
                "expand_include_tags",
                |m: &EntityGeneratorConfig| { &m.expand_include_tags },
                |m: &mut EntityGeneratorConfig| { &mut m.expand_include_tags },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::boolean::Boolean>(
                "save_fuel_version",
                |m: &EntityGeneratorConfig| { &m.save_fuel_version },
                |m: &mut EntityGeneratorConfig| { &mut m.save_fuel_version },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::boolean::Boolean>(
                "resources_use_absolute_paths",
                |m: &EntityGeneratorConfig| { &m.resources_use_absolute_paths },
                |m: &mut EntityGeneratorConfig| { &mut m.resources_use_absolute_paths },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::boolean::Boolean>(
                "copy_model_resources",
                |m: &EntityGeneratorConfig| { &m.copy_model_resources },
                |m: &mut EntityGeneratorConfig| { &mut m.copy_model_resources },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EntityGeneratorConfig>(
                "SdfGeneratorConfig.EntityGeneratorConfig",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EntityGeneratorConfig {
        const NAME: &'static str = "EntityGeneratorConfig";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.expand_include_tags)?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.save_fuel_version)?;
                    },
                    26 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.resources_use_absolute_paths)?;
                    },
                    34 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.copy_model_resources)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.expand_include_tags.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.save_fuel_version.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.resources_use_absolute_paths.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.copy_model_resources.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.expand_include_tags.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if let Some(v) = self.save_fuel_version.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if let Some(v) = self.resources_use_absolute_paths.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            }
            if let Some(v) = self.copy_model_resources.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EntityGeneratorConfig {
            EntityGeneratorConfig::new()
        }

        fn clear(&mut self) {
            self.expand_include_tags.clear();
            self.save_fuel_version.clear();
            self.resources_use_absolute_paths.clear();
            self.copy_model_resources.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EntityGeneratorConfig {
            static instance: EntityGeneratorConfig = EntityGeneratorConfig {
                expand_include_tags: ::protobuf::MessageField::none(),
                save_fuel_version: ::protobuf::MessageField::none(),
                resources_use_absolute_paths: ::protobuf::MessageField::none(),
                copy_model_resources: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EntityGeneratorConfig {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("SdfGeneratorConfig.EntityGeneratorConfig").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EntityGeneratorConfig {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EntityGeneratorConfig {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(ignition/msgs/sdf_generator_config.proto\x12\rignition.msgs\x1a\x1big\
    nition/msgs/boolean.proto\x1a\x1aignition/msgs/header.proto\"\x85\x06\n\
    \x12SdfGeneratorConfig\x12-\n\x06header\x18\x01\x20\x01(\x0b2\x15.igniti\
    on.msgs.HeaderR\x06header\x12p\n\x18global_entity_gen_config\x18\x02\x20\
    \x01(\x0b27.ignition.msgs.SdfGeneratorConfig.EntityGeneratorConfigR\x15g\
    lobalEntityGenConfig\x12~\n\x1boverride_entity_gen_configs\x18\x03\x20\
    \x03(\x0b2?.ignition.msgs.SdfGeneratorConfig.OverrideEntityGenConfigsEnt\
    ryR\x18overrideEntityGenConfigs\x1a\xc6\x02\n\x15EntityGeneratorConfig\
    \x12F\n\x13expand_include_tags\x18\x01\x20\x01(\x0b2\x16.ignition.msgs.B\
    ooleanR\x11expandIncludeTags\x12B\n\x11save_fuel_version\x18\x02\x20\x01\
    (\x0b2\x16.ignition.msgs.BooleanR\x0fsaveFuelVersion\x12W\n\x1cresources\
    _use_absolute_paths\x18\x03\x20\x01(\x0b2\x16.ignition.msgs.BooleanR\x19\
    resourcesUseAbsolutePaths\x12H\n\x14copy_model_resources\x18\x04\x20\x01\
    (\x0b2\x16.ignition.msgs.BooleanR\x12copyModelResources\x1a\x84\x01\n\
    \x1dOverrideEntityGenConfigsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\
    \x03key\x12M\n\x05value\x18\x02\x20\x01(\x0b27.ignition.msgs.SdfGenerato\
    rConfig.EntityGeneratorConfigR\x05value:\x028\x01B-\n\x11com.ignition.ms\
    gsB\x18SdfGeneratorConfigProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::boolean::file_descriptor().clone());
            deps.push(super::header::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(SdfGeneratorConfig::generated_message_descriptor_data());
            messages.push(sdf_generator_config::EntityGeneratorConfig::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ignition/msgs/friction.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_derive::IgnMessage)]
// @@protoc_insertion_point(message:ignition.msgs.Friction)
pub struct Friction {
    // message fields
    // @@protoc_insertion_point(field:ignition.msgs.Friction.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:ignition.msgs.Friction.mu)
    pub mu: f64,
    // @@protoc_insertion_point(field:ignition.msgs.Friction.mu2)
    pub mu2: f64,
    // @@protoc_insertion_point(field:ignition.msgs.Friction.fdir1)
    pub fdir1: ::protobuf::MessageField<super::vector3d::Vector3d>,
    // @@protoc_insertion_point(field:ignition.msgs.Friction.slip1)
    pub slip1: f64,
    // @@protoc_insertion_point(field:ignition.msgs.Friction.slip2)
    pub slip2: f64,
    // @@protoc_insertion_point(field:ignition.msgs.Friction.torsional)
    pub torsional: ::protobuf::MessageField<friction::Torsional>,
    // special fields
    // @@protoc_insertion_point(special_field:ignition.msgs.Friction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Friction {
    fn default() -> &'a Friction {
        <Friction as ::protobuf::Message>::default_instance()
    }
}

impl Friction {
    pub fn new() -> Friction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &Friction| { &m.header },
            |m: &mut Friction| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mu",
            |m: &Friction| { &m.mu },
            |m: &mut Friction| { &mut m.mu },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mu2",
            |m: &Friction| { &m.mu2 },
            |m: &mut Friction| { &mut m.mu2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::vector3d::Vector3d>(
            "fdir1",
            |m: &Friction| { &m.fdir1 },
            |m: &mut Friction| { &mut m.fdir1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "slip1",
            |m: &Friction| { &m.slip1 },
            |m: &mut Friction| { &mut m.slip1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "slip2",
            |m: &Friction| { &m.slip2 },
            |m: &mut Friction| { &mut m.slip2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, friction::Torsional>(
            "torsional",
            |m: &Friction| { &m.torsional },
            |m: &mut Friction| { &mut m.torsional },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Friction>(
            "Friction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Friction {
    const NAME: &'static str = "Friction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                17 => {
                    self.mu = is.read_double()?;
                },
                25 => {
                    self.mu2 = is.read_double()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.fdir1)?;
                },
                41 => {
                    self.slip1 = is.read_double()?;
                },
                49 => {
                    self.slip2 = is.read_double()?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.torsional)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.mu != 0. {
            my_size += 1 + 8;
        }
        if self.mu2 != 0. {
            my_size += 1 + 8;
        }
        if let Some(v) = self.fdir1.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.slip1 != 0. {
            my_size += 1 + 8;
        }
        if self.slip2 != 0. {
            my_size += 1 + 8;
        }
        if let Some(v) = self.torsional.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.mu != 0. {
            os.write_double(2, self.mu)?;
        }
        if self.mu2 != 0. {
            os.write_double(3, self.mu2)?;
        }
        if let Some(v) = self.fdir1.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.slip1 != 0. {
            os.write_double(5, self.slip1)?;
        }
        if self.slip2 != 0. {
            os.write_double(6, self.slip2)?;
        }
        if let Some(v) = self.torsional.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Friction {
        Friction::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.mu = 0.;
        self.mu2 = 0.;
        self.fdir1.clear();
        self.slip1 = 0.;
        self.slip2 = 0.;
        self.torsional.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Friction {
        static instance: Friction = Friction {
            header: ::protobuf::MessageField::none(),
            mu: 0.,
            mu2: 0.,
            fdir1: ::protobuf::MessageField::none(),
            slip1: 0.,
            slip2: 0.,
            torsional: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Friction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Friction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Friction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Friction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Friction`
pub mod friction {
    #[derive(PartialEq,Clone,Default,Debug)]
    #[derive(::gz_msgs_derive::IgnMessage)]
    // @@protoc_insertion_point(message:ignition.msgs.Friction.Torsional)
    pub struct Torsional {
        // message fields
        // @@protoc_insertion_point(field:ignition.msgs.Friction.Torsional.coefficient)
        pub coefficient: f64,
        // @@protoc_insertion_point(field:ignition.msgs.Friction.Torsional.use_patch_radius)
        pub use_patch_radius: bool,
        // @@protoc_insertion_point(field:ignition.msgs.Friction.Torsional.patch_radius)
        pub patch_radius: f64,
        // @@protoc_insertion_point(field:ignition.msgs.Friction.Torsional.surface_radius)
        pub surface_radius: f64,
        // @@protoc_insertion_point(field:ignition.msgs.Friction.Torsional.ode)
        pub ode: ::protobuf::MessageField<torsional::ODE>,
        // special fields
        // @@protoc_insertion_point(special_field:ignition.msgs.Friction.Torsional.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Torsional {
        fn default() -> &'a Torsional {
            <Torsional as ::protobuf::Message>::default_instance()
        }
    }

    impl Torsional {
        pub fn new() -> Torsional {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "coefficient",
                |m: &Torsional| { &m.coefficient },
                |m: &mut Torsional| { &mut m.coefficient },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "use_patch_radius",
                |m: &Torsional| { &m.use_patch_radius },
                |m: &mut Torsional| { &mut m.use_patch_radius },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "patch_radius",
                |m: &Torsional| { &m.patch_radius },
                |m: &mut Torsional| { &mut m.patch_radius },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "surface_radius",
                |m: &Torsional| { &m.surface_radius },
                |m: &mut Torsional| { &mut m.surface_radius },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, torsional::ODE>(
                "ode",
                |m: &Torsional| { &m.ode },
                |m: &mut Torsional| { &mut m.ode },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Torsional>(
                "Friction.Torsional",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Torsional {
        const NAME: &'static str = "Torsional";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.coefficient = is.read_double()?;
                    },
                    16 => {
                        self.use_patch_radius = is.read_bool()?;
                    },
                    25 => {
                        self.patch_radius = is.read_double()?;
                    },
                    33 => {
                        self.surface_radius = is.read_double()?;
                    },
                    42 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.ode)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.coefficient != 0. {
                my_size += 1 + 8;
            }
            if self.use_patch_radius != false {
                my_size += 1 + 1;
            }
            if self.patch_radius != 0. {
                my_size += 1 + 8;
            }
            if self.surface_radius != 0. {
                my_size += 1 + 8;
            }
            if let Some(v) = self.ode.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.coefficient != 0. {
                os.write_double(1, self.coefficient)?;
            }
            if self.use_patch_radius != false {
                os.write_bool(2, self.use_patch_radius)?;
            }
            if self.patch_radius != 0. {
                os.write_double(3, self.patch_radius)?;
            }
            if self.surface_radius != 0. {
                os.write_double(4, self.surface_radius)?;
            }
            if let Some(v) = self.ode.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Torsional {
            Torsional::new()
        }

        fn clear(&mut self) {
            self.coefficient = 0.;
            self.use_patch_radius = false;
            self.patch_radius = 0.;
            self.surface_radius = 0.;
            self.ode.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Torsional {
            static instance: Torsional = Torsional {
                coefficient: 0.,
                use_patch_radius: false,
                patch_radius: 0.,
                surface_radius: 0.,
                ode: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Torsional {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Friction.Torsional").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Torsional {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Torsional {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Torsional`
    pub mod torsional {
        #[derive(PartialEq,Clone,Default,Debug)]
        #[derive(::gz_msgs_derive::IgnMessage)]
        // @@protoc_insertion_point(message:ignition.msgs.Friction.Torsional.ODE)
        pub struct ODE {
            // message fields
            // @@protoc_insertion_point(field:ignition.msgs.Friction.Torsional.ODE.slip)
            pub slip: f64,
            // special fields
            // @@protoc_insertion_point(special_field:ignition.msgs.Friction.Torsional.ODE.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a ODE {
            fn default() -> &'a ODE {
                <ODE as ::protobuf::Message>::default_instance()
            }
        }

        impl ODE {
            pub fn new() -> ODE {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(1);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "slip",
                    |m: &ODE| { &m.slip },
                    |m: &mut ODE| { &mut m.slip },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ODE>(
                    "Friction.Torsional.ODE",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for ODE {
            const NAME: &'static str = "ODE";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        9 => {
                            self.slip = is.read_double()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.slip != 0. {
                    my_size += 1 + 8;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.slip != 0. {
                    os.write_double(1, self.slip)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> ODE {
                ODE::new()
            }

            fn clear(&mut self) {
                self.slip = 0.;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static ODE {
                static instance: ODE = ODE {
                    slip: 0.,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for ODE {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Friction.Torsional.ODE").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for ODE {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for ODE {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cignition/msgs/friction.proto\x12\rignition.msgs\x1a\x1cignition/ms\
    gs/vector3d.proto\x1a\x1aignition/msgs/header.proto\"\xef\x03\n\x08Frict\
    ion\x12-\n\x06header\x18\x01\x20\x01(\x0b2\x15.ignition.msgs.HeaderR\x06\
    header\x12\x0e\n\x02mu\x18\x02\x20\x01(\x01R\x02mu\x12\x10\n\x03mu2\x18\
    \x03\x20\x01(\x01R\x03mu2\x12-\n\x05fdir1\x18\x04\x20\x01(\x0b2\x17.igni\
    tion.msgs.Vector3dR\x05fdir1\x12\x14\n\x05slip1\x18\x05\x20\x01(\x01R\
    \x05slip1\x12\x14\n\x05slip2\x18\x06\x20\x01(\x01R\x05slip2\x12?\n\ttors\
    ional\x18\x07\x20\x01(\x0b2!.ignition.msgs.Friction.TorsionalR\ttorsiona\
    l\x1a\xf5\x01\n\tTorsional\x12\x20\n\x0bcoefficient\x18\x01\x20\x01(\x01\
    R\x0bcoefficient\x12(\n\x10use_patch_radius\x18\x02\x20\x01(\x08R\x0euse\
    PatchRadius\x12!\n\x0cpatch_radius\x18\x03\x20\x01(\x01R\x0bpatchRadius\
    \x12%\n\x0esurface_radius\x18\x04\x20\x01(\x01R\rsurfaceRadius\x127\n\
    \x03ode\x18\x05\x20\x01(\x0b2%.ignition.msgs.Friction.Torsional.ODER\x03\
    ode\x1a\x19\n\x03ODE\x12\x12\n\x04slip\x18\x01\x20\x01(\x01R\x04slipB#\n\
    \x11com.ignition.msgsB\x0eFrictionProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::vector3d::file_descriptor().clone());
            deps.push(super::header::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Friction::generated_message_descriptor_data());
            messages.push(friction::Torsional::generated_message_descriptor_data());
            messages.push(friction::torsional::ODE::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ignition/msgs/actor.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_derive::IgnMessage)]
// @@protoc_insertion_point(message:ignition.msgs.Actor)
pub struct Actor {
    // message fields
    // @@protoc_insertion_point(field:ignition.msgs.Actor.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:ignition.msgs.Actor.entity)
    pub entity: ::protobuf::MessageField<super::entity::Entity>,
    // @@protoc_insertion_point(field:ignition.msgs.Actor.pose)
    pub pose: ::protobuf::MessageField<super::pose::Pose>,
    // @@protoc_insertion_point(field:ignition.msgs.Actor.skin_filename)
    pub skin_filename: ::std::string::String,
    // @@protoc_insertion_point(field:ignition.msgs.Actor.skin_scale)
    pub skin_scale: f32,
    // @@protoc_insertion_point(field:ignition.msgs.Actor.animations)
    pub animations: ::std::vec::Vec<actor::Animation>,
    // @@protoc_insertion_point(field:ignition.msgs.Actor.script_loop)
    pub script_loop: bool,
    // @@protoc_insertion_point(field:ignition.msgs.Actor.script_delay_start)
    pub script_delay_start: f32,
    // @@protoc_insertion_point(field:ignition.msgs.Actor.script_auto_start)
    pub script_auto_start: bool,
    // @@protoc_insertion_point(field:ignition.msgs.Actor.trajectories)
    pub trajectories: ::std::vec::Vec<actor::Trajectory>,
    // @@protoc_insertion_point(field:ignition.msgs.Actor.parent)
    pub parent: ::protobuf::MessageField<super::entity::Entity>,
    // special fields
    // @@protoc_insertion_point(special_field:ignition.msgs.Actor.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Actor {
    fn default() -> &'a Actor {
        <Actor as ::protobuf::Message>::default_instance()
    }
}

impl Actor {
    pub fn new() -> Actor {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &Actor| { &m.header },
            |m: &mut Actor| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::entity::Entity>(
            "entity",
            |m: &Actor| { &m.entity },
            |m: &mut Actor| { &mut m.entity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pose::Pose>(
            "pose",
            |m: &Actor| { &m.pose },
            |m: &mut Actor| { &mut m.pose },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "skin_filename",
            |m: &Actor| { &m.skin_filename },
            |m: &mut Actor| { &mut m.skin_filename },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "skin_scale",
            |m: &Actor| { &m.skin_scale },
            |m: &mut Actor| { &mut m.skin_scale },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "animations",
            |m: &Actor| { &m.animations },
            |m: &mut Actor| { &mut m.animations },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "script_loop",
            |m: &Actor| { &m.script_loop },
            |m: &mut Actor| { &mut m.script_loop },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "script_delay_start",
            |m: &Actor| { &m.script_delay_start },
            |m: &mut Actor| { &mut m.script_delay_start },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "script_auto_start",
            |m: &Actor| { &m.script_auto_start },
            |m: &mut Actor| { &mut m.script_auto_start },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "trajectories",
            |m: &Actor| { &m.trajectories },
            |m: &mut Actor| { &mut m.trajectories },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::entity::Entity>(
            "parent",
            |m: &Actor| { &m.parent },
            |m: &mut Actor| { &mut m.parent },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Actor>(
            "Actor",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Actor {
    const NAME: &'static str = "Actor";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.entity)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pose)?;
                },
                34 => {
                    self.skin_filename = is.read_string()?;
                },
                45 => {
                    self.skin_scale = is.read_float()?;
                },
                50 => {
                    self.animations.push(is.read_message()?);
                },
                56 => {
                    self.script_loop = is.read_bool()?;
                },
                69 => {
                    self.script_delay_start = is.read_float()?;
                },
                72 => {
                    self.script_auto_start = is.read_bool()?;
                },
                82 => {
                    self.trajectories.push(is.read_message()?);
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.parent)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.entity.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.pose.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.skin_filename.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.skin_filename);
        }
        if self.skin_scale != 0. {
            my_size += 1 + 4;
        }
        for value in &self.animations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.script_loop != false {
            my_size += 1 + 1;
        }
        if self.script_delay_start != 0. {
            my_size += 1 + 4;
        }
        if self.script_auto_start != false {
            my_size += 1 + 1;
        }
        for value in &self.trajectories {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.parent.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.entity.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.pose.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if !self.skin_filename.is_empty() {
            os.write_string(4, &self.skin_filename)?;
        }
        if self.skin_scale != 0. {
            os.write_float(5, self.skin_scale)?;
        }
        for v in &self.animations {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if self.script_loop != false {
            os.write_bool(7, self.script_loop)?;
        }
        if self.script_delay_start != 0. {
            os.write_float(8, self.script_delay_start)?;
        }
        if self.script_auto_start != false {
            os.write_bool(9, self.script_auto_start)?;
        }
        for v in &self.trajectories {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        if let Some(v) = self.parent.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Actor {
        Actor::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.entity.clear();
        self.pose.clear();
        self.skin_filename.clear();
        self.skin_scale = 0.;
        self.animations.clear();
        self.script_loop = false;
        self.script_delay_start = 0.;
        self.script_auto_start = false;
        self.trajectories.clear();
        self.parent.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Actor {
        static instance: Actor = Actor {
            header: ::protobuf::MessageField::none(),
            entity: ::protobuf::MessageField::none(),
            pose: ::protobuf::MessageField::none(),
            skin_filename: ::std::string::String::new(),
            skin_scale: 0.,
            animations: ::std::vec::Vec::new(),
            script_loop: false,
            script_delay_start: 0.,
            script_auto_start: false,
            trajectories: ::std::vec::Vec::new(),
            parent: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Actor {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Actor").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Actor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Actor {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Actor`
pub mod actor {
    #[derive(PartialEq,Clone,Default,Debug)]
    #[derive(::gz_msgs_derive::IgnMessage)]
    // @@protoc_insertion_point(message:ignition.msgs.Actor.Animation)
    pub struct Animation {
        // message fields
        // @@protoc_insertion_point(field:ignition.msgs.Actor.Animation.name)
        pub name: ::std::string::String,
        // @@protoc_insertion_point(field:ignition.msgs.Actor.Animation.filename)
        pub filename: ::std::string::String,
        // @@protoc_insertion_point(field:ignition.msgs.Actor.Animation.scale)
        pub scale: f32,
        // @@protoc_insertion_point(field:ignition.msgs.Actor.Animation.interpolate_x)
        pub interpolate_x: bool,
        // special fields
        // @@protoc_insertion_point(special_field:ignition.msgs.Actor.Animation.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Animation {
        fn default() -> &'a Animation {
            <Animation as ::protobuf::Message>::default_instance()
        }
    }

    impl Animation {
        pub fn new() -> Animation {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "name",
                |m: &Animation| { &m.name },
                |m: &mut Animation| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "filename",
                |m: &Animation| { &m.filename },
                |m: &mut Animation| { &mut m.filename },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "scale",
                |m: &Animation| { &m.scale },
                |m: &mut Animation| { &mut m.scale },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "interpolate_x",
                |m: &Animation| { &m.interpolate_x },
                |m: &mut Animation| { &mut m.interpolate_x },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Animation>(
                "Actor.Animation",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Animation {
        const NAME: &'static str = "Animation";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = is.read_string()?;
                    },
                    18 => {
                        self.filename = is.read_string()?;
                    },
                    29 => {
                        self.scale = is.read_float()?;
                    },
                    32 => {
                        self.interpolate_x = is.read_bool()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.name.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.name);
            }
            if !self.filename.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.filename);
            }
            if self.scale != 0. {
                my_size += 1 + 4;
            }
            if self.interpolate_x != false {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.name.is_empty() {
                os.write_string(1, &self.name)?;
            }
            if !self.filename.is_empty() {
                os.write_string(2, &self.filename)?;
            }
            if self.scale != 0. {
                os.write_float(3, self.scale)?;
            }
            if self.interpolate_x != false {
                os.write_bool(4, self.interpolate_x)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Animation {
            Animation::new()
        }

        fn clear(&mut self) {
            self.name.clear();
            self.filename.clear();
            self.scale = 0.;
            self.interpolate_x = false;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Animation {
            static instance: Animation = Animation {
                name: ::std::string::String::new(),
                filename: ::std::string::String::new(),
                scale: 0.,
                interpolate_x: false,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Animation {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Actor.Animation").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Animation {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Animation {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    #[derive(::gz_msgs_derive::IgnMessage)]
    // @@protoc_insertion_point(message:ignition.msgs.Actor.Waypoint)
    pub struct Waypoint {
        // message fields
        // @@protoc_insertion_point(field:ignition.msgs.Actor.Waypoint.time)
        pub time: f32,
        // @@protoc_insertion_point(field:ignition.msgs.Actor.Waypoint.pose)
        pub pose: ::protobuf::MessageField<super::super::pose::Pose>,
        // special fields
        // @@protoc_insertion_point(special_field:ignition.msgs.Actor.Waypoint.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Waypoint {
        fn default() -> &'a Waypoint {
            <Waypoint as ::protobuf::Message>::default_instance()
        }
    }

    impl Waypoint {
        pub fn new() -> Waypoint {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "time",
                |m: &Waypoint| { &m.time },
                |m: &mut Waypoint| { &mut m.time },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::pose::Pose>(
                "pose",
                |m: &Waypoint| { &m.pose },
                |m: &mut Waypoint| { &mut m.pose },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Waypoint>(
                "Actor.Waypoint",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Waypoint {
        const NAME: &'static str = "Waypoint";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    13 => {
                        self.time = is.read_float()?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.pose)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.time != 0. {
                my_size += 1 + 4;
            }
            if let Some(v) = self.pose.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.time != 0. {
                os.write_float(1, self.time)?;
            }
            if let Some(v) = self.pose.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Waypoint {
            Waypoint::new()
        }

        fn clear(&mut self) {
            self.time = 0.;
            self.pose.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Waypoint {
            static instance: Waypoint = Waypoint {
                time: 0.,
                pose: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Waypoint {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Actor.Waypoint").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Waypoint {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Waypoint {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    #[derive(::gz_msgs_derive::IgnMessage)]
    // @@protoc_insertion_point(message:ignition.msgs.Actor.Trajectory)
    pub struct Trajectory {
        // message fields
        // @@protoc_insertion_point(field:ignition.msgs.Actor.Trajectory.id)
        pub id: u32,
        // @@protoc_insertion_point(field:ignition.msgs.Actor.Trajectory.type)
        pub type_: ::std::string::String,
        // @@protoc_insertion_point(field:ignition.msgs.Actor.Trajectory.tension)
        pub tension: f32,
        // @@protoc_insertion_point(field:ignition.msgs.Actor.Trajectory.waypoints)
        pub waypoints: ::std::vec::Vec<Waypoint>,
        // special fields
        // @@protoc_insertion_point(special_field:ignition.msgs.Actor.Trajectory.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Trajectory {
        fn default() -> &'a Trajectory {
            <Trajectory as ::protobuf::Message>::default_instance()
        }
    }

    impl Trajectory {
        pub fn new() -> Trajectory {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "id",
                |m: &Trajectory| { &m.id },
                |m: &mut Trajectory| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "type",
                |m: &Trajectory| { &m.type_ },
                |m: &mut Trajectory| { &mut m.type_ },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "tension",
                |m: &Trajectory| { &m.tension },
                |m: &mut Trajectory| { &mut m.tension },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "waypoints",
                |m: &Trajectory| { &m.waypoints },
                |m: &mut Trajectory| { &mut m.waypoints },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Trajectory>(
                "Actor.Trajectory",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Trajectory {
        const NAME: &'static str = "Trajectory";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.id = is.read_uint32()?;
                    },
                    18 => {
                        self.type_ = is.read_string()?;
                    },
                    29 => {
                        self.tension = is.read_float()?;
                    },
                    34 => {
                        self.waypoints.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.id != 0 {
                my_size += ::protobuf::rt::uint32_size(1, self.id);
            }
            if !self.type_.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.type_);
            }
            if self.tension != 0. {
                my_size += 1 + 4;
            }
            for value in &self.waypoints {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.id != 0 {
                os.write_uint32(1, self.id)?;
            }
            if !self.type_.is_empty() {
                os.write_string(2, &self.type_)?;
            }
            if self.tension != 0. {
                os.write_float(3, self.tension)?;
            }
            for v in &self.waypoints {
                ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Trajectory {
            Trajectory::new()
        }

        fn clear(&mut self) {
            self.id = 0;
            self.type_.clear();
            self.tension = 0.;
            self.waypoints.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Trajectory {
            static instance: Trajectory = Trajectory {
                id: 0,
                type_: ::std::string::String::new(),
                tension: 0.,
                waypoints: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Trajectory {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Actor.Trajectory").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Trajectory {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Trajectory {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19ignition/msgs/actor.proto\x12\rignition.msgs\x1a\x1aignition/msgs/\
    entity.proto\x1a\x1aignition/msgs/header.proto\x1a\x18ignition/msgs/pose\
    .proto\"\xcc\x06\n\x05Actor\x12-\n\x06header\x18\x01\x20\x01(\x0b2\x15.i\
    gnition.msgs.HeaderR\x06header\x12-\n\x06entity\x18\x02\x20\x01(\x0b2\
    \x15.ignition.msgs.EntityR\x06entity\x12'\n\x04pose\x18\x03\x20\x01(\x0b\
    2\x13.ignition.msgs.PoseR\x04pose\x12#\n\rskin_filename\x18\x04\x20\x01(\
    \tR\x0cskinFilename\x12\x1d\n\nskin_scale\x18\x05\x20\x01(\x02R\tskinSca\
    le\x12>\n\nanimations\x18\x06\x20\x03(\x0b2\x1e.ignition.msgs.Actor.Anim\
    ationR\nanimations\x12\x1f\n\x0bscript_loop\x18\x07\x20\x01(\x08R\nscrip\
    tLoop\x12,\n\x12script_delay_start\x18\x08\x20\x01(\x02R\x10scriptDelayS\
    tart\x12*\n\x11script_auto_start\x18\t\x20\x01(\x08R\x0fscriptAutoStart\
    \x12C\n\x0ctrajectories\x18\n\x20\x03(\x0b2\x1f.ignition.msgs.Actor.Traj\
    ectoryR\x0ctrajectories\x12-\n\x06parent\x18\x0b\x20\x01(\x0b2\x15.ignit\
    ion.msgs.EntityR\x06parent\x1av\n\tAnimation\x12\x12\n\x04name\x18\x01\
    \x20\x01(\tR\x04name\x12\x1a\n\x08filename\x18\x02\x20\x01(\tR\x08filena\
    me\x12\x14\n\x05scale\x18\x03\x20\x01(\x02R\x05scale\x12#\n\rinterpolate\
    _x\x18\x04\x20\x01(\x08R\x0cinterpolateX\x1aG\n\x08Waypoint\x12\x12\n\
    \x04time\x18\x01\x20\x01(\x02R\x04time\x12'\n\x04pose\x18\x02\x20\x01(\
    \x0b2\x13.ignition.msgs.PoseR\x04pose\x1a\x87\x01\n\nTrajectory\x12\x0e\
    \n\x02id\x18\x01\x20\x01(\rR\x02id\x12\x12\n\x04type\x18\x02\x20\x01(\tR\
    \x04type\x12\x18\n\x07tension\x18\x03\x20\x01(\x02R\x07tension\x12;\n\tw\
    aypoints\x18\x04\x20\x03(\x0b2\x1d.ignition.msgs.Actor.WaypointR\twaypoi\
    ntsB\x20\n\x11com.ignition.msgsB\x0bActorProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::entity::file_descriptor().clone());
            deps.push(super::header::file_descriptor().clone());
            deps.push(super::pose::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(Actor::generated_message_descriptor_data());
            messages.push(actor::Animation::generated_message_descriptor_data());
            messages.push(actor::Waypoint::generated_message_descriptor_data());
            messages.push(actor::Trajectory::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

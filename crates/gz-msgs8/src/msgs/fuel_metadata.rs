// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ignition/msgs/fuel_metadata.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_derive::IgnMessage)]
// @@protoc_insertion_point(message:ignition.msgs.FuelMetadata)
pub struct FuelMetadata {
    // message fields
    // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.description)
    pub description: ::std::string::String,
    // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.version)
    pub version: i32,
    // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.authors)
    pub authors: ::std::vec::Vec<fuel_metadata::Contact>,
    // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.legal)
    pub legal: ::protobuf::MessageField<fuel_metadata::Legal>,
    // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.tags)
    pub tags: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.annotations)
    pub annotations: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.dependencies)
    pub dependencies: ::std::vec::Vec<fuel_metadata::Dependency>,
    // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.compatibilities)
    pub compatibilities: ::std::vec::Vec<fuel_metadata::Compatibility>,
    // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.categories)
    pub categories: ::protobuf::MessageField<fuel_metadata::Categories>,
    // message oneof groups
    pub resource_type: ::std::option::Option<fuel_metadata::Resource_type>,
    // special fields
    // @@protoc_insertion_point(special_field:ignition.msgs.FuelMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FuelMetadata {
    fn default() -> &'a FuelMetadata {
        <FuelMetadata as ::protobuf::Message>::default_instance()
    }
}

impl FuelMetadata {
    pub fn new() -> FuelMetadata {
        ::std::default::Default::default()
    }

    // .ignition.msgs.FuelMetadata.Model model = 1;

    pub fn model(&self) -> &fuel_metadata::Model {
        match self.resource_type {
            ::std::option::Option::Some(fuel_metadata::Resource_type::Model(ref v)) => v,
            _ => <fuel_metadata::Model as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_model(&mut self) {
        self.resource_type = ::std::option::Option::None;
    }

    pub fn has_model(&self) -> bool {
        match self.resource_type {
            ::std::option::Option::Some(fuel_metadata::Resource_type::Model(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_model(&mut self, v: fuel_metadata::Model) {
        self.resource_type = ::std::option::Option::Some(fuel_metadata::Resource_type::Model(v))
    }

    // Mutable pointer to the field.
    pub fn mut_model(&mut self) -> &mut fuel_metadata::Model {
        if let ::std::option::Option::Some(fuel_metadata::Resource_type::Model(_)) = self.resource_type {
        } else {
            self.resource_type = ::std::option::Option::Some(fuel_metadata::Resource_type::Model(fuel_metadata::Model::new()));
        }
        match self.resource_type {
            ::std::option::Option::Some(fuel_metadata::Resource_type::Model(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_model(&mut self) -> fuel_metadata::Model {
        if self.has_model() {
            match self.resource_type.take() {
                ::std::option::Option::Some(fuel_metadata::Resource_type::Model(v)) => v,
                _ => panic!(),
            }
        } else {
            fuel_metadata::Model::new()
        }
    }

    // .ignition.msgs.FuelMetadata.World world = 2;

    pub fn world(&self) -> &fuel_metadata::World {
        match self.resource_type {
            ::std::option::Option::Some(fuel_metadata::Resource_type::World(ref v)) => v,
            _ => <fuel_metadata::World as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_world(&mut self) {
        self.resource_type = ::std::option::Option::None;
    }

    pub fn has_world(&self) -> bool {
        match self.resource_type {
            ::std::option::Option::Some(fuel_metadata::Resource_type::World(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_world(&mut self, v: fuel_metadata::World) {
        self.resource_type = ::std::option::Option::Some(fuel_metadata::Resource_type::World(v))
    }

    // Mutable pointer to the field.
    pub fn mut_world(&mut self) -> &mut fuel_metadata::World {
        if let ::std::option::Option::Some(fuel_metadata::Resource_type::World(_)) = self.resource_type {
        } else {
            self.resource_type = ::std::option::Option::Some(fuel_metadata::Resource_type::World(fuel_metadata::World::new()));
        }
        match self.resource_type {
            ::std::option::Option::Some(fuel_metadata::Resource_type::World(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_world(&mut self) -> fuel_metadata::World {
        if self.has_world() {
            match self.resource_type.take() {
                ::std::option::Option::Some(fuel_metadata::Resource_type::World(v)) => v,
                _ => panic!(),
            }
        } else {
            fuel_metadata::World::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, fuel_metadata::Model>(
            "model",
            FuelMetadata::has_model,
            FuelMetadata::model,
            FuelMetadata::mut_model,
            FuelMetadata::set_model,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, fuel_metadata::World>(
            "world",
            FuelMetadata::has_world,
            FuelMetadata::world,
            FuelMetadata::mut_world,
            FuelMetadata::set_world,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &FuelMetadata| { &m.name },
            |m: &mut FuelMetadata| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &FuelMetadata| { &m.description },
            |m: &mut FuelMetadata| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &FuelMetadata| { &m.version },
            |m: &mut FuelMetadata| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "authors",
            |m: &FuelMetadata| { &m.authors },
            |m: &mut FuelMetadata| { &mut m.authors },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, fuel_metadata::Legal>(
            "legal",
            |m: &FuelMetadata| { &m.legal },
            |m: &mut FuelMetadata| { &mut m.legal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tags",
            |m: &FuelMetadata| { &m.tags },
            |m: &mut FuelMetadata| { &mut m.tags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "annotations",
            |m: &FuelMetadata| { &m.annotations },
            |m: &mut FuelMetadata| { &mut m.annotations },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "dependencies",
            |m: &FuelMetadata| { &m.dependencies },
            |m: &mut FuelMetadata| { &mut m.dependencies },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "compatibilities",
            |m: &FuelMetadata| { &m.compatibilities },
            |m: &mut FuelMetadata| { &mut m.compatibilities },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, fuel_metadata::Categories>(
            "categories",
            |m: &FuelMetadata| { &m.categories },
            |m: &mut FuelMetadata| { &mut m.categories },
        ));
        oneofs.push(fuel_metadata::Resource_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FuelMetadata>(
            "FuelMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FuelMetadata {
    const NAME: &'static str = "FuelMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.resource_type = ::std::option::Option::Some(fuel_metadata::Resource_type::Model(is.read_message()?));
                },
                18 => {
                    self.resource_type = ::std::option::Option::Some(fuel_metadata::Resource_type::World(is.read_message()?));
                },
                26 => {
                    self.name = is.read_string()?;
                },
                34 => {
                    self.description = is.read_string()?;
                },
                40 => {
                    self.version = is.read_int32()?;
                },
                50 => {
                    self.authors.push(is.read_message()?);
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.legal)?;
                },
                66 => {
                    self.tags.push(is.read_string()?);
                },
                74 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.annotations.insert(key, value);
                },
                82 => {
                    self.dependencies.push(is.read_message()?);
                },
                90 => {
                    self.compatibilities.push(is.read_message()?);
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.categories)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.description);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::int32_size(5, self.version);
        }
        for value in &self.authors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.legal.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.tags {
            my_size += ::protobuf::rt::string_size(8, &value);
        };
        for (k, v) in &self.annotations {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.dependencies {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.compatibilities {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.categories.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.resource_type {
            match v {
                &fuel_metadata::Resource_type::Model(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fuel_metadata::Resource_type::World(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        if !self.description.is_empty() {
            os.write_string(4, &self.description)?;
        }
        if self.version != 0 {
            os.write_int32(5, self.version)?;
        }
        for v in &self.authors {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if let Some(v) = self.legal.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        for v in &self.tags {
            os.write_string(8, &v)?;
        };
        for (k, v) in &self.annotations {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(74)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        for v in &self.dependencies {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        for v in &self.compatibilities {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        if let Some(v) = self.categories.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.resource_type {
            match v {
                &fuel_metadata::Resource_type::Model(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &fuel_metadata::Resource_type::World(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FuelMetadata {
        FuelMetadata::new()
    }

    fn clear(&mut self) {
        self.resource_type = ::std::option::Option::None;
        self.resource_type = ::std::option::Option::None;
        self.name.clear();
        self.description.clear();
        self.version = 0;
        self.authors.clear();
        self.legal.clear();
        self.tags.clear();
        self.annotations.clear();
        self.dependencies.clear();
        self.compatibilities.clear();
        self.categories.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FuelMetadata {
        static instance: ::protobuf::rt::Lazy<FuelMetadata> = ::protobuf::rt::Lazy::new();
        instance.get(FuelMetadata::new)
    }
}

impl ::protobuf::MessageFull for FuelMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FuelMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FuelMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FuelMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `FuelMetadata`
pub mod fuel_metadata {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ignition.msgs.FuelMetadata.resource_type)
    pub enum Resource_type {
        // @@protoc_insertion_point(oneof_field:ignition.msgs.FuelMetadata.model)
        Model(Model),
        // @@protoc_insertion_point(oneof_field:ignition.msgs.FuelMetadata.world)
        World(World),
    }

    impl ::protobuf::Oneof for Resource_type {
    }

    impl ::protobuf::OneofFull for Resource_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::FuelMetadata as ::protobuf::MessageFull>::descriptor().oneof_by_name("resource_type").unwrap()).clone()
        }
    }

    impl Resource_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Resource_type>("resource_type")
        }
    }
    #[derive(PartialEq,Clone,Default,Debug)]
    #[derive(::gz_msgs_derive::IgnMessage)]
    // @@protoc_insertion_point(message:ignition.msgs.FuelMetadata.Contact)
    pub struct Contact {
        // message fields
        // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.Contact.name)
        pub name: ::std::string::String,
        // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.Contact.email)
        pub email: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:ignition.msgs.FuelMetadata.Contact.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Contact {
        fn default() -> &'a Contact {
            <Contact as ::protobuf::Message>::default_instance()
        }
    }

    impl Contact {
        pub fn new() -> Contact {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "name",
                |m: &Contact| { &m.name },
                |m: &mut Contact| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "email",
                |m: &Contact| { &m.email },
                |m: &mut Contact| { &mut m.email },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Contact>(
                "FuelMetadata.Contact",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Contact {
        const NAME: &'static str = "Contact";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = is.read_string()?;
                    },
                    18 => {
                        self.email = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.name.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.name);
            }
            if !self.email.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.email);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.name.is_empty() {
                os.write_string(1, &self.name)?;
            }
            if !self.email.is_empty() {
                os.write_string(2, &self.email)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Contact {
            Contact::new()
        }

        fn clear(&mut self) {
            self.name.clear();
            self.email.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Contact {
            static instance: Contact = Contact {
                name: ::std::string::String::new(),
                email: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Contact {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("FuelMetadata.Contact").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Contact {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Contact {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    #[derive(::gz_msgs_derive::IgnMessage)]
    // @@protoc_insertion_point(message:ignition.msgs.FuelMetadata.Legal)
    pub struct Legal {
        // message fields
        // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.Legal.copyright)
        pub copyright: ::std::string::String,
        // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.Legal.license)
        pub license: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:ignition.msgs.FuelMetadata.Legal.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Legal {
        fn default() -> &'a Legal {
            <Legal as ::protobuf::Message>::default_instance()
        }
    }

    impl Legal {
        pub fn new() -> Legal {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "copyright",
                |m: &Legal| { &m.copyright },
                |m: &mut Legal| { &mut m.copyright },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "license",
                |m: &Legal| { &m.license },
                |m: &mut Legal| { &mut m.license },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Legal>(
                "FuelMetadata.Legal",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Legal {
        const NAME: &'static str = "Legal";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.copyright = is.read_string()?;
                    },
                    18 => {
                        self.license = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.copyright.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.copyright);
            }
            if !self.license.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.license);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.copyright.is_empty() {
                os.write_string(1, &self.copyright)?;
            }
            if !self.license.is_empty() {
                os.write_string(2, &self.license)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Legal {
            Legal::new()
        }

        fn clear(&mut self) {
            self.copyright.clear();
            self.license.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Legal {
            static instance: Legal = Legal {
                copyright: ::std::string::String::new(),
                license: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Legal {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("FuelMetadata.Legal").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Legal {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Legal {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    #[derive(::gz_msgs_derive::IgnMessage)]
    // @@protoc_insertion_point(message:ignition.msgs.FuelMetadata.Model)
    pub struct Model {
        // message fields
        // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.Model.file)
        pub file: ::std::string::String,
        // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.Model.file_format)
        pub file_format: ::protobuf::MessageField<super::super::versioned_name::VersionedName>,
        // special fields
        // @@protoc_insertion_point(special_field:ignition.msgs.FuelMetadata.Model.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Model {
        fn default() -> &'a Model {
            <Model as ::protobuf::Message>::default_instance()
        }
    }

    impl Model {
        pub fn new() -> Model {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "file",
                |m: &Model| { &m.file },
                |m: &mut Model| { &mut m.file },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::versioned_name::VersionedName>(
                "file_format",
                |m: &Model| { &m.file_format },
                |m: &mut Model| { &mut m.file_format },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Model>(
                "FuelMetadata.Model",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Model {
        const NAME: &'static str = "Model";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.file = is.read_string()?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.file_format)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.file.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.file);
            }
            if let Some(v) = self.file_format.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.file.is_empty() {
                os.write_string(1, &self.file)?;
            }
            if let Some(v) = self.file_format.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Model {
            Model::new()
        }

        fn clear(&mut self) {
            self.file.clear();
            self.file_format.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Model {
            static instance: Model = Model {
                file: ::std::string::String::new(),
                file_format: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Model {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("FuelMetadata.Model").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Model {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Model {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    #[derive(::gz_msgs_derive::IgnMessage)]
    // @@protoc_insertion_point(message:ignition.msgs.FuelMetadata.World)
    pub struct World {
        // message fields
        // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.World.file)
        pub file: ::std::string::String,
        // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.World.file_format)
        pub file_format: ::protobuf::MessageField<super::super::versioned_name::VersionedName>,
        // special fields
        // @@protoc_insertion_point(special_field:ignition.msgs.FuelMetadata.World.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a World {
        fn default() -> &'a World {
            <World as ::protobuf::Message>::default_instance()
        }
    }

    impl World {
        pub fn new() -> World {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "file",
                |m: &World| { &m.file },
                |m: &mut World| { &mut m.file },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::versioned_name::VersionedName>(
                "file_format",
                |m: &World| { &m.file_format },
                |m: &mut World| { &mut m.file_format },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<World>(
                "FuelMetadata.World",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for World {
        const NAME: &'static str = "World";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.file = is.read_string()?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.file_format)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.file.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.file);
            }
            if let Some(v) = self.file_format.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.file.is_empty() {
                os.write_string(1, &self.file)?;
            }
            if let Some(v) = self.file_format.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> World {
            World::new()
        }

        fn clear(&mut self) {
            self.file.clear();
            self.file_format.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static World {
            static instance: World = World {
                file: ::std::string::String::new(),
                file_format: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for World {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("FuelMetadata.World").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for World {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for World {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    #[derive(::gz_msgs_derive::IgnMessage)]
    // @@protoc_insertion_point(message:ignition.msgs.FuelMetadata.Dependency)
    pub struct Dependency {
        // message fields
        // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.Dependency.uri)
        pub uri: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:ignition.msgs.FuelMetadata.Dependency.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Dependency {
        fn default() -> &'a Dependency {
            <Dependency as ::protobuf::Message>::default_instance()
        }
    }

    impl Dependency {
        pub fn new() -> Dependency {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "uri",
                |m: &Dependency| { &m.uri },
                |m: &mut Dependency| { &mut m.uri },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Dependency>(
                "FuelMetadata.Dependency",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Dependency {
        const NAME: &'static str = "Dependency";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.uri = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.uri.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.uri);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.uri.is_empty() {
                os.write_string(1, &self.uri)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Dependency {
            Dependency::new()
        }

        fn clear(&mut self) {
            self.uri.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Dependency {
            static instance: Dependency = Dependency {
                uri: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Dependency {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("FuelMetadata.Dependency").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Dependency {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Dependency {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    #[derive(::gz_msgs_derive::IgnMessage)]
    // @@protoc_insertion_point(message:ignition.msgs.FuelMetadata.Compatibility)
    pub struct Compatibility {
        // message fields
        // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.Compatibility.name)
        pub name: ::std::string::String,
        // message oneof groups
        pub version_type: ::std::option::Option<compatibility::Version_type>,
        // special fields
        // @@protoc_insertion_point(special_field:ignition.msgs.FuelMetadata.Compatibility.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Compatibility {
        fn default() -> &'a Compatibility {
            <Compatibility as ::protobuf::Message>::default_instance()
        }
    }

    impl Compatibility {
        pub fn new() -> Compatibility {
            ::std::default::Default::default()
        }

        // .ignition.msgs.Version version = 2;

        pub fn version(&self) -> &super::super::version::Version {
            match self.version_type {
                ::std::option::Option::Some(compatibility::Version_type::Version(ref v)) => v,
                _ => <super::super::version::Version as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_version(&mut self) {
            self.version_type = ::std::option::Option::None;
        }

        pub fn has_version(&self) -> bool {
            match self.version_type {
                ::std::option::Option::Some(compatibility::Version_type::Version(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_version(&mut self, v: super::super::version::Version) {
            self.version_type = ::std::option::Option::Some(compatibility::Version_type::Version(v))
        }

        // Mutable pointer to the field.
        pub fn mut_version(&mut self) -> &mut super::super::version::Version {
            if let ::std::option::Option::Some(compatibility::Version_type::Version(_)) = self.version_type {
            } else {
                self.version_type = ::std::option::Option::Some(compatibility::Version_type::Version(super::super::version::Version::new()));
            }
            match self.version_type {
                ::std::option::Option::Some(compatibility::Version_type::Version(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_version(&mut self) -> super::super::version::Version {
            if self.has_version() {
                match self.version_type.take() {
                    ::std::option::Option::Some(compatibility::Version_type::Version(v)) => v,
                    _ => panic!(),
                }
            } else {
                super::super::version::Version::new()
            }
        }

        // .ignition.msgs.VersionRange version_range = 3;

        pub fn version_range(&self) -> &super::super::version_range::VersionRange {
            match self.version_type {
                ::std::option::Option::Some(compatibility::Version_type::VersionRange(ref v)) => v,
                _ => <super::super::version_range::VersionRange as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_version_range(&mut self) {
            self.version_type = ::std::option::Option::None;
        }

        pub fn has_version_range(&self) -> bool {
            match self.version_type {
                ::std::option::Option::Some(compatibility::Version_type::VersionRange(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_version_range(&mut self, v: super::super::version_range::VersionRange) {
            self.version_type = ::std::option::Option::Some(compatibility::Version_type::VersionRange(v))
        }

        // Mutable pointer to the field.
        pub fn mut_version_range(&mut self) -> &mut super::super::version_range::VersionRange {
            if let ::std::option::Option::Some(compatibility::Version_type::VersionRange(_)) = self.version_type {
            } else {
                self.version_type = ::std::option::Option::Some(compatibility::Version_type::VersionRange(super::super::version_range::VersionRange::new()));
            }
            match self.version_type {
                ::std::option::Option::Some(compatibility::Version_type::VersionRange(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_version_range(&mut self) -> super::super::version_range::VersionRange {
            if self.has_version_range() {
                match self.version_type.take() {
                    ::std::option::Option::Some(compatibility::Version_type::VersionRange(v)) => v,
                    _ => panic!(),
                }
            } else {
                super::super::version_range::VersionRange::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "name",
                |m: &Compatibility| { &m.name },
                |m: &mut Compatibility| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::super::version::Version>(
                "version",
                Compatibility::has_version,
                Compatibility::version,
                Compatibility::mut_version,
                Compatibility::set_version,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::super::version_range::VersionRange>(
                "version_range",
                Compatibility::has_version_range,
                Compatibility::version_range,
                Compatibility::mut_version_range,
                Compatibility::set_version_range,
            ));
            oneofs.push(compatibility::Version_type::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Compatibility>(
                "FuelMetadata.Compatibility",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Compatibility {
        const NAME: &'static str = "Compatibility";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = is.read_string()?;
                    },
                    18 => {
                        self.version_type = ::std::option::Option::Some(compatibility::Version_type::Version(is.read_message()?));
                    },
                    26 => {
                        self.version_type = ::std::option::Option::Some(compatibility::Version_type::VersionRange(is.read_message()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.name.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.name);
            }
            if let ::std::option::Option::Some(ref v) = self.version_type {
                match v {
                    &compatibility::Version_type::Version(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &compatibility::Version_type::VersionRange(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.name.is_empty() {
                os.write_string(1, &self.name)?;
            }
            if let ::std::option::Option::Some(ref v) = self.version_type {
                match v {
                    &compatibility::Version_type::Version(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                    },
                    &compatibility::Version_type::VersionRange(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Compatibility {
            Compatibility::new()
        }

        fn clear(&mut self) {
            self.name.clear();
            self.version_type = ::std::option::Option::None;
            self.version_type = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Compatibility {
            static instance: Compatibility = Compatibility {
                name: ::std::string::String::new(),
                version_type: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Compatibility {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("FuelMetadata.Compatibility").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Compatibility {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Compatibility {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Compatibility`
    pub mod compatibility {

        #[derive(Clone,PartialEq,Debug)]
        #[non_exhaustive]
        // @@protoc_insertion_point(oneof:ignition.msgs.FuelMetadata.Compatibility.version_type)
        pub enum Version_type {
            // @@protoc_insertion_point(oneof_field:ignition.msgs.FuelMetadata.Compatibility.version)
            Version(super::super::super::version::Version),
            // @@protoc_insertion_point(oneof_field:ignition.msgs.FuelMetadata.Compatibility.version_range)
            VersionRange(super::super::super::version_range::VersionRange),
        }

        impl ::protobuf::Oneof for Version_type {
        }

        impl ::protobuf::OneofFull for Version_type {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::Compatibility as ::protobuf::MessageFull>::descriptor().oneof_by_name("version_type").unwrap()).clone()
            }
        }

        impl Version_type {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Version_type>("version_type")
            }
        }
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    #[derive(::gz_msgs_derive::IgnMessage)]
    // @@protoc_insertion_point(message:ignition.msgs.FuelMetadata.Categories)
    pub struct Categories {
        // message fields
        // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.Categories.first)
        pub first: ::std::string::String,
        // @@protoc_insertion_point(field:ignition.msgs.FuelMetadata.Categories.second)
        pub second: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:ignition.msgs.FuelMetadata.Categories.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Categories {
        fn default() -> &'a Categories {
            <Categories as ::protobuf::Message>::default_instance()
        }
    }

    impl Categories {
        pub fn new() -> Categories {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "first",
                |m: &Categories| { &m.first },
                |m: &mut Categories| { &mut m.first },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "second",
                |m: &Categories| { &m.second },
                |m: &mut Categories| { &mut m.second },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Categories>(
                "FuelMetadata.Categories",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Categories {
        const NAME: &'static str = "Categories";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.first = is.read_string()?;
                    },
                    18 => {
                        self.second = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.first.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.first);
            }
            if !self.second.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.second);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.first.is_empty() {
                os.write_string(1, &self.first)?;
            }
            if !self.second.is_empty() {
                os.write_string(2, &self.second)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Categories {
            Categories::new()
        }

        fn clear(&mut self) {
            self.first.clear();
            self.second.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Categories {
            static instance: Categories = Categories {
                first: ::std::string::String::new(),
                second: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Categories {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("FuelMetadata.Categories").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Categories {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Categories {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!ignition/msgs/fuel_metadata.proto\x12\rignition.msgs\x1a\x1bignition/\
    msgs/version.proto\x1a!ignition/msgs/version_range.proto\x1a\"ignition/m\
    sgs/versioned_name.proto\"\xa2\n\n\x0cFuelMetadata\x129\n\x05model\x18\
    \x01\x20\x01(\x0b2!.ignition.msgs.FuelMetadata.ModelH\0R\x05model\x129\n\
    \x05world\x18\x02\x20\x01(\x0b2!.ignition.msgs.FuelMetadata.WorldH\0R\
    \x05world\x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04name\x12\x20\n\x0bdes\
    cription\x18\x04\x20\x01(\tR\x0bdescription\x12\x18\n\x07version\x18\x05\
    \x20\x01(\x05R\x07version\x12=\n\x07authors\x18\x06\x20\x03(\x0b2#.ignit\
    ion.msgs.FuelMetadata.ContactR\x07authors\x127\n\x05legal\x18\x07\x20\
    \x01(\x0b2!.ignition.msgs.FuelMetadata.LegalR\x05legal\x12\x12\n\x04tags\
    \x18\x08\x20\x03(\tR\x04tags\x12N\n\x0bannotations\x18\t\x20\x03(\x0b2,.\
    ignition.msgs.FuelMetadata.AnnotationsEntryR\x0bannotations\x12J\n\x0cde\
    pendencies\x18\n\x20\x03(\x0b2&.ignition.msgs.FuelMetadata.DependencyR\
    \x0cdependencies\x12S\n\x0fcompatibilities\x18\x0b\x20\x03(\x0b2).igniti\
    on.msgs.FuelMetadata.CompatibilityR\x0fcompatibilities\x12F\n\ncategorie\
    s\x18\x0c\x20\x01(\x0b2&.ignition.msgs.FuelMetadata.CategoriesR\ncategor\
    ies\x1a3\n\x07Contact\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\
    \x14\n\x05email\x18\x02\x20\x01(\tR\x05email\x1a?\n\x05Legal\x12\x1c\n\t\
    copyright\x18\x01\x20\x01(\tR\tcopyright\x12\x18\n\x07license\x18\x02\
    \x20\x01(\tR\x07license\x1aZ\n\x05Model\x12\x12\n\x04file\x18\x01\x20\
    \x01(\tR\x04file\x12=\n\x0bfile_format\x18\x02\x20\x01(\x0b2\x1c.ignitio\
    n.msgs.VersionedNameR\nfileFormat\x1aZ\n\x05World\x12\x12\n\x04file\x18\
    \x01\x20\x01(\tR\x04file\x12=\n\x0bfile_format\x18\x02\x20\x01(\x0b2\x1c\
    .ignition.msgs.VersionedNameR\nfileFormat\x1a\x1e\n\nDependency\x12\x10\
    \n\x03uri\x18\x01\x20\x01(\tR\x03uri\x1a\xab\x01\n\rCompatibility\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x122\n\x07version\x18\x02\x20\
    \x01(\x0b2\x16.ignition.msgs.VersionH\0R\x07version\x12B\n\rversion_rang\
    e\x18\x03\x20\x01(\x0b2\x1b.ignition.msgs.VersionRangeH\0R\x0cversionRan\
    geB\x0e\n\x0cversion_type\x1a:\n\nCategories\x12\x14\n\x05first\x18\x01\
    \x20\x01(\tR\x05first\x12\x16\n\x06second\x18\x02\x20\x01(\tR\x06second\
    \x1a>\n\x10AnnotationsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01B\x0f\n\rresou\
    rce_typeB!\n\x11com.ignition.msgsB\x0cFuelMetadatab\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::version::file_descriptor().clone());
            deps.push(super::version_range::file_descriptor().clone());
            deps.push(super::versioned_name::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(FuelMetadata::generated_message_descriptor_data());
            messages.push(fuel_metadata::Contact::generated_message_descriptor_data());
            messages.push(fuel_metadata::Legal::generated_message_descriptor_data());
            messages.push(fuel_metadata::Model::generated_message_descriptor_data());
            messages.push(fuel_metadata::World::generated_message_descriptor_data());
            messages.push(fuel_metadata::Dependency::generated_message_descriptor_data());
            messages.push(fuel_metadata::Compatibility::generated_message_descriptor_data());
            messages.push(fuel_metadata::Categories::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

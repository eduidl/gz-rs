// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ignition/msgs/scene.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_common::IgnMessage)]
// @@protoc_insertion_point(message:ignition.msgs.Scene)
pub struct Scene {
    // message fields
    // @@protoc_insertion_point(field:ignition.msgs.Scene.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:ignition.msgs.Scene.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:ignition.msgs.Scene.ambient)
    pub ambient: ::protobuf::MessageField<super::color::Color>,
    // @@protoc_insertion_point(field:ignition.msgs.Scene.background)
    pub background: ::protobuf::MessageField<super::color::Color>,
    // @@protoc_insertion_point(field:ignition.msgs.Scene.sky)
    pub sky: ::protobuf::MessageField<super::sky::Sky>,
    // @@protoc_insertion_point(field:ignition.msgs.Scene.shadows)
    pub shadows: bool,
    // @@protoc_insertion_point(field:ignition.msgs.Scene.fog)
    pub fog: ::protobuf::MessageField<super::fog::Fog>,
    // @@protoc_insertion_point(field:ignition.msgs.Scene.grid)
    pub grid: bool,
    // @@protoc_insertion_point(field:ignition.msgs.Scene.model)
    pub model: ::std::vec::Vec<super::model::Model>,
    // @@protoc_insertion_point(field:ignition.msgs.Scene.light)
    pub light: ::std::vec::Vec<super::light::Light>,
    // @@protoc_insertion_point(field:ignition.msgs.Scene.joint)
    pub joint: ::std::vec::Vec<super::joint::Joint>,
    // @@protoc_insertion_point(field:ignition.msgs.Scene.origin_visual)
    pub origin_visual: bool,
    // @@protoc_insertion_point(field:ignition.msgs.Scene.shadow_caster_material_script)
    pub shadow_caster_material_script: ::protobuf::MessageField<super::material::material::Script>,
    // special fields
    // @@protoc_insertion_point(special_field:ignition.msgs.Scene.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Scene {
    fn default() -> &'a Scene {
        <Scene as ::protobuf::Message>::default_instance()
    }
}

impl Scene {
    pub fn new() -> Scene {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &Scene| { &m.header },
            |m: &mut Scene| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Scene| { &m.name },
            |m: &mut Scene| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::color::Color>(
            "ambient",
            |m: &Scene| { &m.ambient },
            |m: &mut Scene| { &mut m.ambient },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::color::Color>(
            "background",
            |m: &Scene| { &m.background },
            |m: &mut Scene| { &mut m.background },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sky::Sky>(
            "sky",
            |m: &Scene| { &m.sky },
            |m: &mut Scene| { &mut m.sky },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "shadows",
            |m: &Scene| { &m.shadows },
            |m: &mut Scene| { &mut m.shadows },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::fog::Fog>(
            "fog",
            |m: &Scene| { &m.fog },
            |m: &mut Scene| { &mut m.fog },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "grid",
            |m: &Scene| { &m.grid },
            |m: &mut Scene| { &mut m.grid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "model",
            |m: &Scene| { &m.model },
            |m: &mut Scene| { &mut m.model },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "light",
            |m: &Scene| { &m.light },
            |m: &mut Scene| { &mut m.light },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "joint",
            |m: &Scene| { &m.joint },
            |m: &mut Scene| { &mut m.joint },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "origin_visual",
            |m: &Scene| { &m.origin_visual },
            |m: &mut Scene| { &mut m.origin_visual },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::material::material::Script>(
            "shadow_caster_material_script",
            |m: &Scene| { &m.shadow_caster_material_script },
            |m: &mut Scene| { &mut m.shadow_caster_material_script },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Scene>(
            "Scene",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Scene {
    const NAME: &'static str = "Scene";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ambient)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.background)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sky)?;
                },
                48 => {
                    self.shadows = is.read_bool()?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.fog)?;
                },
                64 => {
                    self.grid = is.read_bool()?;
                },
                74 => {
                    self.model.push(is.read_message()?);
                },
                82 => {
                    self.light.push(is.read_message()?);
                },
                90 => {
                    self.joint.push(is.read_message()?);
                },
                96 => {
                    self.origin_visual = is.read_bool()?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.shadow_caster_material_script)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if let Some(v) = self.ambient.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.background.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sky.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.shadows != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.fog.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.grid != false {
            my_size += 1 + 1;
        }
        for value in &self.model {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.light {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.joint {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.origin_visual != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.shadow_caster_material_script.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if let Some(v) = self.ambient.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.background.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.sky.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if self.shadows != false {
            os.write_bool(6, self.shadows)?;
        }
        if let Some(v) = self.fog.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if self.grid != false {
            os.write_bool(8, self.grid)?;
        }
        for v in &self.model {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        for v in &self.light {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        for v in &self.joint {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        if self.origin_visual != false {
            os.write_bool(12, self.origin_visual)?;
        }
        if let Some(v) = self.shadow_caster_material_script.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Scene {
        Scene::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.name.clear();
        self.ambient.clear();
        self.background.clear();
        self.sky.clear();
        self.shadows = false;
        self.fog.clear();
        self.grid = false;
        self.model.clear();
        self.light.clear();
        self.joint.clear();
        self.origin_visual = false;
        self.shadow_caster_material_script.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Scene {
        static instance: Scene = Scene {
            header: ::protobuf::MessageField::none(),
            name: ::std::string::String::new(),
            ambient: ::protobuf::MessageField::none(),
            background: ::protobuf::MessageField::none(),
            sky: ::protobuf::MessageField::none(),
            shadows: false,
            fog: ::protobuf::MessageField::none(),
            grid: false,
            model: ::std::vec::Vec::new(),
            light: ::std::vec::Vec::new(),
            joint: ::std::vec::Vec::new(),
            origin_visual: false,
            shadow_caster_material_script: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Scene {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Scene").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Scene {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Scene {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19ignition/msgs/scene.proto\x12\rignition.msgs\x1a\x19ignition/msgs/\
    color.proto\x1a\x17ignition/msgs/fog.proto\x1a\x17ignition/msgs/sky.prot\
    o\x1a\x19ignition/msgs/light.proto\x1a\x19ignition/msgs/joint.proto\x1a\
    \x1cignition/msgs/material.proto\x1a\x19ignition/msgs/model.proto\x1a\
    \x1aignition/msgs/header.proto\"\xb6\x04\n\x05Scene\x12-\n\x06header\x18\
    \x01\x20\x01(\x0b2\x15.ignition.msgs.HeaderR\x06header\x12\x12\n\x04name\
    \x18\x02\x20\x01(\tR\x04name\x12.\n\x07ambient\x18\x03\x20\x01(\x0b2\x14\
    .ignition.msgs.ColorR\x07ambient\x124\n\nbackground\x18\x04\x20\x01(\x0b\
    2\x14.ignition.msgs.ColorR\nbackground\x12$\n\x03sky\x18\x05\x20\x01(\
    \x0b2\x12.ignition.msgs.SkyR\x03sky\x12\x18\n\x07shadows\x18\x06\x20\x01\
    (\x08R\x07shadows\x12$\n\x03fog\x18\x07\x20\x01(\x0b2\x12.ignition.msgs.\
    FogR\x03fog\x12\x12\n\x04grid\x18\x08\x20\x01(\x08R\x04grid\x12*\n\x05mo\
    del\x18\t\x20\x03(\x0b2\x14.ignition.msgs.ModelR\x05model\x12*\n\x05ligh\
    t\x18\n\x20\x03(\x0b2\x14.ignition.msgs.LightR\x05light\x12*\n\x05joint\
    \x18\x0b\x20\x03(\x0b2\x14.ignition.msgs.JointR\x05joint\x12#\n\rorigin_\
    visual\x18\x0c\x20\x01(\x08R\x0coriginVisual\x12a\n\x1dshadow_caster_mat\
    erial_script\x18\r\x20\x01(\x0b2\x1e.ignition.msgs.Material.ScriptR\x1as\
    hadowCasterMaterialScriptB\x20\n\x11com.ignition.msgsB\x0bSceneProtosb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::color::file_descriptor().clone());
            deps.push(super::fog::file_descriptor().clone());
            deps.push(super::sky::file_descriptor().clone());
            deps.push(super::light::file_descriptor().clone());
            deps.push(super::joint::file_descriptor().clone());
            deps.push(super::material::file_descriptor().clone());
            deps.push(super::model::file_descriptor().clone());
            deps.push(super::header::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Scene::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

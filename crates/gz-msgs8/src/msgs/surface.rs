// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ignition/msgs/surface.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::gz_msgs_common::IgnMessage)]
// @@protoc_insertion_point(message:ignition.msgs.Surface)
pub struct Surface {
    // message fields
    // @@protoc_insertion_point(field:ignition.msgs.Surface.header)
    pub header: ::protobuf::MessageField<super::header::Header>,
    // @@protoc_insertion_point(field:ignition.msgs.Surface.friction)
    pub friction: ::protobuf::MessageField<super::friction::Friction>,
    // @@protoc_insertion_point(field:ignition.msgs.Surface.restitution_coefficient)
    pub restitution_coefficient: f64,
    // @@protoc_insertion_point(field:ignition.msgs.Surface.bounce_threshold)
    pub bounce_threshold: f64,
    // @@protoc_insertion_point(field:ignition.msgs.Surface.soft_cfm)
    pub soft_cfm: f64,
    // @@protoc_insertion_point(field:ignition.msgs.Surface.soft_erp)
    pub soft_erp: f64,
    // @@protoc_insertion_point(field:ignition.msgs.Surface.kp)
    pub kp: f64,
    // @@protoc_insertion_point(field:ignition.msgs.Surface.kd)
    pub kd: f64,
    // @@protoc_insertion_point(field:ignition.msgs.Surface.max_vel)
    pub max_vel: f64,
    // @@protoc_insertion_point(field:ignition.msgs.Surface.min_depth)
    pub min_depth: f64,
    // @@protoc_insertion_point(field:ignition.msgs.Surface.collide_without_contact)
    pub collide_without_contact: bool,
    // @@protoc_insertion_point(field:ignition.msgs.Surface.collide_without_contact_bitmask)
    pub collide_without_contact_bitmask: u32,
    // @@protoc_insertion_point(field:ignition.msgs.Surface.collide_bitmask)
    pub collide_bitmask: u32,
    // @@protoc_insertion_point(field:ignition.msgs.Surface.elastic_modulus)
    pub elastic_modulus: f64,
    // special fields
    // @@protoc_insertion_point(special_field:ignition.msgs.Surface.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Surface {
    fn default() -> &'a Surface {
        <Surface as ::protobuf::Message>::default_instance()
    }
}

impl Surface {
    pub fn new() -> Surface {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::header::Header>(
            "header",
            |m: &Surface| { &m.header },
            |m: &mut Surface| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::friction::Friction>(
            "friction",
            |m: &Surface| { &m.friction },
            |m: &mut Surface| { &mut m.friction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "restitution_coefficient",
            |m: &Surface| { &m.restitution_coefficient },
            |m: &mut Surface| { &mut m.restitution_coefficient },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bounce_threshold",
            |m: &Surface| { &m.bounce_threshold },
            |m: &mut Surface| { &mut m.bounce_threshold },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "soft_cfm",
            |m: &Surface| { &m.soft_cfm },
            |m: &mut Surface| { &mut m.soft_cfm },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "soft_erp",
            |m: &Surface| { &m.soft_erp },
            |m: &mut Surface| { &mut m.soft_erp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "kp",
            |m: &Surface| { &m.kp },
            |m: &mut Surface| { &mut m.kp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "kd",
            |m: &Surface| { &m.kd },
            |m: &mut Surface| { &mut m.kd },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_vel",
            |m: &Surface| { &m.max_vel },
            |m: &mut Surface| { &mut m.max_vel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "min_depth",
            |m: &Surface| { &m.min_depth },
            |m: &mut Surface| { &mut m.min_depth },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "collide_without_contact",
            |m: &Surface| { &m.collide_without_contact },
            |m: &mut Surface| { &mut m.collide_without_contact },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "collide_without_contact_bitmask",
            |m: &Surface| { &m.collide_without_contact_bitmask },
            |m: &mut Surface| { &mut m.collide_without_contact_bitmask },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "collide_bitmask",
            |m: &Surface| { &m.collide_bitmask },
            |m: &mut Surface| { &mut m.collide_bitmask },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "elastic_modulus",
            |m: &Surface| { &m.elastic_modulus },
            |m: &mut Surface| { &mut m.elastic_modulus },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Surface>(
            "Surface",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Surface {
    const NAME: &'static str = "Surface";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.friction)?;
                },
                25 => {
                    self.restitution_coefficient = is.read_double()?;
                },
                33 => {
                    self.bounce_threshold = is.read_double()?;
                },
                41 => {
                    self.soft_cfm = is.read_double()?;
                },
                49 => {
                    self.soft_erp = is.read_double()?;
                },
                57 => {
                    self.kp = is.read_double()?;
                },
                65 => {
                    self.kd = is.read_double()?;
                },
                73 => {
                    self.max_vel = is.read_double()?;
                },
                81 => {
                    self.min_depth = is.read_double()?;
                },
                88 => {
                    self.collide_without_contact = is.read_bool()?;
                },
                96 => {
                    self.collide_without_contact_bitmask = is.read_uint32()?;
                },
                104 => {
                    self.collide_bitmask = is.read_uint32()?;
                },
                113 => {
                    self.elastic_modulus = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.friction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.restitution_coefficient != 0. {
            my_size += 1 + 8;
        }
        if self.bounce_threshold != 0. {
            my_size += 1 + 8;
        }
        if self.soft_cfm != 0. {
            my_size += 1 + 8;
        }
        if self.soft_erp != 0. {
            my_size += 1 + 8;
        }
        if self.kp != 0. {
            my_size += 1 + 8;
        }
        if self.kd != 0. {
            my_size += 1 + 8;
        }
        if self.max_vel != 0. {
            my_size += 1 + 8;
        }
        if self.min_depth != 0. {
            my_size += 1 + 8;
        }
        if self.collide_without_contact != false {
            my_size += 1 + 1;
        }
        if self.collide_without_contact_bitmask != 0 {
            my_size += ::protobuf::rt::uint32_size(12, self.collide_without_contact_bitmask);
        }
        if self.collide_bitmask != 0 {
            my_size += ::protobuf::rt::uint32_size(13, self.collide_bitmask);
        }
        if self.elastic_modulus != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.friction.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.restitution_coefficient != 0. {
            os.write_double(3, self.restitution_coefficient)?;
        }
        if self.bounce_threshold != 0. {
            os.write_double(4, self.bounce_threshold)?;
        }
        if self.soft_cfm != 0. {
            os.write_double(5, self.soft_cfm)?;
        }
        if self.soft_erp != 0. {
            os.write_double(6, self.soft_erp)?;
        }
        if self.kp != 0. {
            os.write_double(7, self.kp)?;
        }
        if self.kd != 0. {
            os.write_double(8, self.kd)?;
        }
        if self.max_vel != 0. {
            os.write_double(9, self.max_vel)?;
        }
        if self.min_depth != 0. {
            os.write_double(10, self.min_depth)?;
        }
        if self.collide_without_contact != false {
            os.write_bool(11, self.collide_without_contact)?;
        }
        if self.collide_without_contact_bitmask != 0 {
            os.write_uint32(12, self.collide_without_contact_bitmask)?;
        }
        if self.collide_bitmask != 0 {
            os.write_uint32(13, self.collide_bitmask)?;
        }
        if self.elastic_modulus != 0. {
            os.write_double(14, self.elastic_modulus)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Surface {
        Surface::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.friction.clear();
        self.restitution_coefficient = 0.;
        self.bounce_threshold = 0.;
        self.soft_cfm = 0.;
        self.soft_erp = 0.;
        self.kp = 0.;
        self.kd = 0.;
        self.max_vel = 0.;
        self.min_depth = 0.;
        self.collide_without_contact = false;
        self.collide_without_contact_bitmask = 0;
        self.collide_bitmask = 0;
        self.elastic_modulus = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Surface {
        static instance: Surface = Surface {
            header: ::protobuf::MessageField::none(),
            friction: ::protobuf::MessageField::none(),
            restitution_coefficient: 0.,
            bounce_threshold: 0.,
            soft_cfm: 0.,
            soft_erp: 0.,
            kp: 0.,
            kd: 0.,
            max_vel: 0.,
            min_depth: 0.,
            collide_without_contact: false,
            collide_without_contact_bitmask: 0,
            collide_bitmask: 0,
            elastic_modulus: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Surface {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Surface").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Surface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Surface {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bignition/msgs/surface.proto\x12\rignition.msgs\x1a\x1aignition/msg\
    s/header.proto\x1a\x1cignition/msgs/friction.proto\"\xae\x04\n\x07Surfac\
    e\x12-\n\x06header\x18\x01\x20\x01(\x0b2\x15.ignition.msgs.HeaderR\x06he\
    ader\x123\n\x08friction\x18\x02\x20\x01(\x0b2\x17.ignition.msgs.Friction\
    R\x08friction\x127\n\x17restitution_coefficient\x18\x03\x20\x01(\x01R\
    \x16restitutionCoefficient\x12)\n\x10bounce_threshold\x18\x04\x20\x01(\
    \x01R\x0fbounceThreshold\x12\x19\n\x08soft_cfm\x18\x05\x20\x01(\x01R\x07\
    softCfm\x12\x19\n\x08soft_erp\x18\x06\x20\x01(\x01R\x07softErp\x12\x0e\n\
    \x02kp\x18\x07\x20\x01(\x01R\x02kp\x12\x0e\n\x02kd\x18\x08\x20\x01(\x01R\
    \x02kd\x12\x17\n\x07max_vel\x18\t\x20\x01(\x01R\x06maxVel\x12\x1b\n\tmin\
    _depth\x18\n\x20\x01(\x01R\x08minDepth\x126\n\x17collide_without_contact\
    \x18\x0b\x20\x01(\x08R\x15collideWithoutContact\x12E\n\x1fcollide_withou\
    t_contact_bitmask\x18\x0c\x20\x01(\rR\x1ccollideWithoutContactBitmask\
    \x12'\n\x0fcollide_bitmask\x18\r\x20\x01(\rR\x0ecollideBitmask\x12'\n\
    \x0felastic_modulus\x18\x0e\x20\x01(\x01R\x0eelasticModulusB\"\n\x11com.\
    ignition.msgsB\rSurfaceProtosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::header::file_descriptor().clone());
            deps.push(super::friction::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Surface::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
